
组合构建接口
View page source
组合构建接口
¶
组合构建器接口为
DataApi.portfolio_weighting(expect_rtn_series, day, ..)
⬅ 点击链接查看参数
可支持包含但不限于以下几种组合构建方式：
方式一：选择前N个股票等权构建，或选前百分之N的股票等权构建
方式二：选择前N个股票市值加权构建，或选前百分之N的股票市值加权构建
方式三：先确定为前N个股票；再确定行业权重，可统一设定行业偏离上下限（行业分类标准：申万/中信一级行业，可选将部分一级行业拆分为二级行业），在此基础上可以分别对各个行业的偏离上下限进行设定；最后设定行业内个股权重，等权或市值加权
方式四：先设定行业权重，可统一设定行业偏离上下限（行业分类标准：申万/中信一级行业，可选将部分一级行业拆分为二级行业），在此基础上可以分别对各个行业的偏离上下限进行设定；再设定入选股票，每个行业选前N个，或前百分之N个股票；最后设定行业内个股权重，等权或市值加权
运行组合构建器至少需要输入一个预期收益序列(expect_rtn_series)和一个日期
以下代码首先取出近一个月的涨幅因子，标准化处理后作为运行示例所需要的预期收益
[1]:
import
gfquant
api
=
gfquant
.
DataApi
()
print
(
gfquant
.
__version__
)
1.1.0
[2]:
day
=
'20190401'
# 取过去一个月的涨幅因子，标准化处理后当作预期收益
exp
=
api
.
get_factor_series
(
'CHGCLOSE_1M'
,
day
,
neutral
=
True
,
exclude
=
True
)
# 因子值最大的几个股票
exp
.
sort_values
(
ascending
=
False
)
.
head
()
.
to_frame
()
[2]:
2019-04-01 00:00:00
600155.SH
3.145131
000723.SZ
2.974493
000037.SZ
2.905769
000993.SZ
2.893932
600259.SH
2.893388
整体分配权重
¶
等权构建
可设置两个参数
top_n
和
top_pct
, 分别是选择expect_rtn_series中预期收益最高的前N个股票和选择前N*100%股票。如果两个参数同时设置，则返回两者中股票数较少的结果。
默认权重分配方式就是等权：
weighting='equal'
[3]:
# 选择前50个股票等权构建
api
.
portfolio_weighting
(
exp
,
day
,
top_n
=
50
)
.
head
()
.
to_frame
()
[3]:
0
600155.SH
0.02
000723.SZ
0.02
000037.SZ
0.02
000993.SZ
0.02
600259.SH
0.02
[4]:
# 选择前3%的股票等权构建
w
=
api
.
portfolio_weighting
(
exp
,
day
,
top_pct
=
0.03
)
print
(
len
(
w
))
w
.
head
()
.
to_frame
()
103
[4]:
0
600155.SH
0.009709
000723.SZ
0.009709
000037.SZ
0.009709
000993.SZ
0.009709
600259.SH
0.009709
按市值加权构建
将weighting参数设置为市值因子的名称即可：如
weighting='FFMV'
(自由流通市值)，
weighting='MV'
(总市值)
[5]:
# 选择前50个股票按自由流通市值加权
api
.
portfolio_weighting
(
exp
,
day
,
weighting
=
'FFMV'
,
top_n
=
50
)
.
head
()
.
to_frame
()
[5]:
2019-04-01 00:00:00
600155.SH
0.033378
000723.SZ
0.041009
000037.SZ
0.012790
000993.SZ
0.006545
600259.SH
0.023108
[6]:
# 选择前3%的股票按总市值加权
w
=
api
.
portfolio_weighting
(
exp
,
day
,
weighting
=
'MV'
,
top_pct
=
0.03
)
print
(
len
(
w
))
w
.
head
()
.
to_frame
()
103
[6]:
2019-04-01 00:00:00
600155.SH
0.020883
000723.SZ
0.035787
000037.SZ
0.007454
000993.SZ
0.003323
600259.SH
0.009243
分行业配权重
¶
需要配参数
per_sector_weighting=True
, 即配权重时考虑基准中的行业权重。然后
sector_first
决定是否先设定行业权重在选股票。
另外，还需要选定基准权重和一级行业因子名称(可选将部分一级行业拆分为二级行业)，如
bench='WEIGHT_300',
sector='LEVEL_1_CITIC'
当
per_sector_weighting=True
时，整体分配权重的3个参数仍然有效，其中：
top_n,
top_pct
当
sector_first=False
时，含义是先整体选前N/N*100%股票；当
sector_first=True
时，含义是在每个行业里选前N/N*100%股票
weighting
表示在每个行业里股票的相对权重的分配方式
[7]:
# 取行业和基准权重，后续验证结果使用
import
pandas
as
pd
sect
=
api
.
get_factor_series
(
'LEVEL_1_CITIC'
,
day
)
ben
=
api
.
get_factor_series
(
'WEIGHT_300'
,
day
)
先选股票，再分行业给股票配权重
如果选到的股票里缺少某些基准中的行业，则缺失行业的权重将会被按行业权重比例分配到剩余的行业里。
[8]:
# 先选股票，再分行业给股票配等权
w1
=
api
.
portfolio_weighting
(
exp
,
day
,
top_n
=
100
,
per_sector_weighting
=
True
,
sector_first
=
False
,
bench
=
'WEIGHT_300'
,
sector
=
'LEVEL_1_CITIC'
)
w1
.
head
()
.
to_frame
()
[8]:
2019-04-01 00:00:00
600155.SH
0.275843
000723.SZ
0.015356
000037.SZ
0.007043
000993.SZ
0.007043
600259.SH
0.009970
[9]:
# 检查w1结果，每个行业的相对权重比例和基准一致，且行业内等权
df_w1
=
pd
.
concat
([
w1
.
groupby
(
sect
)
.
sum
(),
ben
.
groupby
(
sect
)
.
sum
()],
axis
=
1
,
sort
=
True
,
keys
=
[
'weight'
,
'bench'
])
print
(
w1
.
count
())
display
(
df_w1
.
sum
()
.
to_frame
(
'sum'
))
df_w1
[
'scale'
]
=
df_w1
[
'weight'
]
/
df_w1
[
'bench'
]
display
(
df_w1
.
head
())
display
(
w1
.
where
(
sect
==
'通信'
)
.
dropna
()
.
to_frame
(
'weight'
))
100
sum
weight
1.00000
bench
0.99997
weight
bench
scale
交通运输
0.050032
0.03193
1.566931
传媒
0.027077
0.01728
1.566931
农林牧渔
0.015497
0.00989
1.566931
医药
0.106222
0.06779
1.566931
商贸零售
0.012551
0.00801
1.566931
weight
600345.SH
0.006942
603602.SH
0.006942
300414.SZ
0.006942
300578.SZ
0.006942
603118.SH
0.006942
先设定行业权重，再分行业选股票并配权重
如果expect_rtn_series里缺少某些基准中的行业，则缺失行业的权重将会被按行业权重比例分配到剩余的行业里。
[10]:
# 先分行业权重，再按行业选20%股票，并给股票按自由流通市值配权
w2
=
api
.
portfolio_weighting
(
exp
,
day
,
top_pct
=
0.2
,
weighting
=
'FFMV'
,
per_sector_weighting
=
True
,
sector_first
=
True
,
bench
=
'WEIGHT_300'
,
sector
=
'LEVEL_1_CITIC'
)
w2
.
head
()
.
to_frame
()
[10]:
2019-04-01 00:00:00
601008.SH
0.000720
600279.SH
0.000643
603128.SH
0.001042
600020.SH
0.001359
000905.SZ
0.000518
[11]:
# 检查w2结果，每个行业的相对权重比例和基准一致，且行业内按自由流通市值配权
df_w2
=
pd
.
concat
([
w2
.
groupby
(
sect
)
.
sum
(),
ben
.
groupby
(
sect
)
.
sum
()],
axis
=
1
,
sort
=
True
,
keys
=
[
'weight'
,
'bench'
])
print
(
w2
.
count
())
display
(
df_w2
.
sum
()
.
to_frame
(
'sum'
))
df_w2
[
'scale'
]
=
df_w2
[
'weight'
]
/
df_w2
[
'bench'
]
display
(
df_w2
.
head
())
display
(
w2
.
where
(
sect
==
'银行'
)
.
dropna
()
.
to_frame
(
'weight'
))
688
sum
weight
1.00000
bench
0.99997
weight
bench
scale
2019-04-01 00:00:00
交通运输
0.031931
0.03193
1.00003
传媒
0.017281
0.01728
1.00003
农林牧渔
0.009890
0.00989
1.00003
医药
0.067792
0.06779
1.00003
商贸零售
0.008010
0.00801
1.00003
weight
002142.SZ
0.012430
601009.SH
0.011340
600036.SH
0.103005
000001.SZ
0.025871
600015.SH
0.011597
600908.SH
0.001413
拆分一级行业和设置行业权重偏离
需要配置以下两个参数：
split_sectors
: 需要拆分为二级行业的一级行业名称列表。如
sector='LEVEL_1_CITIC',
split_sectors=['非银行金融']
则会把非银金融拆分为二级行业： ‘证券Ⅱ’/‘保险Ⅱ’/‘信托及其他’。
sector_deviation
: 行业权重偏离，被拆分的一级行业不能配置，应指定对应二级行业的值。如
sector_deviation={'保险':
0.05,
'银行':
-0.05}
表示保险行业的权重为基准权重+5%，银行行业的权重为基准权重-5%(如行业权重小于或等于0，则不选该行业股票)
[12]:
# 先分行业权重，再按行业选20%股票，并给股票按自由流通市值配权 + 拆分非银行金融行业，且保险和银行的行业权重有调整
w3
=
api
.
portfolio_weighting
(
exp
,
day
,
top_pct
=
0.2
,
weighting
=
'FFMV'
,
per_sector_weighting
=
True
,
sector_first
=
True
,
bench
=
'WEIGHT_300'
,
sector
=
'LEVEL_1_CITIC'
,
split_sectors
=
[
'非银行金融'
],
sector_deviation
=
{
'保险Ⅱ'
:
0.05
,
'银行'
:
-
0.05
}
)
w3
.
head
()
.
to_frame
()
[12]:
2019-04-01 00:00:00
601008.SH
0.000720
600279.SH
0.000643
603128.SH
0.001042
600020.SH
0.001359
000905.SZ
0.000518
[13]:
# 取对应的拆分行业，验证结果使用
sect_3
=
api
.
get_split_sector_series
(
day
,
'LEVEL_1_CITIC'
,
[
'非银行金融'
])
[14]:
# 检查w3结果，每个行业的相对权重
df_w3
=
pd
.
concat
([
w3
.
groupby
(
sect_3
)
.
sum
(),
ben
.
groupby
(
sect_3
)
.
sum
()],
axis
=
1
,
sort
=
True
,
keys
=
[
'weight'
,
'bench'
])
print
(
w3
.
count
())
display
(
df_w3
.
sum
()
.
to_frame
(
'sum'
))
df_w3
[
'scale'
]
=
df_w3
[
'weight'
]
/
df_w3
[
'bench'
]
display
(
df_w3
.
head
())
display
(
w3
.
where
(
sect_3
==
'证券Ⅱ'
)
.
dropna
()
.
sort_values
(
ascending
=
False
)
.
to_frame
(
'weight'
))
688
sum
weight
1.00000
bench
0.99997
weight
bench
scale
2019-04-01 00:00:00
交通运输
0.031931
0.03193
1.000030
传媒
0.017281
0.01728
1.000030
保险Ⅱ
0.135934
0.08593
1.581916
信托及其他
0.004250
0.00425
1.000030
农林牧渔
0.009890
0.00989
1.000030
weight
601108.SH
0.020497
002736.SZ
0.017377
601555.SH
0.014638
002500.SZ
0.009215
000686.SZ
0.008745
601066.SH
0.006657
600155.SH
0.004728
002670.SZ
0.004006
Next
Previous
© Copyright 2018-2022, GF Funds 量化投资部
Built with
Sphinx
using a
theme
provided by
Read the Docs
.