
定制回测框架: Alpha模型
View page source
定制回测框架: Alpha模型
¶
本框架可用于指数增强策略回测和主动量化策略回测，请参考代码中的注释。
[1]:
from
gfquant
import
run_backtest_by_alpha_model
[2]:
# 策略配置通用参数
strategy_conf
=
{
# 开始日期
'start_date'
:
'20171229'
,
# 结束日期
'end_date'
:
'20190416'
,
# 调仓日期，可以是'week_end'/'week_start'/'month_start'/'month_end', 也支持'month_10'/'week_3'，数字n代表每月几号或每周几，非交易日顺延
#           也可以是list of dates: ['2018-01-12', '2018-01-19', '2019-04-09']
'rebalance_days'
:
'month_end'
,
# 买入费用(手续费/滑点/冲击成本..), 如万分之三: 0.0003
'buy_rate'
:
0
,
# 卖出费用(税/手续费/滑点/冲击成本..), 如千分之一: 0.001
'sell_rate'
:
0
,
# 每日固定费用(计提管理费/托管费/运营成本..), 如年管理费1% ≈ 0.01/250
'daily_cost'
:
0
,
# 仓位上限，如果buy_rate/sell_rate/daily_cost > 0，则仓位一定要小于1.0，否则现金不够每天扣费就会出错
'max_position'
:
1.0
,
# 基准指数
'benchmark'
:
'000300.SH'
,
}
# Alpha模型的配置参数
alpha_model_conf
=
{
# 选股股票池, 支持'HS300'/'ZZ500'/'ZZ800'/'ZZ1000'/'CYB'/'ALL', 或自定义选股池函数(def func(date, dataApi) -> pd.Series)
'universe'
:
'HS300'
,
# 细分因子配置表
# 当加权方式为'config'时，会使用'权重'和'方向'；当加权方式为'equal'时，只会使用'方向'；
# 当加权方式为IC_Rule时，'权重'和'方向'都不使用
'descriptor_params'
:
[
{
'fac_name'
:
'Q_EP'
,
'direction'
:
1
,
'weight'
:
1.0
,
'sector_neu'
:
1
,
'size_neu'
:
1
},
{
'名称'
:
'Q_SP'
,
'方向'
:
1
,
'权重'
:
0.6
,
'行业中性化'
:
1
,
'市值中性化'
:
1
},
{
'名称'
:
'BP'
,
'方向'
:
1
,
'权重'
:
0.8
,
'行业中性化'
:
1
,
'市值中性化'
:
1
},
{
'名称'
:
'Q_YOYOP'
,
'方向'
:
1
,
'权重'
:
0.5
,
'行业中性化'
:
1
,
'市值中性化'
:
1
},
{
'名称'
:
'Q_YOYSALES'
,
'方向'
:
1
,
'权重'
:
0.3
,
'行业中性化'
:
1
,
'市值中性化'
:
1
},
{
'名称'
:
'Q_YOYPROFIT'
,
'方向'
:
1
,
'权重'
:
1.0
,
'行业中性化'
:
1
,
'市值中性化'
:
1
},
{
'名称'
:
'Q_ROE_YOY'
,
'方向'
:
1
,
'权重'
:
1.0
,
'行业中性化'
:
1
,
'市值中性化'
:
1
},
{
'名称'
:
'AVGTURNOVER_1M'
,
'方向'
:
-
1
,
'权重'
:
1.2
,
'行业中性化'
:
1
,
'市值中性化'
:
1
},
{
'名称'
:
'ILLIQ_1M_INVERSE'
,
'方向'
:
-
1
,
'权重'
:
1.2
,
'行业中性化'
:
1
,
'市值中性化'
:
1
},
{
'名称'
:
'CHGCLOSE_1M'
,
'方向'
:
-
1
,
'权重'
:
1.0
,
'行业中性化'
:
1
,
'市值中性化'
:
1
},
{
'名称'
:
'LN_DQ_MV'
,
'方向'
:
1
,
'权重'
:
1.0
,
'行业中性化'
:
1
,
'市值中性化'
:
0
},
],
# 合成大类因子的参数
'decriptor_to_factor'
:
{
# 是否合成大类因子，如为True首先将细分因子合成大类因子；为False则不合成，直接使用细分因子(descriptor_params)
'enable'
:
True
,
# 可选合成方法和参数说明如下：
# 1.'equal': 等权;
# 2.'config': descriptor_params里指定的权重
# 3.需要用到因子IC值的因子合成方法以下统称为IC_Rule, 用一个tuple设定参数，形式如下：
#   ('IC_IR', '12W'), ('IC_Mean', '6M'), ('Max_IR', '12M'), ('HalfLife', '12M', '3M'),
#   除了HalfLife至少需要3个参数外，其余的方式至少需要2个参数，可选第三个参数min_periods;
#   如('IC_IR', '12M', '6M')表示取6-12个月的IC_IR加权; 如某些因子不足6个月，则加权时不使用这些因子，超过12个月则只用12个月IC值
'weight_method'
:
'config'
,
# 大类因子配置表
# 当factor_params加权方式为'config'时，会使用'权重'和'方向'；当加权方式为'equal'时，只会使用'方向'；
# 当factor_params加权方式为IC_Rule时，'权重'和'方向'都不使用（且对应细分因子的方向都一致取反时也不影响结果）
'factor_params'
:
[
{
'名称'
:
'Value'
,
'构成'
:
[
'Q_EP'
,
'BP'
],
'方向'
:
1
,
'权重'
:
0.7
},
{
'名称'
:
'Growth'
,
'构成'
:
[
'Q_YOYPROFIT'
,
'Q_ROE_YOY'
],
'方向'
:
1
,
'权重'
:
0.5
},
{
'名称'
:
'RandomName1'
,
'构成'
:
[
'AVGTURNOVER_1M'
,
'ILLIQ_1M_INVERSE'
,
'CHGCLOSE_1M'
],
'方向'
:
1
,
'权重'
:
0.5
},
],
},
# 合成最终因子的参数
'factor_weight_params'
:
{
# 是否对称正交
'orthogonalize'
:
True
,
# 合成方法和参数说明：同'decriptor_to_factor'的'weight_method'
'weight_method'
:
(
'IC_Mean'
,
'3M'
),
# 'weight_method': 'equal',
},
}
# 组合构建参数
portfolio_construct_conf
=
{
# 是否使用组合优化器构建组合。
# False: 使用'portfolio_weighting_params'参数; True: 使用'portfolio_optimizing_params'参数
'use_optimization'
:
True
,
# 组合构建参数，其中'weighting'默认值为'equal'，其余配置项的默认值为None或False。支持分行业/个股两步配权
# 参数说明参见“文档”中的“API Reference —— DataApi —— portfolio_weighting”
# 组合构建接口的用法参见文档中的“组合构建接口”说明
'portfolio_weighting_params'
:
{
# 股票权重分配，支持'equal'(等权)、'score'(合成因子值)或一个函数(def func(score, dataApi) -> pd.Series)，也可以用另一个因子名称作为权重，如'FFMV'即为自由流通市值加权
'weighting'
:
'FFMV'
,
# 选择前n个股票；如果'sector_first'=True，则在每个行业里选择前n个股票
'top_n'
:
None
,
# 选择前(pct*100)%个股票；如果'sector_first'=True，则在每个行业里选择前(pct*100)%个股票(四舍五入)
'top_pct'
:
0.2
,
# 是否分行业配权重，如为False, 则它以下的参数都不生效
'per_sector_weighting'
:
True
,
# 先设定行业权重, False:先选股票再按行业配权重; True:先定行业权重再分行业选股再配权重
'sector_first'
:
False
,
# 行业权重基准: 基准权重因子名称，或者行业等权'equal_sector'
'bench'
:
'WEIGHT_300'
,
# 行业权重: 一级行业因子名称
'sector'
:
'LEVEL_1_SW'
,
# 需要拆分为二级行业的一级行业名称列表
'split_sectors'
:
[
'非银金融'
],
# 行业权重偏离，支持dict和pd.Series；被拆分的一级行业不能配置，应指定对应二级行业的值
'sector_deviation'
:
{
'建筑材料'
:
-
0.03
,
'家用电器'
:
0.06
},
},
# 组合优化参数: 调用组合优化函数 DataApi.portfolio_optimize, 该函数参数通过一个dict配置
# 参数说明参见文档中的“API Reference —— DataApi —— portfolio_optimize”
# 组合优化接口的用法参见文档中的“组合优化接口”说明
'portfolio_optimizing_params'
:
{
# 基准权重因子名称
'bench'
:
'WEIGHT_300'
,
# 限制组合的行业暴露度，如不限制行业可以设置 sector=None
'sector'
:
'LEVEL_1_CITIC'
,
# 一级行业因子名称
'split_sectors'
:
[
'非银行金融'
],
# 需要拆分为二级行业的一级行业名称列表
'sect_exp_min'
:
-
0.0
,
'sect_exp_max'
:
0.0
,
# 单独设置每个行业的暴露度在'sect_exp_min'和'sect_exp_max'基础上的偏离
'sect_exp_min_deviation'
:
{
'房地产'
:
0.01
,
'传媒'
:
-
0.01
},
'sect_exp_max_deviation'
:
{
'房地产'
:
0.05
},
# 限制组合的风格因子暴露度，可选'default'(市值) 或'barra'(10个Barra风格因子)，或者自定义的风格因子
'style_factors'
:
'barra'
,
'style_exp_min'
:
-
0.0
,
'style_exp_max'
:
0.0
,
# 单独设置每个风格因子的暴露度'style_exp_min'和'style_exp_max'基础上的偏离，市值因子名称为'LNMV'
'style_exp_min_deviation'
:
{
'BARRA_BTOP'
:
0.02
},
'style_exp_max_deviation'
:
{
'BARRA_BTOP'
:
0.08
,
'BARRA_MOMENTUM'
:
0.01
,
'BARRA_GROWTH'
:
0.02
},
# 个股的相对权重和绝对权重限制
'rel_weight_min'
:
None
,
'rel_weight_max'
:
0.02
,
'abs_weight_min'
:
0.0
,
'abs_weight_max'
:
0.1
,
# 组合中基准指数成分股的权重下限
'bench_pct'
:
0.8
,
'turnover_max'
:
2.0
,
# 组合换手率上限(单次调仓)
'trackerr_max'
:
None
,
# 组合跟踪误差上限
# 结果中个股数量和权重的限制（被剔除股票的权重将按比例分配给组合中留下来的股票）
'result_stock_count'
:
None
,
'result_weight_min'
:
0.001
,
'result_weight_sum'
:
0.9999
,
# 如果用到Barra因子但当日没有值，是否取前值填充
'fill_barra'
:
False
,
# 设为False可以节省一点运行时间，设为True会检查组合优化的结果，如有问题将用Warning提示
'verify_result'
:
True
,
},
}
# 运行回测
report
=
run_backtest_by_alpha_model
(
strategy_conf
,
alpha_model_conf
,
portfolio_construct_conf
)
{{progress_text}}
累积净值
超额收益
相对净值
周度收益
月度收益
平均收益
年化换手
Nav
Excess
Relative Nav
Weekly Return
Monthly Return
Average Excess Return
Annualized Turnover
{{log}}
descriptor_params参数逻辑上是一个表格，可选列名或参数名如下（配置时用列名或参数名均可，不配置则采用默认值）：
列名
参数名
默认值
名称
fac_name
(无)
处理后名称
ref_name
(沿用fac_name)
方向
direction
1
权重
weight
1
前值填充
fill
False
取对数
log
False
去极值
outlier
True
填补缺失值
sector_fill
“median”
剔除
exclude
True
行业中性化
sector_neu
True
市值中性化
size_neu
True
zscore
zscore
True
缺失值的填补方式：
fill: 如为True，则检查每个股票较早日期的因子值，如有值用前值填充；
sector_fill: （用前值填充后）分行业用本参数的值填充（“median”=行业中位数；“mean”=行业均值；“min”/“max”=最小值/最大值；数值=用数值填充；False=不填充）。
“剔除”参数：默认为True=剔除ST、新股、停牌股票。
回测完成后，可以通过report.user_context变量来查看参数配置的结果：
[3]:
# 回测结束后可以取report里保存的信息
report
[3]:
BackTest.Report(keys=['annual_perf', 'cash', 'holdings', 'portfolio', 'rtn_average', 'rtn_month', 'rtn_week', 'trades', 'turnover_annualized', 'user_context'])
[4]:
# 在user_context里可以取策略运行过程中记录的一些信息
report
.
user_context
[4]:
BackTest.UserContext(keys=['alpha_factor_list', 'base_factor_list', 'descriptor_table', 'descriptor_to_factor_table', 'descriptor_to_factor_weight_method', 'do_descriptor_to_factor', 'factor_values', 'factor_weight', 'factor_weight_im', 'ic', 'ic_period', 'keep_uplimit', 'reb_days', 'rebalance_days', 'result_factor', 'result_factor_weight_method', 'target_weight', 'universe'])
[5]:
# 细分因子配置表
report
.
user_context
.
descriptor_table
[5]:
direction
exclude
fac_name
fill
log
neutral
outlier
sector_fill
sector_neu
size_neu
weight
zscore
Q_EP
1
True
Q_EP
False
False
True
True
median
1
1
1
True
Q_SP
1
True
Q_SP
False
False
True
True
median
1
1
0.6
True
BP
1
True
BP
False
False
True
True
median
1
1
0.8
True
Q_YOYOP
1
True
Q_YOYOP
False
False
True
True
median
1
1
0.5
True
Q_YOYSALES
1
True
Q_YOYSALES
False
False
True
True
median
1
1
0.3
True
Q_YOYPROFIT
1
True
Q_YOYPROFIT
False
False
True
True
median
1
1
1
True
Q_ROE_YOY
1
True
Q_ROE_YOY
False
False
True
True
median
1
1
1
True
AVGTURNOVER_1M
-1
True
AVGTURNOVER_1M
False
False
True
True
median
1
1
1.2
True
ILLIQ_1M_INVERSE
-1
True
ILLIQ_1M_INVERSE
False
False
True
True
median
1
1
1.2
True
CHGCLOSE_1M
-1
True
CHGCLOSE_1M
False
False
True
True
median
1
1
1
True
LN_DQ_MV
1
True
LN_DQ_MV
False
False
True
True
median
1
0
1
True
[6]:
# 大类因子配置表
report
.
user_context
.
descriptor_to_factor_table
[6]:
方向
权重
构成
名称
Value
1
0.7
[Q_EP, BP]
Growth
1
0.5
[Q_YOYPROFIT, Q_ROE_YOY]
RandomName1
1
0.5
[AVGTURNOVER_1M, ILLIQ_1M_INVERSE, CHGCLOSE_1M]
[7]:
# 增加跟踪误差限制 = 2%
portfolio_construct_conf
[
'portfolio_optimizing_params'
][
'trackerr_max'
]
=
0.02
# 运行回测
report
=
run_backtest_by_alpha_model
(
strategy_conf
,
alpha_model_conf
,
portfolio_construct_conf
)
{{progress_text}}
累积净值
超额收益
相对净值
周度收益
月度收益
平均收益
年化换手
Nav
Excess
Relative Nav
Weekly Return
Monthly Return
Average Excess Return
Annualized Turnover
{{log}}
[8]:
# 大类因子权重
report
.
user_context
.
factor_weight
[8]:
factor
Value
Growth
RandomName1
2017-12-29
0.530674
0.345534
0.123792
2018-01-31
0.573115
0.222820
-0.204065
2018-02-28
0.397877
0.448030
-0.154093
2018-03-30
0.257174
0.392233
0.350593
2018-04-27
0.044252
0.246201
0.709547
2018-05-31
0.056349
0.301741
0.641910
2018-06-29
0.384578
0.462525
0.152897
2018-07-31
0.409660
0.445438
0.144902
2018-08-31
0.708882
0.150711
-0.140407
2018-09-28
0.668439
0.133915
0.197647
2018-10-31
0.531317
-0.113302
0.355381
2018-11-30
0.453052
0.006537
0.540411
2018-12-28
0.432172
-0.033458
0.534369
2019-01-31
0.557340
0.043729
0.398931
2019-02-28
0.463624
-0.140846
0.395530
2019-03-29
-0.522860
0.085717
-0.391423
[9]:
# 细分因子权重
report
.
user_context
.
factor_weight_im
.
keys
()
[9]:
dict_keys(['Value', 'Growth', 'RandomName1'])
[10]:
# 组合每日净值
report
.
portfolio
.
head
()
[10]:
value
rtn
nav
bench_rtn
turnover
date
2017-12-29
1.000000e+08
0.000000
1.000000
0.000000
0.9999
2018-01-02
1.014564e+08
0.014564
1.014564
0.014028
0.0000
2018-01-03
1.024027e+08
0.009327
1.024027
0.005870
0.0000
2018-01-04
1.026606e+08
0.002518
1.026606
0.004237
0.0000
2018-01-05
1.030815e+08
0.004100
1.030815
0.002407
0.0000
[11]:
# 组合每日持仓（含非调仓日；如只需调仓日的持仓，可用report.user_context.rebalance_days来筛选调仓日期）
report
.
holdings
.
head
()
[11]:
date
code
shares
price
weight
0
2017-12-29
000001.SZ
82049.530553
13.30
0.010913
1
2017-12-29
000157.SZ
155633.420904
4.47
0.006957
2
2017-12-29
000333.SZ
16689.896956
55.43
0.009251
3
2017-12-29
000338.SZ
282836.763249
8.34
0.023589
4
2017-12-29
000538.SZ
19735.147615
101.79
0.020088
[12]:
report
.
user_context
.
result_factor
.
tail
()
[12]:
date
wind_code
value
4644
2019-03-29
603799.SH
0.025009
4645
2019-03-29
603833.SH
-0.032754
4646
2019-03-29
603858.SH
-0.064188
4647
2019-03-29
603986.SH
0.057052
4648
2019-03-29
603993.SH
-0.011239
[13]:
# 修改合成大类因子的方式为12个星期的IC_IR, 再次运行回测
alpha_model_conf
[
'factor_weight_params'
][
'weight_method'
]
=
(
'IC_IR'
,
'12W'
)
report2
=
run_backtest_by_alpha_model
(
strategy_conf
,
alpha_model_conf
,
portfolio_construct_conf
)
{{progress_text}}
累积净值
超额收益
相对净值
周度收益
月度收益
平均收益
年化换手
Nav
Excess
Relative Nav
Weekly Return
Monthly Return
Average Excess Return
Annualized Turnover
{{log}}
[14]:
report2
[14]:
BackTest.Report(keys=['annual_perf', 'cash', 'holdings', 'portfolio', 'rtn_average', 'rtn_month', 'rtn_week', 'trades', 'turnover_annualized', 'user_context'])
Next
Previous
© Copyright 2018-2022, GF Funds 量化投资部
Built with
Sphinx
using a
theme
provided by
Read the Docs
.