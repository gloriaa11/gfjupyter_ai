
因子标准化处理
View page source
因子标准化处理
¶
取因子值的函数
DataApi.get_factor_series(expect_rtn_series, day, ..)
可选进行标准化处理，因子的标准化处理过程说明如下。
[1]:
import
gfquant
import
pandas
as
pd
print
(
gfquant
.
__version__
)
1.1.0
[2]:
api
=
gfquant
.
DataApi
()
day
=
'20190628'
标准化处理过程
¶
因子标准化处理过程如下，所有处理步骤都可以通过参数来决定执行还是跳过。
计算
全市场范围
、
需剔除股票
(
exclude
参数)和
选股空间
(
universe
参数)
在
全市场范围
内去极值（
outlier
参数，中位数去极值法；如有
log
取对数操作，在去极值之前先做完）
在
全市场范围
内按行业填补缺失值（
setor_fill
参数）
取
选股空间
的因子值，并剔除
需剔除股票
，得到
选出的因子值
（如
exclude=None,
universe=None
则跳过此步骤）
对
选出的因子值
做行业、市值中性化（
sector_neu
和
size_neu
参数，回归取
残差
）
对
因子值
(
残差
)再做z_score变换得到
标准化因子暴露
（
zscore
参数）
因子的默认标准化处理参数(
neutral=True
)相当于以下参数组合：
不取自然对数（
log=False
）
去极值（
outlier=True
）
分行业用行业中位数填补缺失值（
sector_fill="median"
或
True
）
做行业中性化(使用中信一级行业)和市值中性化(使用总市值)（
sector_neu="LEVEL_1_CITIC"
或
True
,
size_neu="MV"
或
True
）
做Z-Score变换（
zscore=True
）
[3]:
# 第一列和最后一列的值完全相同
pd
.
concat
([
# 因子原始值
api
.
get_factor_series
(
'Q_EP'
,
day
,
neutral
=
False
),
# 默认标准化处理
api
.
get_factor_series
(
'Q_EP'
,
day
,
neutral
=
True
),
# 只做zscore
api
.
get_factor_series
(
'Q_EP'
,
day
,
neutral
=
{
'zscore'
:
True
}),
# 只去极值和做zscore
api
.
get_factor_series
(
'Q_EP'
,
day
,
neutral
=
{
'outlier'
:
True
,
'zscore'
:
True
}),
# 不做市值中性化，其他同默认处理
api
.
get_factor_series
(
'Q_EP'
,
day
,
neutral
=
{
'outlier'
:
True
,
'sector_fill'
:
True
,
'sector_neu'
:
True
,
'size_neu'
:
False
,
'zscore'
:
True
}),
# 做因子标准化，但跳过所有处理步骤
api
.
get_factor_series
(
'Q_EP'
,
day
,
neutral
=
{}),
],
axis
=
1
,
sort
=
True
,
keys
=
list
(
'ABCDEF'
))
.
head
(
9
)
[3]:
A
B
C
D
E
F
000001.SZ
0.031470
-0.055729
1.475176
2.185786
0.240685
0.031470
000002.SZ
0.003565
-2.153072
-0.197305
-0.371199
-0.745288
0.003565
000004.SZ
0.003002
-0.182173
-0.231050
-0.431572
-0.650598
0.003002
000005.SZ
-0.005516
-1.538556
-0.741621
-1.345034
-1.721089
-0.005516
000006.SZ
0.015071
0.643524
0.492280
0.862536
0.596995
0.015071
000007.SZ
0.003756
-0.337574
-0.185861
-0.350725
-0.723012
0.003756
000008.SZ
0.001120
-0.815509
-0.343876
-0.633429
-0.431776
0.001120
000009.SZ
0.005385
-0.022397
-0.088245
-0.176079
0.338278
0.005385
000010.SZ
0.001062
-0.646860
-0.347355
-0.639653
-0.876256
0.001062
自定义标准化处理规则
¶
在某些需要同时设置多个因子处理规则的地方，可以通过一个列表设定不同因子的标准化规则，例如：
Alpha模型回测框架
的
descriptor_params
参数
组合优化接口
的
style_factors
参数
自定义标准化处理规则定义形式就是一个列表，每个列表元素对应一个因子的处理规则(dict)
[4]:
style_factors
=
[
# 使用原始值
{
'name'
:
'BARRA_BTOP'
,
'neutral'
:
False
},
# 只取自然对数
{
'name'
:
'MV'
,
'neutral'
:
False
,
'log'
:
True
},
# 默认标准化参数
{
'name'
:
'EP_TTM'
,
'neutral'
:
True
},
# 参考默认标准化，但不做市值中性
{
'name'
:
'FFMV'
,
'neutral'
:
True
,
'size_neu'
:
False
},
# 如果当天没有因子数据，取更早日期的数据填充；参考默认标准化，但不去极值、缺失值用0填充
{
'name'
:
'SHSC_HOLD_AMOUNT'
,
'fill'
:
True
,
'neutral'
:
True
,
'outlier'
:
False
,
'sector_fill'
:
0
},
]
[5]:
# 查看转换后的因子处理参数表
api
.
factor_params
(
style_factors
)
[5]:
fac_name
fill
log
neutral
outlier
sector_fill
sector_neu
size_neu
zscore
BARRA_BTOP
BARRA_BTOP
False
False
False
False
False
False
False
False
MV
MV
False
True
False
False
False
False
False
False
EP_TTM
EP_TTM
False
False
True
True
median
True
True
True
FFMV
FFMV
False
False
True
True
median
True
False
True
SHSC_HOLD_AMOUNT
SHSC_HOLD_AMOUNT
True
False
True
False
0
True
True
True
配置自定义标准化处理规则时，也可以用下表的对应中文来替换..
参数
中文
name
名称
direction
方向
weight
权重
log
取对数
outlier
去极值
sector_fill
填补缺失值
sector_neu
行业中性化
size_neu
市值中性化
注意事项
¶
因子库里大部分Alpha因子都是原始值，使用
默认标准化处理规则
对大部分因子都适用，但在某些情况下对特定因子可能不太合适。
举例来说，对于Barra十个因子已经是标准化后的值，就不需要做任何标准化处理；对于市值相关的因子，如
LN_VAL_MV
，标准化时可能不需要做市值中性化。
另一个例子：对陆股通持仓金额
SHSC_HOLD_AMOUNT
因子，因为缺失值较多，且持仓金额数值差距很大，如果用默认处理规则，结果标准化后因子值的顺序完全改变了，参见下面的代码。
[6]:
# 因子原始值的最大值
api
.
get_factor_series
(
'SHSC_HOLD_AMOUNT'
,
day
)
.
sort_values
(
ascending
=
False
)
.
head
()
.
to_frame
()
[6]:
2019-06-28 00:00:00
600519.SH
1.044010e+11
601318.SH
7.150677e+10
000333.SZ
5.022906e+10
600276.SH
3.540057e+10
000651.SZ
3.465021e+10
[7]:
# 因子默认标准化后的最大值，股票代码完全对不上
api
.
get_factor_series
(
'SHSC_HOLD_AMOUNT'
,
day
,
neutral
=
True
)
.
sort_values
(
ascending
=
False
)
.
head
()
.
to_frame
()
[7]:
2019-06-28 00:00:00
600599.SH
3.572518
300023.SZ
3.514320
002313.SZ
3.402561
002126.SZ
3.380553
000416.SZ
3.371530
[8]:
# 不做去极值操作，保留其他标准化步骤，查看处理后的最大值和原始值的股票代码对得上。可见是去极值导致了这个问题。
api
.
get_factor_series
(
'SHSC_HOLD_AMOUNT'
,
day
,
neutral
=
dict
(
outlier
=
False
,
sector_fill
=
True
,
size_neu
=
True
,
sector_neu
=
True
,
zscore
=
True
))
.
sort_values
(
ascending
=
False
)
.
head
()
.
to_frame
()
[8]:
2019-06-28 00:00:00
600519.SH
37.971863
601318.SH
25.800830
000333.SZ
17.426555
600276.SH
12.303713
000651.SZ
11.405743
Next
Previous
© Copyright 2018-2022, GF Funds 量化投资部
Built with
Sphinx
using a
theme
provided by
Read the Docs
.