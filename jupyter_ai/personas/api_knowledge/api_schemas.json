[
  {
    "name": "rolling_apply",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "window": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "func": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "min_periods": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "freq": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "center": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "args": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "x",
        "window",
        "func"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rolling_mean",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "window": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "min_periods": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "center": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "x",
        "window"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rolling_std",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "window": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "min_periods": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "center": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "ddof": {
          "type": "any",
          "default": "1",
          "description": " "
        }
      },
      "required": [
        "x",
        "window"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "MaxLossExceededError",
    "type": "class",
    "description": "Common base class for all non-exit exceptions.",
    "methods": [],
    "properties": []
  },
  {
    "name": "non_unique_bin_edges_error",
    "type": "function",
    "description": "捕获 pd.qcut 的异常, 添加提示信息并报错",
    "parameters": {
      "type": "object",
      "properties": {
        "func": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "func"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rethrow",
    "type": "function",
    "description": "重新抛出当前作用域中的最后一个异常, 保留堆栈信息, 并且在报错信息中添加其他内容",
    "parameters": {
      "type": "object",
      "properties": {
        "exception": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "additional_message": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "exception",
        "additional_message"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "wraps",
    "type": "function",
    "description": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
    "parameters": {
      "type": "object",
      "properties": {
        "wrapped": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "assigned": {
          "type": "any",
          "default": "('__module__', '__name__', '__qualname__', '__doc__', '__annotations__', '__type_params__')",
          "description": " "
        },
        "updated": {
          "type": "any",
          "default": "('__dict__',)",
          "description": " "
        }
      },
      "required": [
        "wrapped"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "PlotConfig",
    "type": "class",
    "description": "No description available.",
    "methods": [],
    "properties": []
  },
  {
    "name": "axes_style",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "style": {
          "type": "any",
          "default": "darkgrid",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "customize",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "func": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "func"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_chinese_font",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotting_context",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "context": {
          "type": "any",
          "default": "notebook",
          "description": " "
        },
        "font_scale": {
          "type": "any",
          "default": "1.5",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "print_table",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "table": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "name": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "fmt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "table"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "wraps",
    "type": "function",
    "description": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
    "parameters": {
      "type": "object",
      "properties": {
        "wrapped": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "assigned": {
          "type": "any",
          "default": "('__module__', '__name__', '__qualname__', '__doc__', '__annotations__', '__type_params__')",
          "description": " "
        },
        "updated": {
          "type": "any",
          "default": "('__dict__',)",
          "description": " "
        }
      },
      "required": [
        "wrapped"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Iterable",
    "type": "class",
    "description": "No description available.",
    "methods": [],
    "properties": []
  },
  {
    "name": "convert_to_forward_returns_columns",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "period": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "period"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "ensure_tuple",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_forward_returns_columns",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "columns"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "ignore_warning",
    "type": "function",
    "description": "过滤 warnings",
    "parameters": {
      "type": "object",
      "properties": {
        "message": {
          "type": "any",
          "default": "",
          "description": " "
        },
        "category": {
          "type": "any",
          "default": "<class 'Warning'>",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "",
          "description": " "
        },
        "lineno": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "append": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "wraps",
    "type": "function",
    "description": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
    "parameters": {
      "type": "object",
      "properties": {
        "wrapped": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "assigned": {
          "type": "any",
          "default": "('__module__', '__name__', '__qualname__', '__doc__', '__annotations__', '__type_params__')",
          "description": " "
        },
        "updated": {
          "type": "any",
          "default": "('__dict__',)",
          "description": " "
        }
      },
      "required": [
        "wrapped"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "date",
    "type": "class",
    "description": "date(year, month, day) --> date object",
    "methods": [],
    "properties": []
  },
  {
    "name": "datetime",
    "type": "class",
    "description": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\nThe year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints.",
    "methods": [],
    "properties": []
  },
  {
    "name": "time",
    "type": "class",
    "description": "time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object\n\nAll arguments are optional. tzinfo may be None, or an instance of\na tzinfo subclass. The remaining arguments may be ints.",
    "methods": [],
    "properties": []
  },
  {
    "name": "timedelta",
    "type": "class",
    "description": "Difference between two datetime values.\n\ntimedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)\n\nAll arguments are optional and default to 0.\nArguments may be integers or floats, and may be positive or negative.",
    "methods": [],
    "properties": []
  },
  {
    "name": "date2str",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "date": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "format": {
          "type": "any",
          "default": "%Y-%m-%d",
          "description": " "
        }
      },
      "required": [
        "date"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "MyDbPool",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "callQueryProc",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "procname": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "params_in": {
              "type": "any",
              "default": "[]",
              "description": " "
            }
          },
          "required": [
            "procname"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_160db",
        "type": "function",
        "description": "静态方法，从连接池中取出连接\nreturn oracle.connection",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_161db",
        "type": "function",
        "description": "静态方法，从连接池中取出连接\nreturn oracle.connection",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_DMPDB",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_conn",
        "type": "function",
        "description": "静态方法，从连接池中取出连接\nreturn oracle.connection",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "insert_161db",
        "type": "function",
        "description": "静态方法，从连接池中取出连接\nreturn oracle.connection",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "sqlDDL",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sql": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "n": {
              "type": "any",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "sql"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "sqlDML",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sql": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "sql"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "sqlManyDML",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sql": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "data": {
              "type": "any",
              "default": "[]",
              "description": " "
            }
          },
          "required": [
            "sql"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "get_connTT",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactor",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorList",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getedbvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "edbcode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "edbcode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorlist",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gethqfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getperiodfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gettradeday",
    "type": "function",
    "description": "# 查询交易日，可以是特殊类型的交易日\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:dtype: 特殊交易日（见字名义，不做特别解释）:'d','month_end','month_start','week_end'\n        ,'week_start','quarter_start','quarter_end'\n:return 日期组成的list",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dtype": {
          "type": "any",
          "default": "d",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "monendtradeday",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe，参数中必须包括:'adjdate','weight','stock',即（调仓日期、权重、股票代码），非空\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfoliobacktest",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空\nadd kwargs = [bt_type,rolling_d]  by guosj at 20200318",
    "parameters": {
      "type": "object",
      "properties": {
        "weight_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "benchno": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "buy_rate": {
          "type": "any",
          "default": "0.001",
          "description": " "
        },
        "sell_rate": {
          "type": "any",
          "default": "0.002",
          "description": " "
        },
        "daily_cost": {
          "type": "any",
          "default": "0.0",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "weight_df",
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfolioperformance",
    "type": "function",
    "description": ":rtn_df,组合收益dataFrame,index为时间序列，columns中至少包含['rtn'],['bench_rtn','turnover','stcoknum']为可选\n:t_year,年化天数，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "year_days": {
          "type": "any",
          "default": "250",
          "description": " "
        }
      },
      "required": [
        "rtn_df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "querysql",
    "type": "function",
    "description": "获取基金年报、半年报持股权重数据",
    "parameters": {
      "type": "object",
      "properties": {
        "sql": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "conn": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sql",
        "conn",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Attribution",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "brinson_multi",
        "type": "function",
        "description": "Brinson归因：多期模型",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight_df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "end_day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_SW",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "()",
              "description": " "
            },
            "full_pos": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "distri": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "weight_df",
            "end_day",
            "bench"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "brinson_single",
        "type": "function",
        "description": "Brinson归因：单期模型",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "Series",
              "default": null,
              "description": " "
            },
            "tday0": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "tday1": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_SW",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "()",
              "description": " "
            },
            "full_pos": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "portfolio_weight",
            "tday0",
            "tday1",
            "bench"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Any",
    "type": "class",
    "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BytesIO",
    "type": "class",
    "description": "Buffered I/O implementation using an in-memory bytes buffer.",
    "methods": [],
    "properties": []
  },
  {
    "name": "Client",
    "type": "class",
    "description": "Cache server's client protocol ",
    "methods": [
      {
        "name": "add_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "hit": {
              "type": "int",
              "default": null,
              "description": " "
            },
            "req_time": {
              "type": "float",
              "default": null,
              "description": " "
            },
            "tot_time": {
              "type": "float",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name",
            "hit",
            "req_time",
            "tot_time"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "api_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "call",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "data": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "data"
          ]
        },
        "return": {
          "type": "typing.Any",
          "description": " "
        }
      },
      {
        "name": "df_to_series",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cached",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "param": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "param"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_ex",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "obj": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "out": {
              "type": "str",
              "default": "df",
              "description": " "
            }
          },
          "required": [
            "obj",
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "mod_codes",
        "type": "function",
        "description": "处理改股票代码的情况，只有get series by one date时才处理，如检测到新股票代码则添加旧代码 ",
        "parameters": {
          "type": "object",
          "properties": {
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "codes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "ModCode",
    "type": "class",
    "description": "ModCode(old, new, date)",
    "methods": [],
    "properties": []
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "parse_codes",
    "type": "function",
    "description": "返回List[str]",
    "parameters": {
      "type": "object",
      "properties": {
        "codes": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "codes"
      ]
    },
    "return": {
      "type": "typing.Optional[typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "parse_dates",
    "type": "function",
    "description": "返回字符串‘20190101-20190202’表示日期范围，返回List[str]表示日期列表 ",
    "parameters": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "verify": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "max_allowed_dt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "dates"
      ]
    },
    "return": {
      "type": "typing.Union[NoneType, str, typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "Any",
    "type": "class",
    "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BytesIO",
    "type": "class",
    "description": "Buffered I/O implementation using an in-memory bytes buffer.",
    "methods": [],
    "properties": []
  },
  {
    "name": "Client",
    "type": "class",
    "description": "Cache server's client protocol ",
    "methods": [
      {
        "name": "add_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "hit": {
              "type": "int",
              "default": null,
              "description": " "
            },
            "req_time": {
              "type": "float",
              "default": null,
              "description": " "
            },
            "tot_time": {
              "type": "float",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name",
            "hit",
            "req_time",
            "tot_time"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "api_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "call",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "data": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "data"
          ]
        },
        "return": {
          "type": "typing.Any",
          "description": " "
        }
      },
      {
        "name": "df_to_series",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cached",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "param": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "param"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_ex",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "obj": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "out": {
              "type": "str",
              "default": "df",
              "description": " "
            }
          },
          "required": [
            "obj",
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "mod_codes",
        "type": "function",
        "description": "处理改股票代码的情况，只有get series by one date时才处理，如检测到新股票代码则添加旧代码 ",
        "parameters": {
          "type": "object",
          "properties": {
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "codes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "ModCode",
    "type": "class",
    "description": "ModCode(old, new, date)",
    "methods": [],
    "properties": []
  },
  {
    "name": "get_factor",
    "type": "function",
    "description": "factorname = 'CLOSE'\ndates = '20231201-20231231'",
    "parameters": {
      "type": "object",
      "properties": {
        "factorname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorname",
        "dates"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "parse_codes",
    "type": "function",
    "description": "返回List[str]",
    "parameters": {
      "type": "object",
      "properties": {
        "codes": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "codes"
      ]
    },
    "return": {
      "type": "typing.Optional[typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "parse_dates",
    "type": "function",
    "description": "返回字符串‘20190101-20190202’表示日期范围，返回List[str]表示日期列表 ",
    "parameters": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "verify": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "max_allowed_dt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "dates"
      ]
    },
    "return": {
      "type": "typing.Union[NoneType, str, typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "LocalData",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "get_factor",
        "type": "function",
        "description": "必须返回copy() ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "Union",
              "default": "None",
              "description": " "
            },
            "codes": {
              "type": "List",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "int",
              "default": "0",
              "description": " "
            },
            "func_trade_days": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "factor_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "register",
        "type": "function",
        "description": "注册本地因子数据; set `factor_name = None` to list all; set `df_factor = None` to de-register ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "str",
              "default": "None",
              "description": " "
            },
            "df_factor": {
              "type": "DataFrame",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "FactorProcessParams",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_params",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_params": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_params"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_param",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_alias",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_alias": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_alias"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_defaults",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_defaults": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_defaults"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "df_table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "BackTestMagic",
    "type": "class",
    "description": "Base class for implementing magic functions.\n\nShell functions which can be reached as %function_name. All magic\nfunctions should accept a string, which they can parse for their own\nneeds. This can make some functions easier to type, eg `%cd ../`\nvs. `%cd(\"../\")`\n\nClasses providing magic functions need to subclass this class, and they\nMUST:\n\n- Use the method decorators `@line_magic` and `@cell_magic` to decorate\n  individual methods as magic functions, AND\n\n- Use the class decorator `@magics_class` to ensure that the magic\n  methods are properly registered at the instance level upon instance\n  initialization.\n\nSee :mod:`magic_functions` for examples of actual implementation classes.",
    "methods": [
      {
        "name": "arg_err",
        "type": "function",
        "description": "Print docstring if incorrect arguments were passed",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt",
        "type": "function",
        "description": "::\n\n  %bt [--out OUT]\n\n运行回测策略，详见文档“通用策略回测框架”中的说明\n\noptions:\n  --out OUT, -o OUT  指定回测报告结果的变量名，默认为\"report\"",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt_load",
        "type": "function",
        "description": "::\n\n  %bt_load [--strategy STRATEGY] [--code CODE] [--history HISTORY] [--keyword KEYWORD] [--user [USER]]\n\n从数据库加载已保存的策略代码到本单元格，也可以搜索策略代码。\n\n基本用法示例：\n    %bt_load           不带任何参数，列出可加载的策略列表\n    %bt_load -s 123    指定加载id为123的策略的最新代码\n\n扩展用法示例：\n    %bt_load -u        列出自己创建的策略列表\n    %bt_load -u lixy   列出用户lixy创建的策略列表\n    %bt_load -k 估值   列出策略名称或描述里包含\"估值\"的策略\n\n    %bt_load -h 123    列出id为123的策略的所有版本的历史代码\n    %bt_load -c 666    指定加载代码id为666的历史代码\n\noptions:\n  --strategy STRATEGY, -s STRATEGY\n                        根据策略id取策略的最新代码\n  --code CODE, -c CODE  根据代码id取代码\n  --history HISTORY, -h HISTORY\n                        取策略id的历史代码列表\n  --keyword KEYWORD, -k KEYWORD\n                        搜索策略名称或描述\n  --user <[USER]>, -u <[USER]>\n                        只列出某个用户的策略(不指定用户名则只列出自己的策略)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt_save",
        "type": "function",
        "description": "::\n\n  %bt_save [--name NAME] [--desc DESC] [--public PUBLIC] [--strategy STRATEGY] [--delete DELETE]\n\n将本单元格的策略代码保存到数据库中，根据参数不同可以是创建新策略或更新已存在的策略。\n\n基本用法示例(两个%号的命令为操作整个单元格的内容，只保存策略不运行，请到投研平台图形界面手动重新运行策略)：\n    %%bt_save -n 沪深300A          将本单元格的策略代码保存到一个新建策略，并将策略命名为\"沪深300A\"\n    %%bt_save -s 123               用本单元格的策略代码更新一个已存在的id为123的策略\n\n扩展用法示例(一个%号的命令是只操作一行的命令，修改策略属性也可以在投研平台用图形界面操作)：\n    %bt_save -s 123 -n 沪深300B    更新一个已存在的id为123的策略，将名称改为\"沪深300B\"\n    %bt_save -s 123 -d 策略描述B   更新一个已存在的id为123的策略，将描述改为\"策略描述B\"\n    %bt_save -s 123 -p Y           更新一个已存在的id为123的策略，将策略设为公开的(其他用户也可以访问但不能修改)\n\n    %bt_save --delete 123          删除id为123的策略\n\noptions:\n  --name NAME, -n NAME  策略名称(≤50字符)\n  --desc DESC, -d DESC  策略描述(≤1000字符)\n  --public PUBLIC, -p PUBLIC\n                        是否公开，一个字符: Y=公开，N=不公开(默认值)\n  --strategy STRATEGY, -s STRATEGY\n                        已存在的策略id(更新策略)\n  --delete DELETE       根据策略id删除策略",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "class_config_rst_doc",
        "type": "function",
        "description": "Generate rST documentation for this class' config options.\n\nExcludes traits defined on parent classes.",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "str",
          "description": " "
        }
      },
      {
        "name": "default_option",
        "type": "function",
        "description": "Make an entry in the options_table for fn, with value optstr",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fn": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "optstr": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fn",
            "optstr"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_latex",
        "type": "function",
        "description": "Format a string for latex inclusion.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strng": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strng"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_traceback",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "bt_lines": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "bt_lines"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "hold_trait_notifications",
        "type": "function",
        "description": "Context manager for bundling trait change notifications and cross\nvalidation.\n\nUse this when doing multiple trait assignments (init, config), to avoid\nrace conditions in trait notifiers requesting other trait values.\nAll trait notifications will fire after all values have been assigned.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "t.Any",
          "description": " "
        }
      },
      {
        "name": "parse_options",
        "type": "function",
        "description": "Parse options passed to an argument string.\n\nThe interface is similar to that of :func:`getopt.getopt`, but it\nreturns a :class:`~IPython.utils.struct.Struct` with the options as keys\nand the stripped argument string still as a string.\n\narg_str is quoted as a true sys.argv vector by using shlex.split.\nThis allows us to easily expand variables, glob files, quote\narguments, etc.\n\nParameters\n----------\narg_str : str\n    The arguments to parse.\nopt_str : str\n    The options specification.\nmode : str, default 'string'\n    If given as 'list', the argument string is returned as a list (split\n    on whitespace) instead of a string.\nlist_all : bool, default False\n    Put all option values in lists. Normally only options\n    appearing more than once are put in a list.\nposix : bool, default True\n    Whether to split the input line in POSIX mode or not, as per the\n    conventions outlined in the :mod:`shlex` module from the standard\n    library.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "arg_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "opt_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "long_opts": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "arg_str",
            "opt_str",
            "long_opts",
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "section_names",
        "type": "function",
        "description": "return section names as a list",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "list[str]",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "cross_validation_lock",
        "type": "property",
        "description": "A contextmanager for running a block with our cross validation lock set\nto True.\n\nAt the end of the block, the lock's value is restored to its value\nprior to entering the block."
      }
    ]
  },
  {
    "name": "Magics",
    "type": "class",
    "description": "Base class for implementing magic functions.\n\nShell functions which can be reached as %function_name. All magic\nfunctions should accept a string, which they can parse for their own\nneeds. This can make some functions easier to type, eg `%cd ../`\nvs. `%cd(\"../\")`\n\nClasses providing magic functions need to subclass this class, and they\nMUST:\n\n- Use the method decorators `@line_magic` and `@cell_magic` to decorate\n  individual methods as magic functions, AND\n\n- Use the class decorator `@magics_class` to ensure that the magic\n  methods are properly registered at the instance level upon instance\n  initialization.\n\nSee :mod:`magic_functions` for examples of actual implementation classes.",
    "methods": [
      {
        "name": "arg_err",
        "type": "function",
        "description": "Print docstring if incorrect arguments were passed",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "class_config_rst_doc",
        "type": "function",
        "description": "Generate rST documentation for this class' config options.\n\nExcludes traits defined on parent classes.",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "str",
          "description": " "
        }
      },
      {
        "name": "default_option",
        "type": "function",
        "description": "Make an entry in the options_table for fn, with value optstr",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fn": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "optstr": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fn",
            "optstr"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_latex",
        "type": "function",
        "description": "Format a string for latex inclusion.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strng": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strng"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "hold_trait_notifications",
        "type": "function",
        "description": "Context manager for bundling trait change notifications and cross\nvalidation.\n\nUse this when doing multiple trait assignments (init, config), to avoid\nrace conditions in trait notifiers requesting other trait values.\nAll trait notifications will fire after all values have been assigned.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "t.Any",
          "description": " "
        }
      },
      {
        "name": "parse_options",
        "type": "function",
        "description": "Parse options passed to an argument string.\n\nThe interface is similar to that of :func:`getopt.getopt`, but it\nreturns a :class:`~IPython.utils.struct.Struct` with the options as keys\nand the stripped argument string still as a string.\n\narg_str is quoted as a true sys.argv vector by using shlex.split.\nThis allows us to easily expand variables, glob files, quote\narguments, etc.\n\nParameters\n----------\narg_str : str\n    The arguments to parse.\nopt_str : str\n    The options specification.\nmode : str, default 'string'\n    If given as 'list', the argument string is returned as a list (split\n    on whitespace) instead of a string.\nlist_all : bool, default False\n    Put all option values in lists. Normally only options\n    appearing more than once are put in a list.\nposix : bool, default True\n    Whether to split the input line in POSIX mode or not, as per the\n    conventions outlined in the :mod:`shlex` module from the standard\n    library.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "arg_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "opt_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "long_opts": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "arg_str",
            "opt_str",
            "long_opts",
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "section_names",
        "type": "function",
        "description": "return section names as a list",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "list[str]",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "cross_validation_lock",
        "type": "property",
        "description": "A contextmanager for running a block with our cross validation lock set\nto True.\n\nAt the end of the block, the lock's value is restored to its value\nprior to entering the block."
      }
    ]
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as cell magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a cell magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a cell magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a cell magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipython",
    "type": "function",
    "description": "Get the global InteractiveShell instance.\n\nReturns None if no InteractiveShell instance is registered.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as line_cell magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a line_cell magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a line_cell magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a line_cell magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as line magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a line magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a line magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a line magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "load_ipython_extension",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "ipython": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "ipython"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magics_class",
    "type": "function",
    "description": "Class decorator for all subclasses of the main Magics class.\n\nAny class that subclasses Magics *must* also apply this decorator, to\nensure that all the methods that have been decorated as line/cell magics\nget correctly registered in the class instance.  This is necessary because\nwhen method decorators run, the class does not exist yet, so they\ntemporarily store their information into a module global.  Application of\nthis class decorator copies that global data to the class instance and\nclears the global.\n\nObviously, this mechanism is not thread-safe, which means that the\n*creation* of subclasses of Magic should only be done in a single-thread\ncontext.  Instantiation of the classes has no restrictions.  Given that\nthese classes are typically created at IPython startup time and before user\napplication code becomes active, in practice this should not pose any\nproblems.",
    "parameters": {
      "type": "object",
      "properties": {
        "cls": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "cls"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "needs_local_scope",
    "type": "function",
    "description": "Decorator to mark magic functions which need to local scope to run.",
    "parameters": {
      "type": "object",
      "properties": {
        "func": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "func"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "unload_ipython_extension",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "ipython": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "ipython"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "FactorProcessParams",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_params",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_params": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_params"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_param",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_alias",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_alias": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_alias"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_defaults",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_defaults": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_defaults"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "df_table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "FactorStore",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_day",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "is_temp_day": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "is_temp_day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "add_factor_value",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "rank_ic": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "factor_name",
            "factor_series",
            "rank_ic"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_values_and_ic",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "IC_Rule",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "allow_fallback",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "allow": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "allow"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "half_life_weights",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "N": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "H": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "N",
            "H"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "max_ir_weights",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df_ic": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "df_ic"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "min_periods",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "combine_factor",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "fac_series_dict": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "df_ic": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "weighting": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sr_conf_weight": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sr_conf_direction": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "orthogonalize": {
          "type": "bool",
          "default": null,
          "description": " "
        },
        "logger": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fac_name": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "fac_series_dict",
        "df_ic",
        "weighting",
        "sr_conf_weight",
        "sr_conf_direction",
        "orthogonalize",
        "logger",
        "fac_name"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_alpha_model",
    "type": "function",
    "description": "按调仓日权重回测\n\nArgs:\n    config: 策略运行参数\n    alpha_model_config: Alpha模型的参数\n    portfolio_construct_config: 组合构建参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "alpha_model_config": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "portfolio_construct_config": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "args": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "args"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_analyze_single_factor",
    "type": "function",
    "description": "单因子分析\n\nArgs:\n    config: 策略通用配置参数\n    extra_config: 因子分析参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "extra_config": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_single_factor",
    "type": "function",
    "description": "单因子回测\n\nArgs:\n    config: 策略通用配置参数\n    factor_conf: 被测因子配置\n    portfolio_construct_config: 组合构建参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "factor_conf": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "portfolio_construct_config": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "DataApi",
    "type": "class",
    "description": "GFQuant DataApi",
    "methods": [
      {
        "name": "get_factor_info",
        "type": "function",
        "description": "取因子信息表\n\nArgs:\n    factor_class (str): 匹配因子大类名称(估值、成长、盈利质量等)和分类(alpha, market, period等)，不区分大小写\n    keyword (str): 在因子名称、因子描述中搜索的关键词，不区分大小写\n    compact (bool): 是否只返回常用的信息列\n\nReturns:\n    :obj:`pandas.DataFrame`: 因子信息表\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_info('盈利质量')\n    >>> api.get_factor_info('alpha', keyword='YOY')\n    >>> api.get_factor_info('user')  # 用户自定义因子",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_class": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "compact": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_alpha_factor_name_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_asset_daily",
        "type": "function",
        "description": "获取资产日度数据：因子暴露、特质风险",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_barra_factor_name",
        "type": "function",
        "description": "        \n        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor",
        "type": "function",
        "description": "取因子数据。 alpha因子、行情数据、状态数据都用统一的接口取数。\n\nArgs:\n    factor_name (str): 因子名称或列表，如'Q_EPS', 'CLOSE,CLOSE_ADJ'\n    dates (str or list): 日期字符串或列表，如'20181012-20181024'、'20181008,20181013,20181024'、[20190513, 20190603]\n    codes (str or list, optional): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    fill (int): 如果当天没有因子数据，是否取更早日期的数据填充，默认为0不填充，正整数n为最多往前看n个交易日取最新值填充;\n                仅当dates时日期列表时有效，若dates是日期范围(如'20181012-20181024')则fill参数无效\n    out (str): 'df'/'series'，如果数据只有一行，可选择返回DataFrame或Series\n    batch (int): 按batch指定的交易日数量分批取数\n\nReturns:\n    :obj:`pd.DataFrame` or :obj:`pd.Series` or None: 因子数据DataFrame，其index为日期，columns为证券代码。\n    如果factor_name同时指定多个因子，则columns为2层的MultiIndex(因子名称, 证券代码)\n\nRaises:\n    ValueError: 请求参数错误\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor('EP', '20180102, 20180201, 20180301')\n    >>> api.get_factor('CLOSE,CLOSE_ADJ,AMOUNT', '20180201-20180301', '000001.SZ, 600000.SH')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "out": {
              "type": "any",
              "default": "df",
              "description": " "
            },
            "batch": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "factor_name",
            "dates",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cov",
        "type": "function",
        "description": "因子收益率协方差：日度\n        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_info",
        "type": "function",
        "description": "取因子信息表\n\nArgs:\n    factor_class (str): 匹配因子大类名称(估值、成长、盈利质量等)和分类(alpha, market, period等)，不区分大小写\n    keyword (str): 在因子名称、因子描述中搜索的关键词，不区分大小写\n    compact (bool): 是否只返回常用的信息列\n\nReturns:\n    :obj:`pandas.DataFrame`: 因子信息表\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_info('盈利质量')\n    >>> api.get_factor_info('alpha', keyword='YOY')\n    >>> api.get_factor_info('user')  # 用户自定义因子",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_class": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "compact": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_name_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_return",
        "type": "function",
        "description": "        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_series",
        "type": "function",
        "description": "取一个日期的一个因子数据，返回一个pandas.Series；可选因子中性化处理。\n\n注意：当取Barra风格因子和非alpha因子时，请勿指定 `neutral=True` 。因为Barra因子的原始值已标准化过，非alpha因子标准化处理没有意义。\n\nArgs:\n    factor (str or Series): 因子名称或因子原始值的Series\n    day (datetime or str): 表示一个日期\n    codes (str or list): 股票代码列表，如'000001.SZ, 600000.SH'\n    fill (int): 如果当天没有因子数据，是否用更早的数据填充，默认为0不填充，正整数表示最多往前取多少天，同 :obj:`get_factor()` 的 `fill` 参数，仅当 `factor` 参数为因子名称时有效。\n                特殊处理：当day为一个非交易日日期，即使fill=0时也会取day前推最后一个交易日的因子值\n    universe (str or callable): 选样空间，默认值None，可选值：['ALL', 'HS300', 'ZZ500', 'ZZ800', 'ZZ1000', 'CYB', 'H50'];\n        如为函数，则其形式为 *func(date, DataApi) -> pd.Series*, 返回Series的index为股票代码, value为bool值(或value>0)表示对应的股票是否被选入股票池。\n        (参见  `自定义选股池 <doc_data_api.ipynb#自定义选股池>`_ )\n\n    exclude (bool or dict): 是否剔除新股/ST/停牌股票等，默认None(不剔除)。如为True, 则使用默认剔除条件: `dict(no_new=120, no_st=True, no_suspend=True)`;\n        也可以设置为自定义剔除参数组合，如只剔除停牌: `exclude={\"no_suspend\": True}`。dict可选参数说明：\n\n        * **no_new** (*bool or int*): 是否剔除新股，ex_new=120表示剔除上市交易日不超过120天的股票(如True,默认为120)\n        * **no_st** (*bool*): 是否剔除ST股票\n        * **no_suspend** (*bool*): 是否剔除停牌股票\n\n    neutral (bool or dict): 是否做因子中性化处理，默认False(返回因子原始值); 如为True, 则使用以下6个参数的默认值，也即最常用的中性化处理参数组合来处理因子原始值并返回处理后的值。\n        如其中某些参数不使用默认值可使用自定义参数组合，如只做log和zscore: `neutral=dict(log=True, zscore=True)`\n\n        * **log** (*bool*): 是否做log处理(自然对数)，一般在处理市值类因子时选用，默认False\n        * **outlier** (*bool*): 是否去极值(MAD处理)，默认True\n        * **sector_fill** (*bool or str or float*): 分行业填充缺失值的方式，默认为用行业中值填充('median'或True)，还可以用'min'/'max'/'mean'或直接指定一个用于填充的数值(如0); None则不填充\n        * **pre_neu** (*str*): 前置处理，默认None。可选 'zscore', 'rank'\n        * **sector_neu** (*bool or str*): 做行业中性使用的因子，默认为中信一级行业('LEVEL_1_CITIC'或True); None则不做行业中性\n        * **size_neu** (*bool or str*): 做市值中性使用的因子，默认为总市值('MV'或True); None则不做市值中性\n        * **zscore** (*bool*): 是否做Z-Score变换，默认True\n\nReturns:\n    :obj:`Series` or None: 因子数据Series，其index为证券代码，values为因子值。\n\nRaises:\n    ValueError: 请求参数错误，或结果不是一维的Series\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_series('VOLUME', '20190531')\n    >>> api.get_factor_series('Q_EP', '20190531', universe='HS300', exclude=True, neutral=True)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "universe": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "exclude": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "factor",
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_summary",
        "type": "function",
        "description": "(Experimental) 取一段时间内系统公共因子已预先计算好的分组收益表现汇总，返回一个pandas.DataFrame。\n返回结果等同于量化投研平台上的“因子分析——因子表现汇总”中的因子表现数据。\n\nArgs:\n    dates: 指定一个时间段，格式如'20210101-20210131'\n    stock_pool: 选择股票池，可选'ALL'/'HS300'/'ZZ500'/'ZZ1000'/'CYB'\n    style: 取大类因子数据：True，取细分因子数据：False\n    neutral: 是否将因子中性化处理, True/False\n\nReturns:\n    :obj:`DataFrame` or None: 返回因子表现汇总结果。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "stock_pool": {
              "type": "any",
              "default": "ALL",
              "description": " "
            },
            "style": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "dates"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_realtime_price",
        "type": "function",
        "description": "实时行情 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_rpvalue",
        "type": "function",
        "description": "\"(Experimental) 取报告期数据(report-period value)。\n\nArgs:\n    names (str): 报告期数据的名称或列表，如'RP_CASH_EQ', 'RP_Q_PROFIT, RP_Q_OPER_REV'\n    report_periods (str or list, optional): 报告期日期的字符串或列表，如'20181231, 20190630'、['20181231', '20190331']；若report_periods=None,则取day日期能取到的最新报告期数值\n    codes (str or list, optional): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    day (str, optional): 指定本次查询的截止日期，如'20181012'，该日期之后发布的公告数据不会在返回的结果里；默认值为当前日期\n    day_back (str, optional): 查询公告发布日期的回溯日数，默认400。若report_periods=None, 则(day-day_back)日期之前发布的公告不会在返回的结果里。\n\nReturns:\n    :obj:`pd.DataFrame` or None: 报告期数据DataFrame，columns为['report_period', 'code', 'issue_date'] + names\n\nRaises:\n    ValueError: 请求参数错误\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_rpvalue('RP_CASH_EQ', '20181231, 20190630, 20191231', day='20200301')\n    >>> api.get_rpvalue('RP_Q_PROFIT, RP_Q_OPER_REV', '20190630, 20191231', '000001.SZ, 600000.SH')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "names": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "report_periods": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "day": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "day_back": {
              "type": "any",
              "default": "400",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "names",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_rpvalue_series",
        "type": "function",
        "description": "(Experimental) 取一个日期可得的一个报告期数据，返回一个pandas.Series；可选因子中性化处理。\n\nArgs:\n    name (str): 报告期数据名称，如'RP_CASH_EQ'\n    day (str or datetime): 表示当前日期，只取当前日期及之前发布的公告数据\n    codes (str or list): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    report_period (None, str or datetime): 默认值None，返回day日期可得的最新报告期数据；如指定了一个报告期日期，则返回day日期可得的该报告期数据，此时参数fill=True无效\n    fill (bool): 未指定报告期时(report_period==None)，对于没有最新报告期数据的股票，是否用更早报告期的数据填充，默认为不填充(False)\n    universe (str or callable): 同 :obj:`get_factor_series()` 的 `universe` 参数\n    exclude (bool or dict): 同 :obj:`get_factor_series()` 的 `exclude` 参数\n    neutral (bool or dict): 同 :obj:`get_factor_series()` 的 `neutral` 参数\n\nReturns:\n    :obj:`Series` or None: 报告期数据Series，其index为证券代码，values为因子值。\n\nRaises:\n    ValueError: 请求参数错误，或结果不是一维的Series\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_rpvalue_series('RP_Q_PROFIT', '20191231')\n    >>> api.get_rpvalue_series('RP_Q_PROFIT', '20190531', fill=True, universe='HS300', exclude=True)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "report_period": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "universe": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "exclude": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "name",
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_split_sector_series",
        "type": "function",
        "description": "取一个日期的一级行业因子数据，可选将部分一级行业拆分为二级行业\n\nArgs:\n    tday (datetime or str): 表示一个日期\n    sector (str): 一级行业因子名称， 如'LEVEL_1_CITIC'或'LEVEL_1_SW’\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表，如 ['非银行金融', '电子']\n    codes (str or list): 股票代码列表，为None则取全市场股票\n    fill (int): 如果当天没有因子数据，是否用更早的数据填充，默认为0，正整数表示往前取多少天\n\nReturns:\n    :obj:`pd.Series`: 行业分类序列，index为股票名称，value为行业名称\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_series('20190401', 'LEVEL_1_SW').dropna()\n    >>> api.get_split_sector_series('20190401', 'LEVEL_1_SW', split_sectors=['非银金融']).dropna()",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": [
            "tday",
            "sector",
            "split_sectors"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_trade_days",
        "type": "function",
        "description": "取交易日列表。\n\nArgs:\n    start (str): 开始日期, 格式如: '20181008'\n    end (str): 结束日期, 格式如: '20181024'\n    fmt (str): 指定返回日期的格式，'dt'返回日期格式，'str'或'str-'返回字符串格式，'i'返回整数格式\n    arr (bool): False: 返回list; True: 返回np.array\n\nReturns:\n    :obj:`numpy.ndarray`: 日期数组\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_trade_days('20181009', '20181013')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fmt": {
              "type": "any",
              "default": "dt",
              "description": " "
            },
            "arr": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "portfolio_optimize",
        "type": "function",
        "description": "组合优化：控制组合相对于基准的行业/风格因子暴露、个股相对基准的权重偏离、个股的绝对权重、成分股的总权重占比、换手率和跟踪误差等。\n\nArgs:\n    expect_rtn_series (Series): 预期收益序列，index为股票代码，不存在的股票(或value为nan的股票)不可选；\n                                不可选的股票相对基准的偏离(也可能出现一个行业的所有股票都不可选)，均不会导致优化器出错：\n                                1) 不可选的股票，即使它在基准中有权重，也不会受个股权重偏离参数的约束(它在优化结果中的权重一定是0)；\n                                2) 不可选的行业，如果它在基准中有权重，即使不能满足行业暴露参数的约束，也仅会输出一条警告信息。\n    tday (datetime or str): 一个交易日日期\n    bench (str): 基准权重因子名称，目前支持 ‘WEIGHT_[H50|300|500|800|1000|CYBZ|CYB|ALL]’\n    sector (str): 一级行业因子名称，目前支持 'LEVEL_1_[CITIC|SW]'\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表\n    sect_exp_min (float): 组合相对基准的行业暴露下限\n    sect_exp_max (float): 组合相对基准的行业暴露上限\n    sect_exp_min_deviation (dict | callable): 单独设置行业暴露度在'sect_exp_min'基础上的偏离\n    sect_exp_max_deviation (dict | callable): 单独设置行业暴露度在'sect_exp_max'基础上的偏离\n    style_factors (str or list): 可选'LNMV'(自由流通市值的自然对数) 或'BARRA'(10个Barra风格因子)，也可以自定义风格因子(参见 `因子标准化处理 <doc_data_norm.ipynb#自定义标准化处理规则>`_ )\n    style_exp_min (float): 组合相对基准的风格因子暴露下限\n    style_exp_max (float): 组合相对基准的风格因子暴露上限\n    style_exp_min_deviation (dict | callable): 单独设置风格因子暴露度在'style_exp_min'基础上的偏离\n    style_exp_max_deviation (dict | callable): 单独设置风格因子暴露度在'style_exp_max'基础上的偏离\n    rel_weight_min (float): 组合内个股相对基准的的权重偏差下限，默认不限(None)\n    rel_weight_max (float): 组合内个股相对基准的的权重偏差上限\n    abs_weight_min (float): 组合内个股的绝对权重下限\n    abs_weight_max (float): 组合内个股的绝对权重上限\n    bench_pct (float): 组合内基准指数成分股的权重占比下限(上限为1，即全部在基准内选股)\n    turnover_max (float): 组合换手率上限\n    pre_weight (pd.Series): 调仓前的持仓权重，计算组合换手率使用(如无持仓可设为None)\n    trackerr_max (float): 组合跟踪误差上限\n    cov_type : 跟踪误差约束时，优化求解时，采用的方法\n    result_stock_count (int): 组合优化结果可返回的最大股票数量，个股权重按从大到小排序，超过此数量的个股的权重将被收回重新分配\n    result_weight_min (float): 组合优化结果要求的个股最低权重值，低于此值的个股的权重将被收回重新分配\n    result_weight_sum (float): 组合优化结果的总权重，为避免数值计算误差请设定为小于1的数\n    fill_barra (bool): 组合优化时，如果用到Barra因子但当日没有值，是否取前值填充\n    verify_result (bool): 组合优化后，复查结果是否符合约束条件\n    max_stk_nums: 股票数量约束\n\nReturns:\n    :obj:`Series`: 组合优化的结果Series，其index为证券代码，values为权重值。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "expect_rtn_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "any",
              "default": "WEIGHT_300",
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_CITIC",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sect_exp_min": {
              "type": "any",
              "default": "-0.0",
              "description": " "
            },
            "sect_exp_max": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "sect_exp_min_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sect_exp_max_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "style_factors": {
              "type": "any",
              "default": "LNMV",
              "description": " "
            },
            "style_exp_min": {
              "type": "any",
              "default": "-0.0",
              "description": " "
            },
            "style_exp_max": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "style_exp_min_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "style_exp_max_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "rel_weight_min": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "rel_weight_max": {
              "type": "any",
              "default": "0.02",
              "description": " "
            },
            "abs_weight_min": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "abs_weight_max": {
              "type": "any",
              "default": "0.1",
              "description": " "
            },
            "bench_pct": {
              "type": "any",
              "default": "0.8",
              "description": " "
            },
            "turnover_max": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "pre_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "trackerr_max": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "cov_type": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "result_stock_count": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "result_weight_min": {
              "type": "any",
              "default": "0.001",
              "description": " "
            },
            "result_weight_sum": {
              "type": "any",
              "default": "0.9999",
              "description": " "
            },
            "max_stk_nums": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill_barra": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "verify_result": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "expect_rtn_series",
            "tday"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "portfolio_weighting",
        "type": "function",
        "description": "组合加权构建：可选 “不考虑行业加权” 或 “先选股再分行业配权”或“先定行业权重，再行业内选股配权”。\n\nArgs:\n    expect_rtn_series (Series): 预期收益序列，index为股票代码，value为nan的股票不可选\n    tday (datetime or str): 一个交易日日期\n    weighting (str or Series or callable): 股票权重分配方式，支持'equal'(等权)、'score'(使用expect_rtn_series参数的值)\n        或一个函数(def func(score, dataApi) -> pd.Series)，也可以用另一个因子名称作为权重，如'FFMV'即为自由流通市值加权；\n        权重取值只保留非负值\n    top_n (int): 选择前n个股票；如果'sector_first'=True，则在每个行业里选择前n个股票\n    top_pct (float): 选择前(pct*100)%个股票；如果'sector_first'=True，则在每个行业里选择前(pct*100)%个股票(四舍五入)\n    per_sector_weighting (bool): 是否分行业配权重，如为False, 则由此以下的参数都不生效\n    sector_first (bool): 是否先设定行业权重再在行业内选股, False:先选股票再按行业配权重; True:先定行业权重再选股再配权重\n    bench (str): 行业基准权重因子名称，目前支持 ‘WEIGHT_[H50|300|500|800|1000|CYBZ|CYB|ALL]’，以及行业等权'equal_sector'\n    sector (str): 一级行业因子名称，目前支持 'LEVEL_1_[CITIC|SW]'\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表\n    sector_deviation (dict): 行业权重偏离，被拆分的一级行业不能配置，应指定对应二级行业的值\n    final_equal (bool): 分行业选股(也配了权重)的最后，是否最终按每个股票等权配置(如场景：组合要和等权基准比较)\n\nReturns:\n    :obj:`pd.Series`: 组合权重分配结果，其index为证券代码，values为权重值。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "expect_rtn_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weighting": {
              "type": "Union",
              "default": "equal",
              "description": " "
            },
            "top_n": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "top_pct": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "per_sector_weighting": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "sector_first": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "bench": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sector_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "final_equal": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "expect_rtn_series",
            "tday"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_trade_days",
        "type": "function",
        "description": "取交易日列表。\n\nArgs:\n    start (str): 开始日期, 格式如: '20181008'\n    end (str): 结束日期, 格式如: '20181024'\n    fmt (str): 指定返回日期的格式，'dt'返回日期格式，'str'或'str-'返回字符串格式，'i'返回整数格式\n    arr (bool): False: 返回list; True: 返回np.array\n\nReturns:\n    :obj:`numpy.ndarray`: 日期数组\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_trade_days('20181009', '20181013')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fmt": {
              "type": "any",
              "default": "dt",
              "description": " "
            },
            "arr": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "server",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_weight",
    "type": "function",
    "description": "按调仓日权重回测\n\nArgs:\n    config: 策略运行参数\n    weight_df: 类似PMS调仓格式的DataFrame, 需要用到3列：调整日期 证券代码(Wind格式) 持仓权重(日权重之和<=1)，证券类型只支持股票；\n        weight_df也可以通过 config[\"holding\"] 配置(同时weight_df参数必须不指定)\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "weight_df": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run",
    "type": "function",
    "description": "Every module as its globals() so can't use it as GLOBAL variables ",
    "parameters": {
      "type": "object",
      "properties": {
        "code": {
          "type": "str",
          "default": null,
          "description": " "
        },
        "stg_info": {
          "type": "dict",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "code"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Base",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BigInteger",
    "type": "class",
    "description": "A type for bigger ``int`` integers.\n\nTypically generates a ``BIGINT`` in DDL, and otherwise acts like\na normal :class:`.Integer` on the Python side.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "Column",
    "type": "class",
    "description": "Represents a column in a database table.",
    "methods": [
      {
        "name": "all_",
        "type": "function",
        "description": "Produce an :func:`_expression.all_` clause against the\nparent object.\n\nSee the documentation for :func:`_sql.all_` for examples.\n\n.. note:: be sure to not confuse the newer\n    :meth:`_sql.ColumnOperators.all_` method with the **legacy**\n    version of this method, the :meth:`_types.ARRAY.Comparator.all`\n    method that's specific to :class:`_types.ARRAY`, which uses a\n    different calling style.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "any_",
        "type": "function",
        "description": "Produce an :func:`_expression.any_` clause against the\nparent object.\n\nSee the documentation for :func:`_sql.any_` for examples.\n\n.. note:: be sure to not confuse the newer\n    :meth:`_sql.ColumnOperators.any_` method with the **legacy**\n    version of this method, the :meth:`_types.ARRAY.Comparator.any`\n    method that's specific to :class:`_types.ARRAY`, which uses a\n    different calling style.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "asc",
        "type": "function",
        "description": "Produce a :func:`_expression.asc` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "bitwise_not",
        "type": "function",
        "description": "Produce a bitwise NOT operation, typically via the ``~``\noperator.\n\n.. versionadded:: 2.0.2\n\n.. seealso::\n\n    :ref:`operators_bitwise`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "desc",
        "type": "function",
        "description": "Produce a :func:`_expression.desc` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "distinct",
        "type": "function",
        "description": "Produce a :func:`_expression.distinct` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "get_children",
        "type": "function",
        "description": "Return immediate child :class:`.visitors.HasTraverseInternals`\nelements of this :class:`.visitors.HasTraverseInternals`.\n\nThis is used for visit traversal.\n\n\\**kw may contain flags that change the collection that is\nreturned, for example to return a subset of items in order to\ncut down on larger traversals, or to return child items from a\ndifferent context (such as schema-level collections instead of\nclause-level).",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "column_tables": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "nulls_first",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_first` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_first()`` operator is\n   renamed from ``nullsfirst()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_last",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_last` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_last()`` operator is\n   renamed from ``nullslast()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_first",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_first` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_first()`` operator is\n   renamed from ``nullsfirst()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_last",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_last` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_last()`` operator is\n   renamed from ``nullslast()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "anon_key_label",
        "type": "property",
        "description": ".. deprecated:: 1.4 The :attr:`_expression.ColumnElement.anon_key_label` attribute is now private, and the public accessor is deprecated."
      },
      {
        "name": "anon_label",
        "type": "property",
        "description": ".. deprecated:: 1.4 The :attr:`_expression.ColumnElement.anon_label` attribute is now private, and the public accessor is deprecated."
      },
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "entity_namespace",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "expression",
        "type": "property",
        "description": "Return a column expression.\n\nPart of the inspection interface; returns self."
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      }
    ]
  },
  {
    "name": "Date",
    "type": "class",
    "description": "A type for ``datetime.date()`` objects.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "DateTime",
    "type": "class",
    "description": "A type for ``datetime.datetime()`` objects.\n\nDate and time types return objects from the Python ``datetime``\nmodule.  Most DBAPIs have built in support for the datetime\nmodule, with the noted exception of SQLite.  In the case of\nSQLite, date and time types are stored as strings which are then\nconverted back to datetime objects when rows are returned.\n\nFor the time representation within the datetime type, some\nbackends include additional options, such as timezone support and\nfractional seconds support.  For fractional seconds, use the\ndialect-specific datatype, such as :class:`.mysql.TIME`.  For\ntimezone support, use at least the :class:`_types.TIMESTAMP` datatype,\nif not the dialect-specific datatype object.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "Float",
    "type": "class",
    "description": "Type representing floating point types, such as ``FLOAT`` or ``REAL``.\n\nThis type returns Python ``float`` objects by default, unless the\n:paramref:`.Float.asdecimal` flag is set to ``True``, in which case they\nare coerced to ``decimal.Decimal`` objects.\n\nWhen a :paramref:`.Float.precision` is not provided in a\n:class:`_types.Float` type some backend may compile this type as\nan 8 bytes / 64 bit float datatype. To use a 4 bytes / 32 bit float\ndatatype a precision <= 24 can usually be provided or the\n:class:`_types.REAL` type can be used.\nThis is known to be the case in the PostgreSQL and MSSQL dialects\nthat render the type as ``FLOAT`` that's in both an alias of\n``DOUBLE PRECISION``. Other third party dialects may have similar\nbehavior.",
    "methods": [
      {
        "name": "bind_processor",
        "type": "function",
        "description": "Return a conversion function for processing bind values.\n\nReturns a callable which will receive a bind parameter value\nas the sole positional argument and will return a value to\nsend to the DB-API.\n\nIf processing is not necessary, the method should return ``None``.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.bind_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.bind_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_bind_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`\n\n\n:param dialect: Dialect instance in use.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "result_processor",
        "type": "function",
        "description": "Return a conversion function for processing result row values.\n\nReturns a callable which will receive a result row column\nvalue as the sole positional argument and will return a value\nto return to the user.\n\nIf processing is not necessary, the method should return ``None``.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.result_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.result_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_result_value`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`\n\n:param dialect: Dialect instance in use.\n\n:param coltype: DBAPI coltype argument received in cursor.description.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "coltype": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect",
            "coltype"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "ForeignKey",
    "type": "class",
    "description": "Defines a dependency between two columns.\n\n``ForeignKey`` is specified as an argument to a :class:`_schema.Column`\nobject,\ne.g.::\n\n    t = Table(\n        \"remote_table\",\n        metadata,\n        Column(\"remote_id\", ForeignKey(\"main_table.id\")),\n    )\n\nNote that ``ForeignKey`` is only a marker object that defines\na dependency between two columns.   The actual constraint\nis in all cases represented by the :class:`_schema.ForeignKeyConstraint`\nobject.   This object will be generated automatically when\na ``ForeignKey`` is associated with a :class:`_schema.Column` which\nin turn is associated with a :class:`_schema.Table`.   Conversely,\nwhen :class:`_schema.ForeignKeyConstraint` is applied to a\n:class:`_schema.Table`,\n``ForeignKey`` markers are automatically generated to be\npresent on each associated :class:`_schema.Column`, which are also\nassociated with the constraint object.\n\nNote that you cannot define a \"composite\" foreign key constraint,\nthat is a constraint between a grouping of multiple parent/child\ncolumns, using ``ForeignKey`` objects.   To define this grouping,\nthe :class:`_schema.ForeignKeyConstraint` object must be used, and applied\nto the :class:`_schema.Table`.   The associated ``ForeignKey`` objects\nare created automatically.\n\nThe ``ForeignKey`` objects associated with an individual\n:class:`_schema.Column`\nobject are available in the `foreign_keys` collection\nof that column.\n\nFurther examples of foreign key configuration are in\n:ref:`metadata_foreignkeys`.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "target_fullname",
        "type": "property",
        "description": "Return a string based 'column specification' for this\n:class:`_schema.ForeignKey`.\n\nThis is usually the equivalent of the string-based \"tablename.colname\"\nargument first passed to the object's constructor."
      }
    ]
  },
  {
    "name": "Index",
    "type": "class",
    "description": "A table-level INDEX.\n\nDefines a composite (one or more column) INDEX.\n\nE.g.::\n\n    sometable = Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n    )\n\n    Index(\"some_index\", sometable.c.name)\n\nFor a no-frills, single column index, adding\n:class:`_schema.Column` also supports ``index=True``::\n\n    sometable = Table(\n        \"sometable\", metadata, Column(\"name\", String(50), index=True)\n    )\n\nFor a composite index, multiple columns can be specified::\n\n    Index(\"some_index\", sometable.c.name, sometable.c.address)\n\nFunctional indexes are supported as well, typically by using the\n:data:`.func` construct in conjunction with table-bound\n:class:`_schema.Column` objects::\n\n    Index(\"some_index\", func.lower(sometable.c.name))\n\nAn :class:`.Index` can also be manually associated with a\n:class:`_schema.Table`,\neither through inline declaration or using\n:meth:`_schema.Table.append_constraint`.  When this approach is used,\nthe names\nof the indexed columns can be specified as strings::\n\n    Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n        Index(\"some_index\", \"name\", \"address\"),\n    )\n\nTo support functional or expression-based indexes in this form, the\n:func:`_expression.text` construct may be used::\n\n    from sqlalchemy import text\n\n    Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n        Index(\"some_index\", text(\"lower(name)\")),\n    )\n\n.. seealso::\n\n    :ref:`schema_indexes` - General information on :class:`.Index`.\n\n    :ref:`postgresql_indexes` - PostgreSQL-specific options available for\n    the :class:`.Index` construct.\n\n    :ref:`mysql_indexes` - MySQL-specific options available for the\n    :class:`.Index` construct.\n\n    :ref:`mssql_indexes` - MSSQL-specific options available for the\n    :class:`.Index` construct.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      }
    ]
  },
  {
    "name": "Integer",
    "type": "class",
    "description": "A type for ``int`` integers.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "PickleType",
    "type": "class",
    "description": "Holds Python objects, which are serialized using pickle.\n\nPickleType builds upon the Binary type to apply Python's\n``pickle.dumps()`` to incoming objects, and ``pickle.loads()`` on\nthe way out, allowing any pickleable Python object to be stored as\na serialized binary field.\n\nTo allow ORM change events to propagate for elements associated\nwith :class:`.PickleType`, see :ref:`mutable_toplevel`.",
    "methods": [
      {
        "name": "bind_processor",
        "type": "function",
        "description": "Provide a bound value processing function for the\ngiven :class:`.Dialect`.\n\nThis is the method that fulfills the :class:`.TypeEngine`\ncontract for bound value conversion which normally occurs via\nthe :meth:`_types.TypeEngine.bind_processor` method.\n\n.. note::\n\n    User-defined subclasses of :class:`_types.TypeDecorator` should\n    **not** implement this method, and should instead implement\n    :meth:`_types.TypeDecorator.process_bind_param` so that the \"inner\"\n    processing provided by the implementing type is maintained.\n\n:param dialect: Dialect instance in use.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "compare_values",
        "type": "function",
        "description": "Given two values, compare them for equality.\n\nBy default this calls upon :meth:`.TypeEngine.compare_values`\nof the underlying \"impl\", which in turn usually\nuses the Python equals operator ``==``.\n\nThis function is used by the ORM to compare\nan original-loaded value with an intercepted\n\"changed\" value, to determine if a net change\nhas occurred.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "x": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "y": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "x",
            "y"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "result_processor",
        "type": "function",
        "description": "Provide a result value processing function for the given\n:class:`.Dialect`.\n\nThis is the method that fulfills the :class:`.TypeEngine`\ncontract for bound value conversion which normally occurs via\nthe :meth:`_types.TypeEngine.result_processor` method.\n\n.. note::\n\n    User-defined subclasses of :class:`_types.TypeDecorator` should\n    **not** implement this method, and should instead implement\n    :meth:`_types.TypeDecorator.process_result_value` so that the\n    \"inner\" processing provided by the implementing type is maintained.\n\n:param dialect: Dialect instance in use.\n:param coltype: A SQLAlchemy data type",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "coltype": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect",
            "coltype"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "comparator_factory",
        "type": "property",
        "description": "Base class for custom comparison operations defined at the\ntype level.  See :attr:`.TypeEngine.comparator_factory`."
      },
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      },
      {
        "name": "sort_key_function",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "PrimaryKeyConstraint",
    "type": "class",
    "description": "A table-level PRIMARY KEY constraint.\n\nThe :class:`.PrimaryKeyConstraint` object is present automatically\non any :class:`_schema.Table` object; it is assigned a set of\n:class:`_schema.Column` objects corresponding to those marked with\nthe :paramref:`_schema.Column.primary_key` flag::\n\n    >>> my_table = Table(\n    ...     \"mytable\",\n    ...     metadata,\n    ...     Column(\"id\", Integer, primary_key=True),\n    ...     Column(\"version_id\", Integer, primary_key=True),\n    ...     Column(\"data\", String(50)),\n    ... )\n    >>> my_table.primary_key\n    PrimaryKeyConstraint(\n        Column('id', Integer(), table=<mytable>,\n               primary_key=True, nullable=False),\n        Column('version_id', Integer(), table=<mytable>,\n               primary_key=True, nullable=False)\n    )\n\nThe primary key of a :class:`_schema.Table` can also be specified by using\na :class:`.PrimaryKeyConstraint` object explicitly; in this mode of usage,\nthe \"name\" of the constraint can also be specified, as well as other\noptions which may be recognized by dialects::\n\n    my_table = Table(\n        \"mytable\",\n        metadata,\n        Column(\"id\", Integer),\n        Column(\"version_id\", Integer),\n        Column(\"data\", String(50)),\n        PrimaryKeyConstraint(\"id\", \"version_id\", name=\"mytable_pk\"),\n    )\n\nThe two styles of column-specification should generally not be mixed.\nAn warning is emitted if the columns present in the\n:class:`.PrimaryKeyConstraint`\ndon't match the columns that were marked as ``primary_key=True``, if both\nare present; in this case, the columns are taken strictly from the\n:class:`.PrimaryKeyConstraint` declaration, and those columns otherwise\nmarked as ``primary_key=True`` are ignored.  This behavior is intended to\nbe backwards compatible with previous behavior.\n\nFor the use case where specific options are to be specified on the\n:class:`.PrimaryKeyConstraint`, but the usual style of using\n``primary_key=True`` flags is still desirable, an empty\n:class:`.PrimaryKeyConstraint` may be specified, which will take on the\nprimary key column collection from the :class:`_schema.Table` based on the\nflags::\n\n    my_table = Table(\n        \"mytable\",\n        metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"version_id\", Integer, primary_key=True),\n        Column(\"data\", String(50)),\n        PrimaryKeyConstraint(name=\"mytable_pk\", mssql_clustered=True),\n    )",
    "methods": [],
    "properties": [
      {
        "name": "columns_autoinc_first",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "Sequence",
    "type": "class",
    "description": "Represents a named database sequence.\n\nThe :class:`.Sequence` object represents the name and configurational\nparameters of a database sequence.   It also represents\na construct that can be \"executed\" by a SQLAlchemy :class:`_engine.Engine`\nor :class:`_engine.Connection`,\nrendering the appropriate \"next value\" function\nfor the target database and returning a result.\n\nThe :class:`.Sequence` is typically associated with a primary key column::\n\n    some_table = Table(\n        \"some_table\",\n        metadata,\n        Column(\n            \"id\",\n            Integer,\n            Sequence(\"some_table_seq\", start=1),\n            primary_key=True,\n        ),\n    )\n\nWhen CREATE TABLE is emitted for the above :class:`_schema.Table`, if the\ntarget platform supports sequences, a CREATE SEQUENCE statement will\nbe emitted as well.   For platforms that don't support sequences,\nthe :class:`.Sequence` construct is ignored.\n\n.. seealso::\n\n    :ref:`defaults_sequences`\n\n    :class:`.CreateSequence`\n\n    :class:`.DropSequence`",
    "methods": [
      {
        "name": "get_execution_options",
        "type": "function",
        "description": "Get the non-SQL options which will take effect during execution.\n\n.. versionadded:: 1.3\n\n.. seealso::\n\n    :meth:`.Executable.execution_options`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "_ExecuteOptions",
          "description": " "
        }
      },
      {
        "name": "next_value",
        "type": "function",
        "description": "Return a :class:`.next_value` function element\nwhich will render the appropriate increment function\nfor this :class:`.Sequence` within any SQL expression.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Function[int]",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "StrategyCode",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyDaily",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyDividend",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyHold",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyModel",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyRun",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyTrade",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyWeightTarget",
    "type": "class",
    "description": "e.g. 次日均价调仓的策略，可在此需要记录交易下单时的目标权重；本表由上层策略负责保存(而不是像其他表一样由底层策略负责) ",
    "methods": [],
    "properties": []
  },
  {
    "name": "String",
    "type": "class",
    "description": "The base for all string and character types.\n\nIn SQL, corresponds to VARCHAR.\n\nThe `length` field is usually required when the `String` type is\nused within a CREATE TABLE statement, as VARCHAR requires a length\non most databases.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "UniqueConstraint",
    "type": "class",
    "description": "A table-level UNIQUE constraint.\n\nDefines a single column or composite UNIQUE constraint. For a no-frills,\nsingle column constraint, adding ``unique=True`` to the ``Column``\ndefinition is a shorthand equivalent for an unnamed, single column\nUniqueConstraint.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "declarative_base",
    "type": "function",
    "description": ".. deprecated:: 2.0 The ``declarative_base()`` function is now available as :func:`sqlalchemy.orm.declarative_base`. (Background on SQLAlchemy 2.0 at: :ref:`migration_20_toplevel`)",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kw": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg",
        "kw"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "FakeReply",
    "type": "class",
    "description": "FakeReply(status_code, content)",
    "methods": [],
    "properties": []
  },
  {
    "name": "RemoteStrategyAPI",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "get_strategy_code",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "code_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_info",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_perf",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "get_hold": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "run_strategy",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "task_name": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "resume_auto": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_strategy_code",
        "type": "function",
        "description": "同时也是策略的prepare; %bt_save里传入的code只能是str, 在代码中调用时也可以传入list[dict]作为code(+run_backtest) ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "code": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "name": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "description": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "is_public": {
              "type": "str",
              "default": "N",
              "description": " "
            },
            "delete_time": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "run_backtest": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "code"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "stop_strategy",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "message": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rcid",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "k": {
          "type": "any",
          "default": "10",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_neu",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "numeric_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "categorical_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "version": {
          "type": "any",
          "default": "2",
          "description": " "
        }
      },
      "required": [
        "factor_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_orth",
    "type": "function",
    "description": "X是(行业市值中性化后的)因子值矩阵(N×K)，N为股票数量，K为因子数量，orth_X是正交后因子矩阵（N×K）,s是过渡矩阵\n@author: hanjinyang\n@from: chenyt, 2019-04-22; change matrix to np.array, 2019-07-22",
    "parameters": {
      "type": "object",
      "properties": {
        "X": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "orthret": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "X"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.4*3=4.2，不是原方案（因子数据处理方法.docx）中的5.2\n    sector_fill (bool or str or float): 填补缺失值的方法，默认为'median'\n    pre_neu (str): 在中性化回归前对因子值的处理：None, 'zscore', 'rank'\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "pre_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "pre_neu",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure_v1",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.4*3=4.2，不是原方案（因子数据处理方法.docx）中的5.2\n    sector_fill (bool or str or float): 填补缺失值的方法，默认为'median'\n    pre_neu (str): UNUSED\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "pre_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "pre_neu",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "linearly_independent_cols",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "numpy_lstsq",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "y": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "y",
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "numpy_ols",
    "type": "function",
    "description": "Ordinary Least Squares regression using only NumPy.\n\n只求解及计算残差时，不必使用statsmodels.OLS，避免计算r²,summary等其他数据影响速度(如要做t检验/F检验/算P值还是选sm)。\nhttps://jianghaochu.github.io/ordinary-least-squares-regression-in-python-from-scratch.html",
    "parameters": {
      "type": "object",
      "properties": {
        "y": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "y",
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "outlier_mad",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "mad_limit": {
          "type": "any",
          "default": "1.483",
          "description": " "
        },
        "n_mul": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "sector_categorical",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sector_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "z_score",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "data_api_log_reader",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "log_fn": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "log_fn"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rtn_plot",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "bench_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "rtn_series",
        "bench_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "format_date",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "day": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fmt": {
          "type": "any",
          "default": "str-",
          "description": " "
        }
      },
      "required": [
        "day"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "HTML",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "IFrameCanvas",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "update",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "msg": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "finalize": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "msg"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Javascript",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "display",
    "type": "function",
    "description": "Display a Python object in all frontends.\n\nBy default all representations will be computed and sent to the frontends.\nFrontends can decide which representation is used and how.\n\nIn terminal IPython this will be similar to using :func:`print`, for use in richer\nfrontends see Jupyter notebook examples with rich display logic.\n\nParameters\n----------\n*objs : object\n    The Python objects to display.\nraw : bool, optional\n    Are the objects to be displayed already mimetype-keyed dicts of raw display data,\n    or Python objects that need to be formatted before display? [default: False]\ninclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to include in the\n    format data dict. If this is set *only* the format types included\n    in this list will be computed.\nexclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to exclude in the format\n    data dict. If this is set all format types will be computed,\n    except for those included in this argument.\nmetadata : dict, optional\n    A dictionary of metadata to associate with the output.\n    mime-type keys in this dictionary will be associated with the individual\n    representation formats, if they exist.\ntransient : dict, optional\n    A dictionary of transient data to associate with the output.\n    Data in this dict should not be persisted to files (e.g. notebooks).\ndisplay_id : str, bool optional\n    Set an id for the display.\n    This id can be used for updating this display area later via update_display.\n    If given as `True`, generate a new `display_id`\nclear : bool, optional\n    Should the output area be cleared before displaying anything? If True,\n    this will wait for additional output before clearing. [default: False]\n**kwargs : additional keyword-args, optional\n    Additional keyword-arguments are passed through to the display publisher.\n\nReturns\n-------\nhandle: DisplayHandle\n    Returns a handle on updatable displays for use with :func:`update_display`,\n    if `display_id` is given. Returns :any:`None` if no `display_id` is given\n    (default).\n\nExamples\n--------\n>>> class Json(object):\n...     def __init__(self, json):\n...         self.json = json\n...     def _repr_pretty_(self, pp, cycle):\n...         import json\n...         pp.text(json.dumps(self.json, indent=2))\n...     def __repr__(self):\n...         return str(self.json)\n...\n\n>>> d = Json({1:2, 3: {4:5}})\n\n>>> print(d)\n{1: 2, 3: {4: 5}}\n\n>>> display(d)\n{\n  \"1\": 2,\n  \"3\": {\n    \"4\": 5\n  }\n}\n\n>>> def int_formatter(integer, pp, cycle):\n...     pp.text('I'*integer)\n\n>>> plain = get_ipython().display_formatter.formatters['text/plain']\n>>> plain.for_type(int, int_formatter)\n<function _repr_pprint at 0x...>\n>>> display(7-5)\nII\n\n>>> del plain.type_printers[int]\n>>> display(7-5)\n2\n\nSee Also\n--------\n:func:`update_display`\n\nNotes\n-----\nIn Python, objects can declare their textual representation using the\n`__repr__` method. IPython expands on this idea and allows objects to declare\nother, rich representations including:\n\n  - HTML\n  - JSON\n  - PNG\n  - JPEG\n  - SVG\n  - LaTeX\n\nA single object can declare some or all of these representations; all are\nhandled by IPython's display system.\n\nThe main idea of the first approach is that you have to implement special\ndisplay methods when you define your class, one for each representation you\nwant to use. Here is a list of the names of the special methods and the\nvalues they must return:\n\n  - `_repr_html_`: return raw HTML as a string, or a tuple (see below).\n  - `_repr_json_`: return a JSONable dict, or a tuple (see below).\n  - `_repr_jpeg_`: return raw JPEG data, or a tuple (see below).\n  - `_repr_png_`: return raw PNG data, or a tuple (see below).\n  - `_repr_svg_`: return raw SVG data as a string, or a tuple (see below).\n  - `_repr_latex_`: return LaTeX commands in a string surrounded by \"$\",\n                    or a tuple (see below).\n  - `_repr_mimebundle_`: return a full mimebundle containing the mapping\n                         from all mimetypes to data.\n                         Use this for any mime-type not listed above.\n\nThe above functions may also return the object's metadata alonside the\ndata.  If the metadata is available, the functions will return a tuple\ncontaining the data and metadata, in that order.  If there is no metadata\navailable, then the functions will return the data only.\n\nWhen you are directly writing your own classes, you can adapt them for\ndisplay in IPython by following the above approach. But in practice, you\noften need to work with existing classes that you can't easily modify.\n\nYou can refer to the documentation on integrating with the display system in\norder to register custom formatters for already existing types\n(:ref:`integrating_rich_display`).\n\n.. versionadded:: 5.4 display available without import\n.. versionadded:: 6.1 display available without import\n\nSince IPython 5.4 and 6.1 :func:`display` is automatically made available to\nthe user without import. If you are using display in a document that might\nbe used in a pure python context or with older version of IPython, use the\nfollowing import at the top of your file::\n\n    from IPython.display import display",
    "parameters": {
      "type": "object",
      "properties": {
        "objs": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "include": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "exclude": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "metadata": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "transient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "display_id": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "raw": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "clear": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "objs",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "HTML",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Javascript",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "NotebookCanvas",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "update",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "msg": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "finalize": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "msg"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "display",
    "type": "function",
    "description": "Display a Python object in all frontends.\n\nBy default all representations will be computed and sent to the frontends.\nFrontends can decide which representation is used and how.\n\nIn terminal IPython this will be similar to using :func:`print`, for use in richer\nfrontends see Jupyter notebook examples with rich display logic.\n\nParameters\n----------\n*objs : object\n    The Python objects to display.\nraw : bool, optional\n    Are the objects to be displayed already mimetype-keyed dicts of raw display data,\n    or Python objects that need to be formatted before display? [default: False]\ninclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to include in the\n    format data dict. If this is set *only* the format types included\n    in this list will be computed.\nexclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to exclude in the format\n    data dict. If this is set all format types will be computed,\n    except for those included in this argument.\nmetadata : dict, optional\n    A dictionary of metadata to associate with the output.\n    mime-type keys in this dictionary will be associated with the individual\n    representation formats, if they exist.\ntransient : dict, optional\n    A dictionary of transient data to associate with the output.\n    Data in this dict should not be persisted to files (e.g. notebooks).\ndisplay_id : str, bool optional\n    Set an id for the display.\n    This id can be used for updating this display area later via update_display.\n    If given as `True`, generate a new `display_id`\nclear : bool, optional\n    Should the output area be cleared before displaying anything? If True,\n    this will wait for additional output before clearing. [default: False]\n**kwargs : additional keyword-args, optional\n    Additional keyword-arguments are passed through to the display publisher.\n\nReturns\n-------\nhandle: DisplayHandle\n    Returns a handle on updatable displays for use with :func:`update_display`,\n    if `display_id` is given. Returns :any:`None` if no `display_id` is given\n    (default).\n\nExamples\n--------\n>>> class Json(object):\n...     def __init__(self, json):\n...         self.json = json\n...     def _repr_pretty_(self, pp, cycle):\n...         import json\n...         pp.text(json.dumps(self.json, indent=2))\n...     def __repr__(self):\n...         return str(self.json)\n...\n\n>>> d = Json({1:2, 3: {4:5}})\n\n>>> print(d)\n{1: 2, 3: {4: 5}}\n\n>>> display(d)\n{\n  \"1\": 2,\n  \"3\": {\n    \"4\": 5\n  }\n}\n\n>>> def int_formatter(integer, pp, cycle):\n...     pp.text('I'*integer)\n\n>>> plain = get_ipython().display_formatter.formatters['text/plain']\n>>> plain.for_type(int, int_formatter)\n<function _repr_pprint at 0x...>\n>>> display(7-5)\nII\n\n>>> del plain.type_printers[int]\n>>> display(7-5)\n2\n\nSee Also\n--------\n:func:`update_display`\n\nNotes\n-----\nIn Python, objects can declare their textual representation using the\n`__repr__` method. IPython expands on this idea and allows objects to declare\nother, rich representations including:\n\n  - HTML\n  - JSON\n  - PNG\n  - JPEG\n  - SVG\n  - LaTeX\n\nA single object can declare some or all of these representations; all are\nhandled by IPython's display system.\n\nThe main idea of the first approach is that you have to implement special\ndisplay methods when you define your class, one for each representation you\nwant to use. Here is a list of the names of the special methods and the\nvalues they must return:\n\n  - `_repr_html_`: return raw HTML as a string, or a tuple (see below).\n  - `_repr_json_`: return a JSONable dict, or a tuple (see below).\n  - `_repr_jpeg_`: return raw JPEG data, or a tuple (see below).\n  - `_repr_png_`: return raw PNG data, or a tuple (see below).\n  - `_repr_svg_`: return raw SVG data as a string, or a tuple (see below).\n  - `_repr_latex_`: return LaTeX commands in a string surrounded by \"$\",\n                    or a tuple (see below).\n  - `_repr_mimebundle_`: return a full mimebundle containing the mapping\n                         from all mimetypes to data.\n                         Use this for any mime-type not listed above.\n\nThe above functions may also return the object's metadata alonside the\ndata.  If the metadata is available, the functions will return a tuple\ncontaining the data and metadata, in that order.  If there is no metadata\navailable, then the functions will return the data only.\n\nWhen you are directly writing your own classes, you can adapt them for\ndisplay in IPython by following the above approach. But in practice, you\noften need to work with existing classes that you can't easily modify.\n\nYou can refer to the documentation on integrating with the display system in\norder to register custom formatters for already existing types\n(:ref:`integrating_rich_display`).\n\n.. versionadded:: 5.4 display available without import\n.. versionadded:: 6.1 display available without import\n\nSince IPython 5.4 and 6.1 :func:`display` is automatically made available to\nthe user without import. If you are using display in a document that might\nbe used in a pure python context or with older version of IPython, use the\nfollowing import at the top of your file::\n\n    from IPython.display import display",
    "parameters": {
      "type": "object",
      "properties": {
        "objs": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "include": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "exclude": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "metadata": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "transient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "display_id": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "raw": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "clear": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "objs",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Attribution",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "brinson_multi",
        "type": "function",
        "description": "Brinson归因：多期模型",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight_df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "end_day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_SW",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "()",
              "description": " "
            },
            "full_pos": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "distri": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "weight_df",
            "end_day",
            "bench"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "brinson_single",
        "type": "function",
        "description": "Brinson归因：单期模型",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "Series",
              "default": null,
              "description": " "
            },
            "tday0": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "tday1": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_SW",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "()",
              "description": " "
            },
            "full_pos": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "portfolio_weight",
            "tday0",
            "tday1",
            "bench"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Any",
    "type": "class",
    "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BytesIO",
    "type": "class",
    "description": "Buffered I/O implementation using an in-memory bytes buffer.",
    "methods": [],
    "properties": []
  },
  {
    "name": "Client",
    "type": "class",
    "description": "Cache server's client protocol ",
    "methods": [
      {
        "name": "add_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "hit": {
              "type": "int",
              "default": null,
              "description": " "
            },
            "req_time": {
              "type": "float",
              "default": null,
              "description": " "
            },
            "tot_time": {
              "type": "float",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name",
            "hit",
            "req_time",
            "tot_time"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "api_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "call",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "data": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "data"
          ]
        },
        "return": {
          "type": "typing.Any",
          "description": " "
        }
      },
      {
        "name": "df_to_series",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cached",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "param": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "param"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_ex",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "obj": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "out": {
              "type": "str",
              "default": "df",
              "description": " "
            }
          },
          "required": [
            "obj",
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "mod_codes",
        "type": "function",
        "description": "处理改股票代码的情况，只有get series by one date时才处理，如检测到新股票代码则添加旧代码 ",
        "parameters": {
          "type": "object",
          "properties": {
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "codes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "ModCode",
    "type": "class",
    "description": "ModCode(old, new, date)",
    "methods": [],
    "properties": []
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "parse_codes",
    "type": "function",
    "description": "返回List[str]",
    "parameters": {
      "type": "object",
      "properties": {
        "codes": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "codes"
      ]
    },
    "return": {
      "type": "typing.Optional[typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "parse_dates",
    "type": "function",
    "description": "返回字符串‘20190101-20190202’表示日期范围，返回List[str]表示日期列表 ",
    "parameters": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "verify": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "max_allowed_dt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "dates"
      ]
    },
    "return": {
      "type": "typing.Union[NoneType, str, typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "Any",
    "type": "class",
    "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BytesIO",
    "type": "class",
    "description": "Buffered I/O implementation using an in-memory bytes buffer.",
    "methods": [],
    "properties": []
  },
  {
    "name": "Client",
    "type": "class",
    "description": "Cache server's client protocol ",
    "methods": [
      {
        "name": "add_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "hit": {
              "type": "int",
              "default": null,
              "description": " "
            },
            "req_time": {
              "type": "float",
              "default": null,
              "description": " "
            },
            "tot_time": {
              "type": "float",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name",
            "hit",
            "req_time",
            "tot_time"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "api_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "call",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "data": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "data"
          ]
        },
        "return": {
          "type": "typing.Any",
          "description": " "
        }
      },
      {
        "name": "df_to_series",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cached",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "param": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "param"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_ex",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "obj": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "out": {
              "type": "str",
              "default": "df",
              "description": " "
            }
          },
          "required": [
            "obj",
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "mod_codes",
        "type": "function",
        "description": "处理改股票代码的情况，只有get series by one date时才处理，如检测到新股票代码则添加旧代码 ",
        "parameters": {
          "type": "object",
          "properties": {
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "codes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "ModCode",
    "type": "class",
    "description": "ModCode(old, new, date)",
    "methods": [],
    "properties": []
  },
  {
    "name": "get_factor",
    "type": "function",
    "description": "factorname = 'CLOSE'\ndates = '20231201-20231231'",
    "parameters": {
      "type": "object",
      "properties": {
        "factorname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorname",
        "dates"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "parse_codes",
    "type": "function",
    "description": "返回List[str]",
    "parameters": {
      "type": "object",
      "properties": {
        "codes": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "codes"
      ]
    },
    "return": {
      "type": "typing.Optional[typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "parse_dates",
    "type": "function",
    "description": "返回字符串‘20190101-20190202’表示日期范围，返回List[str]表示日期列表 ",
    "parameters": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "verify": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "max_allowed_dt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "dates"
      ]
    },
    "return": {
      "type": "typing.Union[NoneType, str, typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "LocalData",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "get_factor",
        "type": "function",
        "description": "必须返回copy() ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "Union",
              "default": "None",
              "description": " "
            },
            "codes": {
              "type": "List",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "int",
              "default": "0",
              "description": " "
            },
            "func_trade_days": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "factor_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "register",
        "type": "function",
        "description": "注册本地因子数据; set `factor_name = None` to list all; set `df_factor = None` to de-register ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "str",
              "default": "None",
              "description": " "
            },
            "df_factor": {
              "type": "DataFrame",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "FactorProcessParams",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_params",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_params": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_params"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_param",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_alias",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_alias": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_alias"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_defaults",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_defaults": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_defaults"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "df_table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "BackTestMagic",
    "type": "class",
    "description": "Base class for implementing magic functions.\n\nShell functions which can be reached as %function_name. All magic\nfunctions should accept a string, which they can parse for their own\nneeds. This can make some functions easier to type, eg `%cd ../`\nvs. `%cd(\"../\")`\n\nClasses providing magic functions need to subclass this class, and they\nMUST:\n\n- Use the method decorators `@line_magic` and `@cell_magic` to decorate\n  individual methods as magic functions, AND\n\n- Use the class decorator `@magics_class` to ensure that the magic\n  methods are properly registered at the instance level upon instance\n  initialization.\n\nSee :mod:`magic_functions` for examples of actual implementation classes.",
    "methods": [
      {
        "name": "arg_err",
        "type": "function",
        "description": "Print docstring if incorrect arguments were passed",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt",
        "type": "function",
        "description": "::\n\n  %bt [--out OUT]\n\n运行回测策略，详见文档“通用策略回测框架”中的说明\n\noptions:\n  --out OUT, -o OUT  指定回测报告结果的变量名，默认为\"report\"",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt_load",
        "type": "function",
        "description": "::\n\n  %bt_load [--strategy STRATEGY] [--code CODE] [--history HISTORY] [--keyword KEYWORD] [--user [USER]]\n\n从数据库加载已保存的策略代码到本单元格，也可以搜索策略代码。\n\n基本用法示例：\n    %bt_load           不带任何参数，列出可加载的策略列表\n    %bt_load -s 123    指定加载id为123的策略的最新代码\n\n扩展用法示例：\n    %bt_load -u        列出自己创建的策略列表\n    %bt_load -u lixy   列出用户lixy创建的策略列表\n    %bt_load -k 估值   列出策略名称或描述里包含\"估值\"的策略\n\n    %bt_load -h 123    列出id为123的策略的所有版本的历史代码\n    %bt_load -c 666    指定加载代码id为666的历史代码\n\noptions:\n  --strategy STRATEGY, -s STRATEGY\n                        根据策略id取策略的最新代码\n  --code CODE, -c CODE  根据代码id取代码\n  --history HISTORY, -h HISTORY\n                        取策略id的历史代码列表\n  --keyword KEYWORD, -k KEYWORD\n                        搜索策略名称或描述\n  --user <[USER]>, -u <[USER]>\n                        只列出某个用户的策略(不指定用户名则只列出自己的策略)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt_save",
        "type": "function",
        "description": "::\n\n  %bt_save [--name NAME] [--desc DESC] [--public PUBLIC] [--strategy STRATEGY] [--delete DELETE]\n\n将本单元格的策略代码保存到数据库中，根据参数不同可以是创建新策略或更新已存在的策略。\n\n基本用法示例(两个%号的命令为操作整个单元格的内容，只保存策略不运行，请到投研平台图形界面手动重新运行策略)：\n    %%bt_save -n 沪深300A          将本单元格的策略代码保存到一个新建策略，并将策略命名为\"沪深300A\"\n    %%bt_save -s 123               用本单元格的策略代码更新一个已存在的id为123的策略\n\n扩展用法示例(一个%号的命令是只操作一行的命令，修改策略属性也可以在投研平台用图形界面操作)：\n    %bt_save -s 123 -n 沪深300B    更新一个已存在的id为123的策略，将名称改为\"沪深300B\"\n    %bt_save -s 123 -d 策略描述B   更新一个已存在的id为123的策略，将描述改为\"策略描述B\"\n    %bt_save -s 123 -p Y           更新一个已存在的id为123的策略，将策略设为公开的(其他用户也可以访问但不能修改)\n\n    %bt_save --delete 123          删除id为123的策略\n\noptions:\n  --name NAME, -n NAME  策略名称(≤50字符)\n  --desc DESC, -d DESC  策略描述(≤1000字符)\n  --public PUBLIC, -p PUBLIC\n                        是否公开，一个字符: Y=公开，N=不公开(默认值)\n  --strategy STRATEGY, -s STRATEGY\n                        已存在的策略id(更新策略)\n  --delete DELETE       根据策略id删除策略",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "class_config_rst_doc",
        "type": "function",
        "description": "Generate rST documentation for this class' config options.\n\nExcludes traits defined on parent classes.",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "str",
          "description": " "
        }
      },
      {
        "name": "default_option",
        "type": "function",
        "description": "Make an entry in the options_table for fn, with value optstr",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fn": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "optstr": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fn",
            "optstr"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_latex",
        "type": "function",
        "description": "Format a string for latex inclusion.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strng": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strng"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_traceback",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "bt_lines": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "bt_lines"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "hold_trait_notifications",
        "type": "function",
        "description": "Context manager for bundling trait change notifications and cross\nvalidation.\n\nUse this when doing multiple trait assignments (init, config), to avoid\nrace conditions in trait notifiers requesting other trait values.\nAll trait notifications will fire after all values have been assigned.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "t.Any",
          "description": " "
        }
      },
      {
        "name": "parse_options",
        "type": "function",
        "description": "Parse options passed to an argument string.\n\nThe interface is similar to that of :func:`getopt.getopt`, but it\nreturns a :class:`~IPython.utils.struct.Struct` with the options as keys\nand the stripped argument string still as a string.\n\narg_str is quoted as a true sys.argv vector by using shlex.split.\nThis allows us to easily expand variables, glob files, quote\narguments, etc.\n\nParameters\n----------\narg_str : str\n    The arguments to parse.\nopt_str : str\n    The options specification.\nmode : str, default 'string'\n    If given as 'list', the argument string is returned as a list (split\n    on whitespace) instead of a string.\nlist_all : bool, default False\n    Put all option values in lists. Normally only options\n    appearing more than once are put in a list.\nposix : bool, default True\n    Whether to split the input line in POSIX mode or not, as per the\n    conventions outlined in the :mod:`shlex` module from the standard\n    library.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "arg_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "opt_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "long_opts": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "arg_str",
            "opt_str",
            "long_opts",
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "section_names",
        "type": "function",
        "description": "return section names as a list",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "list[str]",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "cross_validation_lock",
        "type": "property",
        "description": "A contextmanager for running a block with our cross validation lock set\nto True.\n\nAt the end of the block, the lock's value is restored to its value\nprior to entering the block."
      }
    ]
  },
  {
    "name": "Magics",
    "type": "class",
    "description": "Base class for implementing magic functions.\n\nShell functions which can be reached as %function_name. All magic\nfunctions should accept a string, which they can parse for their own\nneeds. This can make some functions easier to type, eg `%cd ../`\nvs. `%cd(\"../\")`\n\nClasses providing magic functions need to subclass this class, and they\nMUST:\n\n- Use the method decorators `@line_magic` and `@cell_magic` to decorate\n  individual methods as magic functions, AND\n\n- Use the class decorator `@magics_class` to ensure that the magic\n  methods are properly registered at the instance level upon instance\n  initialization.\n\nSee :mod:`magic_functions` for examples of actual implementation classes.",
    "methods": [
      {
        "name": "arg_err",
        "type": "function",
        "description": "Print docstring if incorrect arguments were passed",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "class_config_rst_doc",
        "type": "function",
        "description": "Generate rST documentation for this class' config options.\n\nExcludes traits defined on parent classes.",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "str",
          "description": " "
        }
      },
      {
        "name": "default_option",
        "type": "function",
        "description": "Make an entry in the options_table for fn, with value optstr",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fn": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "optstr": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fn",
            "optstr"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_latex",
        "type": "function",
        "description": "Format a string for latex inclusion.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strng": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strng"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "hold_trait_notifications",
        "type": "function",
        "description": "Context manager for bundling trait change notifications and cross\nvalidation.\n\nUse this when doing multiple trait assignments (init, config), to avoid\nrace conditions in trait notifiers requesting other trait values.\nAll trait notifications will fire after all values have been assigned.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "t.Any",
          "description": " "
        }
      },
      {
        "name": "parse_options",
        "type": "function",
        "description": "Parse options passed to an argument string.\n\nThe interface is similar to that of :func:`getopt.getopt`, but it\nreturns a :class:`~IPython.utils.struct.Struct` with the options as keys\nand the stripped argument string still as a string.\n\narg_str is quoted as a true sys.argv vector by using shlex.split.\nThis allows us to easily expand variables, glob files, quote\narguments, etc.\n\nParameters\n----------\narg_str : str\n    The arguments to parse.\nopt_str : str\n    The options specification.\nmode : str, default 'string'\n    If given as 'list', the argument string is returned as a list (split\n    on whitespace) instead of a string.\nlist_all : bool, default False\n    Put all option values in lists. Normally only options\n    appearing more than once are put in a list.\nposix : bool, default True\n    Whether to split the input line in POSIX mode or not, as per the\n    conventions outlined in the :mod:`shlex` module from the standard\n    library.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "arg_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "opt_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "long_opts": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "arg_str",
            "opt_str",
            "long_opts",
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "section_names",
        "type": "function",
        "description": "return section names as a list",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "list[str]",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "cross_validation_lock",
        "type": "property",
        "description": "A contextmanager for running a block with our cross validation lock set\nto True.\n\nAt the end of the block, the lock's value is restored to its value\nprior to entering the block."
      }
    ]
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as cell magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a cell magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a cell magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a cell magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipython",
    "type": "function",
    "description": "Get the global InteractiveShell instance.\n\nReturns None if no InteractiveShell instance is registered.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as line_cell magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a line_cell magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a line_cell magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a line_cell magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as line magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a line magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a line magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a line magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "load_ipython_extension",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "ipython": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "ipython"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magics_class",
    "type": "function",
    "description": "Class decorator for all subclasses of the main Magics class.\n\nAny class that subclasses Magics *must* also apply this decorator, to\nensure that all the methods that have been decorated as line/cell magics\nget correctly registered in the class instance.  This is necessary because\nwhen method decorators run, the class does not exist yet, so they\ntemporarily store their information into a module global.  Application of\nthis class decorator copies that global data to the class instance and\nclears the global.\n\nObviously, this mechanism is not thread-safe, which means that the\n*creation* of subclasses of Magic should only be done in a single-thread\ncontext.  Instantiation of the classes has no restrictions.  Given that\nthese classes are typically created at IPython startup time and before user\napplication code becomes active, in practice this should not pose any\nproblems.",
    "parameters": {
      "type": "object",
      "properties": {
        "cls": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "cls"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "needs_local_scope",
    "type": "function",
    "description": "Decorator to mark magic functions which need to local scope to run.",
    "parameters": {
      "type": "object",
      "properties": {
        "func": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "func"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "unload_ipython_extension",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "ipython": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "ipython"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "FactorProcessParams",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_params",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_params": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_params"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_param",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_alias",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_alias": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_alias"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_defaults",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_defaults": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_defaults"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "df_table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "FactorStore",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_day",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "is_temp_day": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "is_temp_day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "add_factor_value",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "rank_ic": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "factor_name",
            "factor_series",
            "rank_ic"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_values_and_ic",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "IC_Rule",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "allow_fallback",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "allow": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "allow"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "half_life_weights",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "N": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "H": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "N",
            "H"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "max_ir_weights",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df_ic": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "df_ic"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "min_periods",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "combine_factor",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "fac_series_dict": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "df_ic": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "weighting": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sr_conf_weight": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sr_conf_direction": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "orthogonalize": {
          "type": "bool",
          "default": null,
          "description": " "
        },
        "logger": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fac_name": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "fac_series_dict",
        "df_ic",
        "weighting",
        "sr_conf_weight",
        "sr_conf_direction",
        "orthogonalize",
        "logger",
        "fac_name"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_alpha_model",
    "type": "function",
    "description": "按调仓日权重回测\n\nArgs:\n    config: 策略运行参数\n    alpha_model_config: Alpha模型的参数\n    portfolio_construct_config: 组合构建参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "alpha_model_config": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "portfolio_construct_config": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "args": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "args"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_analyze_single_factor",
    "type": "function",
    "description": "单因子分析\n\nArgs:\n    config: 策略通用配置参数\n    extra_config: 因子分析参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "extra_config": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_single_factor",
    "type": "function",
    "description": "单因子回测\n\nArgs:\n    config: 策略通用配置参数\n    factor_conf: 被测因子配置\n    portfolio_construct_config: 组合构建参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "factor_conf": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "portfolio_construct_config": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "DataApi",
    "type": "class",
    "description": "GFQuant DataApi",
    "methods": [
      {
        "name": "get_factor_info",
        "type": "function",
        "description": "取因子信息表\n\nArgs:\n    factor_class (str): 匹配因子大类名称(估值、成长、盈利质量等)和分类(alpha, market, period等)，不区分大小写\n    keyword (str): 在因子名称、因子描述中搜索的关键词，不区分大小写\n    compact (bool): 是否只返回常用的信息列\n\nReturns:\n    :obj:`pandas.DataFrame`: 因子信息表\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_info('盈利质量')\n    >>> api.get_factor_info('alpha', keyword='YOY')\n    >>> api.get_factor_info('user')  # 用户自定义因子",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_class": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "compact": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_alpha_factor_name_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_asset_daily",
        "type": "function",
        "description": "获取资产日度数据：因子暴露、特质风险",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_barra_factor_name",
        "type": "function",
        "description": "        \n        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor",
        "type": "function",
        "description": "取因子数据。 alpha因子、行情数据、状态数据都用统一的接口取数。\n\nArgs:\n    factor_name (str): 因子名称或列表，如'Q_EPS', 'CLOSE,CLOSE_ADJ'\n    dates (str or list): 日期字符串或列表，如'20181012-20181024'、'20181008,20181013,20181024'、[20190513, 20190603]\n    codes (str or list, optional): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    fill (int): 如果当天没有因子数据，是否取更早日期的数据填充，默认为0不填充，正整数n为最多往前看n个交易日取最新值填充;\n                仅当dates时日期列表时有效，若dates是日期范围(如'20181012-20181024')则fill参数无效\n    out (str): 'df'/'series'，如果数据只有一行，可选择返回DataFrame或Series\n    batch (int): 按batch指定的交易日数量分批取数\n\nReturns:\n    :obj:`pd.DataFrame` or :obj:`pd.Series` or None: 因子数据DataFrame，其index为日期，columns为证券代码。\n    如果factor_name同时指定多个因子，则columns为2层的MultiIndex(因子名称, 证券代码)\n\nRaises:\n    ValueError: 请求参数错误\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor('EP', '20180102, 20180201, 20180301')\n    >>> api.get_factor('CLOSE,CLOSE_ADJ,AMOUNT', '20180201-20180301', '000001.SZ, 600000.SH')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "out": {
              "type": "any",
              "default": "df",
              "description": " "
            },
            "batch": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "factor_name",
            "dates",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cov",
        "type": "function",
        "description": "因子收益率协方差：日度\n        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_info",
        "type": "function",
        "description": "取因子信息表\n\nArgs:\n    factor_class (str): 匹配因子大类名称(估值、成长、盈利质量等)和分类(alpha, market, period等)，不区分大小写\n    keyword (str): 在因子名称、因子描述中搜索的关键词，不区分大小写\n    compact (bool): 是否只返回常用的信息列\n\nReturns:\n    :obj:`pandas.DataFrame`: 因子信息表\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_info('盈利质量')\n    >>> api.get_factor_info('alpha', keyword='YOY')\n    >>> api.get_factor_info('user')  # 用户自定义因子",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_class": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "compact": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_name_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_return",
        "type": "function",
        "description": "        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_series",
        "type": "function",
        "description": "取一个日期的一个因子数据，返回一个pandas.Series；可选因子中性化处理。\n\n注意：当取Barra风格因子和非alpha因子时，请勿指定 `neutral=True` 。因为Barra因子的原始值已标准化过，非alpha因子标准化处理没有意义。\n\nArgs:\n    factor (str or Series): 因子名称或因子原始值的Series\n    day (datetime or str): 表示一个日期\n    codes (str or list): 股票代码列表，如'000001.SZ, 600000.SH'\n    fill (int): 如果当天没有因子数据，是否用更早的数据填充，默认为0不填充，正整数表示最多往前取多少天，同 :obj:`get_factor()` 的 `fill` 参数，仅当 `factor` 参数为因子名称时有效。\n                特殊处理：当day为一个非交易日日期，即使fill=0时也会取day前推最后一个交易日的因子值\n    universe (str or callable): 选样空间，默认值None，可选值：['ALL', 'HS300', 'ZZ500', 'ZZ800', 'ZZ1000', 'CYB', 'H50'];\n        如为函数，则其形式为 *func(date, DataApi) -> pd.Series*, 返回Series的index为股票代码, value为bool值(或value>0)表示对应的股票是否被选入股票池。\n        (参见  `自定义选股池 <doc_data_api.ipynb#自定义选股池>`_ )\n\n    exclude (bool or dict): 是否剔除新股/ST/停牌股票等，默认None(不剔除)。如为True, 则使用默认剔除条件: `dict(no_new=120, no_st=True, no_suspend=True)`;\n        也可以设置为自定义剔除参数组合，如只剔除停牌: `exclude={\"no_suspend\": True}`。dict可选参数说明：\n\n        * **no_new** (*bool or int*): 是否剔除新股，ex_new=120表示剔除上市交易日不超过120天的股票(如True,默认为120)\n        * **no_st** (*bool*): 是否剔除ST股票\n        * **no_suspend** (*bool*): 是否剔除停牌股票\n\n    neutral (bool or dict): 是否做因子中性化处理，默认False(返回因子原始值); 如为True, 则使用以下6个参数的默认值，也即最常用的中性化处理参数组合来处理因子原始值并返回处理后的值。\n        如其中某些参数不使用默认值可使用自定义参数组合，如只做log和zscore: `neutral=dict(log=True, zscore=True)`\n\n        * **log** (*bool*): 是否做log处理(自然对数)，一般在处理市值类因子时选用，默认False\n        * **outlier** (*bool*): 是否去极值(MAD处理)，默认True\n        * **sector_fill** (*bool or str or float*): 分行业填充缺失值的方式，默认为用行业中值填充('median'或True)，还可以用'min'/'max'/'mean'或直接指定一个用于填充的数值(如0); None则不填充\n        * **pre_neu** (*str*): 前置处理，默认None。可选 'zscore', 'rank'\n        * **sector_neu** (*bool or str*): 做行业中性使用的因子，默认为中信一级行业('LEVEL_1_CITIC'或True); None则不做行业中性\n        * **size_neu** (*bool or str*): 做市值中性使用的因子，默认为总市值('MV'或True); None则不做市值中性\n        * **zscore** (*bool*): 是否做Z-Score变换，默认True\n\nReturns:\n    :obj:`Series` or None: 因子数据Series，其index为证券代码，values为因子值。\n\nRaises:\n    ValueError: 请求参数错误，或结果不是一维的Series\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_series('VOLUME', '20190531')\n    >>> api.get_factor_series('Q_EP', '20190531', universe='HS300', exclude=True, neutral=True)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "universe": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "exclude": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "factor",
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_summary",
        "type": "function",
        "description": "(Experimental) 取一段时间内系统公共因子已预先计算好的分组收益表现汇总，返回一个pandas.DataFrame。\n返回结果等同于量化投研平台上的“因子分析——因子表现汇总”中的因子表现数据。\n\nArgs:\n    dates: 指定一个时间段，格式如'20210101-20210131'\n    stock_pool: 选择股票池，可选'ALL'/'HS300'/'ZZ500'/'ZZ1000'/'CYB'\n    style: 取大类因子数据：True，取细分因子数据：False\n    neutral: 是否将因子中性化处理, True/False\n\nReturns:\n    :obj:`DataFrame` or None: 返回因子表现汇总结果。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "stock_pool": {
              "type": "any",
              "default": "ALL",
              "description": " "
            },
            "style": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "dates"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_realtime_price",
        "type": "function",
        "description": "实时行情 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_rpvalue",
        "type": "function",
        "description": "\"(Experimental) 取报告期数据(report-period value)。\n\nArgs:\n    names (str): 报告期数据的名称或列表，如'RP_CASH_EQ', 'RP_Q_PROFIT, RP_Q_OPER_REV'\n    report_periods (str or list, optional): 报告期日期的字符串或列表，如'20181231, 20190630'、['20181231', '20190331']；若report_periods=None,则取day日期能取到的最新报告期数值\n    codes (str or list, optional): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    day (str, optional): 指定本次查询的截止日期，如'20181012'，该日期之后发布的公告数据不会在返回的结果里；默认值为当前日期\n    day_back (str, optional): 查询公告发布日期的回溯日数，默认400。若report_periods=None, 则(day-day_back)日期之前发布的公告不会在返回的结果里。\n\nReturns:\n    :obj:`pd.DataFrame` or None: 报告期数据DataFrame，columns为['report_period', 'code', 'issue_date'] + names\n\nRaises:\n    ValueError: 请求参数错误\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_rpvalue('RP_CASH_EQ', '20181231, 20190630, 20191231', day='20200301')\n    >>> api.get_rpvalue('RP_Q_PROFIT, RP_Q_OPER_REV', '20190630, 20191231', '000001.SZ, 600000.SH')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "names": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "report_periods": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "day": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "day_back": {
              "type": "any",
              "default": "400",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "names",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_rpvalue_series",
        "type": "function",
        "description": "(Experimental) 取一个日期可得的一个报告期数据，返回一个pandas.Series；可选因子中性化处理。\n\nArgs:\n    name (str): 报告期数据名称，如'RP_CASH_EQ'\n    day (str or datetime): 表示当前日期，只取当前日期及之前发布的公告数据\n    codes (str or list): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    report_period (None, str or datetime): 默认值None，返回day日期可得的最新报告期数据；如指定了一个报告期日期，则返回day日期可得的该报告期数据，此时参数fill=True无效\n    fill (bool): 未指定报告期时(report_period==None)，对于没有最新报告期数据的股票，是否用更早报告期的数据填充，默认为不填充(False)\n    universe (str or callable): 同 :obj:`get_factor_series()` 的 `universe` 参数\n    exclude (bool or dict): 同 :obj:`get_factor_series()` 的 `exclude` 参数\n    neutral (bool or dict): 同 :obj:`get_factor_series()` 的 `neutral` 参数\n\nReturns:\n    :obj:`Series` or None: 报告期数据Series，其index为证券代码，values为因子值。\n\nRaises:\n    ValueError: 请求参数错误，或结果不是一维的Series\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_rpvalue_series('RP_Q_PROFIT', '20191231')\n    >>> api.get_rpvalue_series('RP_Q_PROFIT', '20190531', fill=True, universe='HS300', exclude=True)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "report_period": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "universe": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "exclude": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "name",
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_split_sector_series",
        "type": "function",
        "description": "取一个日期的一级行业因子数据，可选将部分一级行业拆分为二级行业\n\nArgs:\n    tday (datetime or str): 表示一个日期\n    sector (str): 一级行业因子名称， 如'LEVEL_1_CITIC'或'LEVEL_1_SW’\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表，如 ['非银行金融', '电子']\n    codes (str or list): 股票代码列表，为None则取全市场股票\n    fill (int): 如果当天没有因子数据，是否用更早的数据填充，默认为0，正整数表示往前取多少天\n\nReturns:\n    :obj:`pd.Series`: 行业分类序列，index为股票名称，value为行业名称\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_series('20190401', 'LEVEL_1_SW').dropna()\n    >>> api.get_split_sector_series('20190401', 'LEVEL_1_SW', split_sectors=['非银金融']).dropna()",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": [
            "tday",
            "sector",
            "split_sectors"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_trade_days",
        "type": "function",
        "description": "取交易日列表。\n\nArgs:\n    start (str): 开始日期, 格式如: '20181008'\n    end (str): 结束日期, 格式如: '20181024'\n    fmt (str): 指定返回日期的格式，'dt'返回日期格式，'str'或'str-'返回字符串格式，'i'返回整数格式\n    arr (bool): False: 返回list; True: 返回np.array\n\nReturns:\n    :obj:`numpy.ndarray`: 日期数组\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_trade_days('20181009', '20181013')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fmt": {
              "type": "any",
              "default": "dt",
              "description": " "
            },
            "arr": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "portfolio_optimize",
        "type": "function",
        "description": "组合优化：控制组合相对于基准的行业/风格因子暴露、个股相对基准的权重偏离、个股的绝对权重、成分股的总权重占比、换手率和跟踪误差等。\n\nArgs:\n    expect_rtn_series (Series): 预期收益序列，index为股票代码，不存在的股票(或value为nan的股票)不可选；\n                                不可选的股票相对基准的偏离(也可能出现一个行业的所有股票都不可选)，均不会导致优化器出错：\n                                1) 不可选的股票，即使它在基准中有权重，也不会受个股权重偏离参数的约束(它在优化结果中的权重一定是0)；\n                                2) 不可选的行业，如果它在基准中有权重，即使不能满足行业暴露参数的约束，也仅会输出一条警告信息。\n    tday (datetime or str): 一个交易日日期\n    bench (str): 基准权重因子名称，目前支持 ‘WEIGHT_[H50|300|500|800|1000|CYBZ|CYB|ALL]’\n    sector (str): 一级行业因子名称，目前支持 'LEVEL_1_[CITIC|SW]'\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表\n    sect_exp_min (float): 组合相对基准的行业暴露下限\n    sect_exp_max (float): 组合相对基准的行业暴露上限\n    sect_exp_min_deviation (dict | callable): 单独设置行业暴露度在'sect_exp_min'基础上的偏离\n    sect_exp_max_deviation (dict | callable): 单独设置行业暴露度在'sect_exp_max'基础上的偏离\n    style_factors (str or list): 可选'LNMV'(自由流通市值的自然对数) 或'BARRA'(10个Barra风格因子)，也可以自定义风格因子(参见 `因子标准化处理 <doc_data_norm.ipynb#自定义标准化处理规则>`_ )\n    style_exp_min (float): 组合相对基准的风格因子暴露下限\n    style_exp_max (float): 组合相对基准的风格因子暴露上限\n    style_exp_min_deviation (dict | callable): 单独设置风格因子暴露度在'style_exp_min'基础上的偏离\n    style_exp_max_deviation (dict | callable): 单独设置风格因子暴露度在'style_exp_max'基础上的偏离\n    rel_weight_min (float): 组合内个股相对基准的的权重偏差下限，默认不限(None)\n    rel_weight_max (float): 组合内个股相对基准的的权重偏差上限\n    abs_weight_min (float): 组合内个股的绝对权重下限\n    abs_weight_max (float): 组合内个股的绝对权重上限\n    bench_pct (float): 组合内基准指数成分股的权重占比下限(上限为1，即全部在基准内选股)\n    turnover_max (float): 组合换手率上限\n    pre_weight (pd.Series): 调仓前的持仓权重，计算组合换手率使用(如无持仓可设为None)\n    trackerr_max (float): 组合跟踪误差上限\n    cov_type : 跟踪误差约束时，优化求解时，采用的方法\n    result_stock_count (int): 组合优化结果可返回的最大股票数量，个股权重按从大到小排序，超过此数量的个股的权重将被收回重新分配\n    result_weight_min (float): 组合优化结果要求的个股最低权重值，低于此值的个股的权重将被收回重新分配\n    result_weight_sum (float): 组合优化结果的总权重，为避免数值计算误差请设定为小于1的数\n    fill_barra (bool): 组合优化时，如果用到Barra因子但当日没有值，是否取前值填充\n    verify_result (bool): 组合优化后，复查结果是否符合约束条件\n    max_stk_nums: 股票数量约束\n\nReturns:\n    :obj:`Series`: 组合优化的结果Series，其index为证券代码，values为权重值。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "expect_rtn_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "any",
              "default": "WEIGHT_300",
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_CITIC",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sect_exp_min": {
              "type": "any",
              "default": "-0.0",
              "description": " "
            },
            "sect_exp_max": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "sect_exp_min_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sect_exp_max_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "style_factors": {
              "type": "any",
              "default": "LNMV",
              "description": " "
            },
            "style_exp_min": {
              "type": "any",
              "default": "-0.0",
              "description": " "
            },
            "style_exp_max": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "style_exp_min_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "style_exp_max_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "rel_weight_min": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "rel_weight_max": {
              "type": "any",
              "default": "0.02",
              "description": " "
            },
            "abs_weight_min": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "abs_weight_max": {
              "type": "any",
              "default": "0.1",
              "description": " "
            },
            "bench_pct": {
              "type": "any",
              "default": "0.8",
              "description": " "
            },
            "turnover_max": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "pre_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "trackerr_max": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "cov_type": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "result_stock_count": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "result_weight_min": {
              "type": "any",
              "default": "0.001",
              "description": " "
            },
            "result_weight_sum": {
              "type": "any",
              "default": "0.9999",
              "description": " "
            },
            "max_stk_nums": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill_barra": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "verify_result": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "expect_rtn_series",
            "tday"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "portfolio_weighting",
        "type": "function",
        "description": "组合加权构建：可选 “不考虑行业加权” 或 “先选股再分行业配权”或“先定行业权重，再行业内选股配权”。\n\nArgs:\n    expect_rtn_series (Series): 预期收益序列，index为股票代码，value为nan的股票不可选\n    tday (datetime or str): 一个交易日日期\n    weighting (str or Series or callable): 股票权重分配方式，支持'equal'(等权)、'score'(使用expect_rtn_series参数的值)\n        或一个函数(def func(score, dataApi) -> pd.Series)，也可以用另一个因子名称作为权重，如'FFMV'即为自由流通市值加权；\n        权重取值只保留非负值\n    top_n (int): 选择前n个股票；如果'sector_first'=True，则在每个行业里选择前n个股票\n    top_pct (float): 选择前(pct*100)%个股票；如果'sector_first'=True，则在每个行业里选择前(pct*100)%个股票(四舍五入)\n    per_sector_weighting (bool): 是否分行业配权重，如为False, 则由此以下的参数都不生效\n    sector_first (bool): 是否先设定行业权重再在行业内选股, False:先选股票再按行业配权重; True:先定行业权重再选股再配权重\n    bench (str): 行业基准权重因子名称，目前支持 ‘WEIGHT_[H50|300|500|800|1000|CYBZ|CYB|ALL]’，以及行业等权'equal_sector'\n    sector (str): 一级行业因子名称，目前支持 'LEVEL_1_[CITIC|SW]'\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表\n    sector_deviation (dict): 行业权重偏离，被拆分的一级行业不能配置，应指定对应二级行业的值\n    final_equal (bool): 分行业选股(也配了权重)的最后，是否最终按每个股票等权配置(如场景：组合要和等权基准比较)\n\nReturns:\n    :obj:`pd.Series`: 组合权重分配结果，其index为证券代码，values为权重值。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "expect_rtn_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weighting": {
              "type": "Union",
              "default": "equal",
              "description": " "
            },
            "top_n": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "top_pct": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "per_sector_weighting": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "sector_first": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "bench": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sector_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "final_equal": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "expect_rtn_series",
            "tday"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_trade_days",
        "type": "function",
        "description": "取交易日列表。\n\nArgs:\n    start (str): 开始日期, 格式如: '20181008'\n    end (str): 结束日期, 格式如: '20181024'\n    fmt (str): 指定返回日期的格式，'dt'返回日期格式，'str'或'str-'返回字符串格式，'i'返回整数格式\n    arr (bool): False: 返回list; True: 返回np.array\n\nReturns:\n    :obj:`numpy.ndarray`: 日期数组\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_trade_days('20181009', '20181013')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fmt": {
              "type": "any",
              "default": "dt",
              "description": " "
            },
            "arr": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "server",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_weight",
    "type": "function",
    "description": "按调仓日权重回测\n\nArgs:\n    config: 策略运行参数\n    weight_df: 类似PMS调仓格式的DataFrame, 需要用到3列：调整日期 证券代码(Wind格式) 持仓权重(日权重之和<=1)，证券类型只支持股票；\n        weight_df也可以通过 config[\"holding\"] 配置(同时weight_df参数必须不指定)\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "weight_df": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run",
    "type": "function",
    "description": "Every module as its globals() so can't use it as GLOBAL variables ",
    "parameters": {
      "type": "object",
      "properties": {
        "code": {
          "type": "str",
          "default": null,
          "description": " "
        },
        "stg_info": {
          "type": "dict",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "code"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Base",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BigInteger",
    "type": "class",
    "description": "A type for bigger ``int`` integers.\n\nTypically generates a ``BIGINT`` in DDL, and otherwise acts like\na normal :class:`.Integer` on the Python side.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "Column",
    "type": "class",
    "description": "Represents a column in a database table.",
    "methods": [
      {
        "name": "all_",
        "type": "function",
        "description": "Produce an :func:`_expression.all_` clause against the\nparent object.\n\nSee the documentation for :func:`_sql.all_` for examples.\n\n.. note:: be sure to not confuse the newer\n    :meth:`_sql.ColumnOperators.all_` method with the **legacy**\n    version of this method, the :meth:`_types.ARRAY.Comparator.all`\n    method that's specific to :class:`_types.ARRAY`, which uses a\n    different calling style.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "any_",
        "type": "function",
        "description": "Produce an :func:`_expression.any_` clause against the\nparent object.\n\nSee the documentation for :func:`_sql.any_` for examples.\n\n.. note:: be sure to not confuse the newer\n    :meth:`_sql.ColumnOperators.any_` method with the **legacy**\n    version of this method, the :meth:`_types.ARRAY.Comparator.any`\n    method that's specific to :class:`_types.ARRAY`, which uses a\n    different calling style.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "asc",
        "type": "function",
        "description": "Produce a :func:`_expression.asc` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "bitwise_not",
        "type": "function",
        "description": "Produce a bitwise NOT operation, typically via the ``~``\noperator.\n\n.. versionadded:: 2.0.2\n\n.. seealso::\n\n    :ref:`operators_bitwise`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "desc",
        "type": "function",
        "description": "Produce a :func:`_expression.desc` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "distinct",
        "type": "function",
        "description": "Produce a :func:`_expression.distinct` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "get_children",
        "type": "function",
        "description": "Return immediate child :class:`.visitors.HasTraverseInternals`\nelements of this :class:`.visitors.HasTraverseInternals`.\n\nThis is used for visit traversal.\n\n\\**kw may contain flags that change the collection that is\nreturned, for example to return a subset of items in order to\ncut down on larger traversals, or to return child items from a\ndifferent context (such as schema-level collections instead of\nclause-level).",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "column_tables": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "nulls_first",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_first` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_first()`` operator is\n   renamed from ``nullsfirst()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_last",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_last` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_last()`` operator is\n   renamed from ``nullslast()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_first",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_first` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_first()`` operator is\n   renamed from ``nullsfirst()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_last",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_last` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_last()`` operator is\n   renamed from ``nullslast()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "anon_key_label",
        "type": "property",
        "description": ".. deprecated:: 1.4 The :attr:`_expression.ColumnElement.anon_key_label` attribute is now private, and the public accessor is deprecated."
      },
      {
        "name": "anon_label",
        "type": "property",
        "description": ".. deprecated:: 1.4 The :attr:`_expression.ColumnElement.anon_label` attribute is now private, and the public accessor is deprecated."
      },
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "entity_namespace",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "expression",
        "type": "property",
        "description": "Return a column expression.\n\nPart of the inspection interface; returns self."
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      }
    ]
  },
  {
    "name": "Date",
    "type": "class",
    "description": "A type for ``datetime.date()`` objects.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "DateTime",
    "type": "class",
    "description": "A type for ``datetime.datetime()`` objects.\n\nDate and time types return objects from the Python ``datetime``\nmodule.  Most DBAPIs have built in support for the datetime\nmodule, with the noted exception of SQLite.  In the case of\nSQLite, date and time types are stored as strings which are then\nconverted back to datetime objects when rows are returned.\n\nFor the time representation within the datetime type, some\nbackends include additional options, such as timezone support and\nfractional seconds support.  For fractional seconds, use the\ndialect-specific datatype, such as :class:`.mysql.TIME`.  For\ntimezone support, use at least the :class:`_types.TIMESTAMP` datatype,\nif not the dialect-specific datatype object.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "Float",
    "type": "class",
    "description": "Type representing floating point types, such as ``FLOAT`` or ``REAL``.\n\nThis type returns Python ``float`` objects by default, unless the\n:paramref:`.Float.asdecimal` flag is set to ``True``, in which case they\nare coerced to ``decimal.Decimal`` objects.\n\nWhen a :paramref:`.Float.precision` is not provided in a\n:class:`_types.Float` type some backend may compile this type as\nan 8 bytes / 64 bit float datatype. To use a 4 bytes / 32 bit float\ndatatype a precision <= 24 can usually be provided or the\n:class:`_types.REAL` type can be used.\nThis is known to be the case in the PostgreSQL and MSSQL dialects\nthat render the type as ``FLOAT`` that's in both an alias of\n``DOUBLE PRECISION``. Other third party dialects may have similar\nbehavior.",
    "methods": [
      {
        "name": "bind_processor",
        "type": "function",
        "description": "Return a conversion function for processing bind values.\n\nReturns a callable which will receive a bind parameter value\nas the sole positional argument and will return a value to\nsend to the DB-API.\n\nIf processing is not necessary, the method should return ``None``.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.bind_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.bind_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_bind_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`\n\n\n:param dialect: Dialect instance in use.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "result_processor",
        "type": "function",
        "description": "Return a conversion function for processing result row values.\n\nReturns a callable which will receive a result row column\nvalue as the sole positional argument and will return a value\nto return to the user.\n\nIf processing is not necessary, the method should return ``None``.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.result_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.result_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_result_value`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`\n\n:param dialect: Dialect instance in use.\n\n:param coltype: DBAPI coltype argument received in cursor.description.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "coltype": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect",
            "coltype"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "ForeignKey",
    "type": "class",
    "description": "Defines a dependency between two columns.\n\n``ForeignKey`` is specified as an argument to a :class:`_schema.Column`\nobject,\ne.g.::\n\n    t = Table(\n        \"remote_table\",\n        metadata,\n        Column(\"remote_id\", ForeignKey(\"main_table.id\")),\n    )\n\nNote that ``ForeignKey`` is only a marker object that defines\na dependency between two columns.   The actual constraint\nis in all cases represented by the :class:`_schema.ForeignKeyConstraint`\nobject.   This object will be generated automatically when\na ``ForeignKey`` is associated with a :class:`_schema.Column` which\nin turn is associated with a :class:`_schema.Table`.   Conversely,\nwhen :class:`_schema.ForeignKeyConstraint` is applied to a\n:class:`_schema.Table`,\n``ForeignKey`` markers are automatically generated to be\npresent on each associated :class:`_schema.Column`, which are also\nassociated with the constraint object.\n\nNote that you cannot define a \"composite\" foreign key constraint,\nthat is a constraint between a grouping of multiple parent/child\ncolumns, using ``ForeignKey`` objects.   To define this grouping,\nthe :class:`_schema.ForeignKeyConstraint` object must be used, and applied\nto the :class:`_schema.Table`.   The associated ``ForeignKey`` objects\nare created automatically.\n\nThe ``ForeignKey`` objects associated with an individual\n:class:`_schema.Column`\nobject are available in the `foreign_keys` collection\nof that column.\n\nFurther examples of foreign key configuration are in\n:ref:`metadata_foreignkeys`.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "target_fullname",
        "type": "property",
        "description": "Return a string based 'column specification' for this\n:class:`_schema.ForeignKey`.\n\nThis is usually the equivalent of the string-based \"tablename.colname\"\nargument first passed to the object's constructor."
      }
    ]
  },
  {
    "name": "Index",
    "type": "class",
    "description": "A table-level INDEX.\n\nDefines a composite (one or more column) INDEX.\n\nE.g.::\n\n    sometable = Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n    )\n\n    Index(\"some_index\", sometable.c.name)\n\nFor a no-frills, single column index, adding\n:class:`_schema.Column` also supports ``index=True``::\n\n    sometable = Table(\n        \"sometable\", metadata, Column(\"name\", String(50), index=True)\n    )\n\nFor a composite index, multiple columns can be specified::\n\n    Index(\"some_index\", sometable.c.name, sometable.c.address)\n\nFunctional indexes are supported as well, typically by using the\n:data:`.func` construct in conjunction with table-bound\n:class:`_schema.Column` objects::\n\n    Index(\"some_index\", func.lower(sometable.c.name))\n\nAn :class:`.Index` can also be manually associated with a\n:class:`_schema.Table`,\neither through inline declaration or using\n:meth:`_schema.Table.append_constraint`.  When this approach is used,\nthe names\nof the indexed columns can be specified as strings::\n\n    Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n        Index(\"some_index\", \"name\", \"address\"),\n    )\n\nTo support functional or expression-based indexes in this form, the\n:func:`_expression.text` construct may be used::\n\n    from sqlalchemy import text\n\n    Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n        Index(\"some_index\", text(\"lower(name)\")),\n    )\n\n.. seealso::\n\n    :ref:`schema_indexes` - General information on :class:`.Index`.\n\n    :ref:`postgresql_indexes` - PostgreSQL-specific options available for\n    the :class:`.Index` construct.\n\n    :ref:`mysql_indexes` - MySQL-specific options available for the\n    :class:`.Index` construct.\n\n    :ref:`mssql_indexes` - MSSQL-specific options available for the\n    :class:`.Index` construct.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      }
    ]
  },
  {
    "name": "Integer",
    "type": "class",
    "description": "A type for ``int`` integers.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "PickleType",
    "type": "class",
    "description": "Holds Python objects, which are serialized using pickle.\n\nPickleType builds upon the Binary type to apply Python's\n``pickle.dumps()`` to incoming objects, and ``pickle.loads()`` on\nthe way out, allowing any pickleable Python object to be stored as\na serialized binary field.\n\nTo allow ORM change events to propagate for elements associated\nwith :class:`.PickleType`, see :ref:`mutable_toplevel`.",
    "methods": [
      {
        "name": "bind_processor",
        "type": "function",
        "description": "Provide a bound value processing function for the\ngiven :class:`.Dialect`.\n\nThis is the method that fulfills the :class:`.TypeEngine`\ncontract for bound value conversion which normally occurs via\nthe :meth:`_types.TypeEngine.bind_processor` method.\n\n.. note::\n\n    User-defined subclasses of :class:`_types.TypeDecorator` should\n    **not** implement this method, and should instead implement\n    :meth:`_types.TypeDecorator.process_bind_param` so that the \"inner\"\n    processing provided by the implementing type is maintained.\n\n:param dialect: Dialect instance in use.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "compare_values",
        "type": "function",
        "description": "Given two values, compare them for equality.\n\nBy default this calls upon :meth:`.TypeEngine.compare_values`\nof the underlying \"impl\", which in turn usually\nuses the Python equals operator ``==``.\n\nThis function is used by the ORM to compare\nan original-loaded value with an intercepted\n\"changed\" value, to determine if a net change\nhas occurred.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "x": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "y": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "x",
            "y"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "result_processor",
        "type": "function",
        "description": "Provide a result value processing function for the given\n:class:`.Dialect`.\n\nThis is the method that fulfills the :class:`.TypeEngine`\ncontract for bound value conversion which normally occurs via\nthe :meth:`_types.TypeEngine.result_processor` method.\n\n.. note::\n\n    User-defined subclasses of :class:`_types.TypeDecorator` should\n    **not** implement this method, and should instead implement\n    :meth:`_types.TypeDecorator.process_result_value` so that the\n    \"inner\" processing provided by the implementing type is maintained.\n\n:param dialect: Dialect instance in use.\n:param coltype: A SQLAlchemy data type",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "coltype": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect",
            "coltype"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "comparator_factory",
        "type": "property",
        "description": "Base class for custom comparison operations defined at the\ntype level.  See :attr:`.TypeEngine.comparator_factory`."
      },
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      },
      {
        "name": "sort_key_function",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "PrimaryKeyConstraint",
    "type": "class",
    "description": "A table-level PRIMARY KEY constraint.\n\nThe :class:`.PrimaryKeyConstraint` object is present automatically\non any :class:`_schema.Table` object; it is assigned a set of\n:class:`_schema.Column` objects corresponding to those marked with\nthe :paramref:`_schema.Column.primary_key` flag::\n\n    >>> my_table = Table(\n    ...     \"mytable\",\n    ...     metadata,\n    ...     Column(\"id\", Integer, primary_key=True),\n    ...     Column(\"version_id\", Integer, primary_key=True),\n    ...     Column(\"data\", String(50)),\n    ... )\n    >>> my_table.primary_key\n    PrimaryKeyConstraint(\n        Column('id', Integer(), table=<mytable>,\n               primary_key=True, nullable=False),\n        Column('version_id', Integer(), table=<mytable>,\n               primary_key=True, nullable=False)\n    )\n\nThe primary key of a :class:`_schema.Table` can also be specified by using\na :class:`.PrimaryKeyConstraint` object explicitly; in this mode of usage,\nthe \"name\" of the constraint can also be specified, as well as other\noptions which may be recognized by dialects::\n\n    my_table = Table(\n        \"mytable\",\n        metadata,\n        Column(\"id\", Integer),\n        Column(\"version_id\", Integer),\n        Column(\"data\", String(50)),\n        PrimaryKeyConstraint(\"id\", \"version_id\", name=\"mytable_pk\"),\n    )\n\nThe two styles of column-specification should generally not be mixed.\nAn warning is emitted if the columns present in the\n:class:`.PrimaryKeyConstraint`\ndon't match the columns that were marked as ``primary_key=True``, if both\nare present; in this case, the columns are taken strictly from the\n:class:`.PrimaryKeyConstraint` declaration, and those columns otherwise\nmarked as ``primary_key=True`` are ignored.  This behavior is intended to\nbe backwards compatible with previous behavior.\n\nFor the use case where specific options are to be specified on the\n:class:`.PrimaryKeyConstraint`, but the usual style of using\n``primary_key=True`` flags is still desirable, an empty\n:class:`.PrimaryKeyConstraint` may be specified, which will take on the\nprimary key column collection from the :class:`_schema.Table` based on the\nflags::\n\n    my_table = Table(\n        \"mytable\",\n        metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"version_id\", Integer, primary_key=True),\n        Column(\"data\", String(50)),\n        PrimaryKeyConstraint(name=\"mytable_pk\", mssql_clustered=True),\n    )",
    "methods": [],
    "properties": [
      {
        "name": "columns_autoinc_first",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "Sequence",
    "type": "class",
    "description": "Represents a named database sequence.\n\nThe :class:`.Sequence` object represents the name and configurational\nparameters of a database sequence.   It also represents\na construct that can be \"executed\" by a SQLAlchemy :class:`_engine.Engine`\nor :class:`_engine.Connection`,\nrendering the appropriate \"next value\" function\nfor the target database and returning a result.\n\nThe :class:`.Sequence` is typically associated with a primary key column::\n\n    some_table = Table(\n        \"some_table\",\n        metadata,\n        Column(\n            \"id\",\n            Integer,\n            Sequence(\"some_table_seq\", start=1),\n            primary_key=True,\n        ),\n    )\n\nWhen CREATE TABLE is emitted for the above :class:`_schema.Table`, if the\ntarget platform supports sequences, a CREATE SEQUENCE statement will\nbe emitted as well.   For platforms that don't support sequences,\nthe :class:`.Sequence` construct is ignored.\n\n.. seealso::\n\n    :ref:`defaults_sequences`\n\n    :class:`.CreateSequence`\n\n    :class:`.DropSequence`",
    "methods": [
      {
        "name": "get_execution_options",
        "type": "function",
        "description": "Get the non-SQL options which will take effect during execution.\n\n.. versionadded:: 1.3\n\n.. seealso::\n\n    :meth:`.Executable.execution_options`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "_ExecuteOptions",
          "description": " "
        }
      },
      {
        "name": "next_value",
        "type": "function",
        "description": "Return a :class:`.next_value` function element\nwhich will render the appropriate increment function\nfor this :class:`.Sequence` within any SQL expression.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Function[int]",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "StrategyCode",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyDaily",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyDividend",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyHold",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyModel",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyRun",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyTrade",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyWeightTarget",
    "type": "class",
    "description": "e.g. 次日均价调仓的策略，可在此需要记录交易下单时的目标权重；本表由上层策略负责保存(而不是像其他表一样由底层策略负责) ",
    "methods": [],
    "properties": []
  },
  {
    "name": "String",
    "type": "class",
    "description": "The base for all string and character types.\n\nIn SQL, corresponds to VARCHAR.\n\nThe `length` field is usually required when the `String` type is\nused within a CREATE TABLE statement, as VARCHAR requires a length\non most databases.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "UniqueConstraint",
    "type": "class",
    "description": "A table-level UNIQUE constraint.\n\nDefines a single column or composite UNIQUE constraint. For a no-frills,\nsingle column constraint, adding ``unique=True`` to the ``Column``\ndefinition is a shorthand equivalent for an unnamed, single column\nUniqueConstraint.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "declarative_base",
    "type": "function",
    "description": ".. deprecated:: 2.0 The ``declarative_base()`` function is now available as :func:`sqlalchemy.orm.declarative_base`. (Background on SQLAlchemy 2.0 at: :ref:`migration_20_toplevel`)",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kw": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg",
        "kw"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "FakeReply",
    "type": "class",
    "description": "FakeReply(status_code, content)",
    "methods": [],
    "properties": []
  },
  {
    "name": "RemoteStrategyAPI",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "get_strategy_code",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "code_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_info",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_perf",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "get_hold": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "run_strategy",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "task_name": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "resume_auto": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_strategy_code",
        "type": "function",
        "description": "同时也是策略的prepare; %bt_save里传入的code只能是str, 在代码中调用时也可以传入list[dict]作为code(+run_backtest) ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "code": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "name": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "description": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "is_public": {
              "type": "str",
              "default": "N",
              "description": " "
            },
            "delete_time": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "run_backtest": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "code"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "stop_strategy",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "message": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rcid",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "k": {
          "type": "any",
          "default": "10",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_neu",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "numeric_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "categorical_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "version": {
          "type": "any",
          "default": "2",
          "description": " "
        }
      },
      "required": [
        "factor_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_orth",
    "type": "function",
    "description": "X是(行业市值中性化后的)因子值矩阵(N×K)，N为股票数量，K为因子数量，orth_X是正交后因子矩阵（N×K）,s是过渡矩阵\n@author: hanjinyang\n@from: chenyt, 2019-04-22; change matrix to np.array, 2019-07-22",
    "parameters": {
      "type": "object",
      "properties": {
        "X": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "orthret": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "X"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.4*3=4.2，不是原方案（因子数据处理方法.docx）中的5.2\n    sector_fill (bool or str or float): 填补缺失值的方法，默认为'median'\n    pre_neu (str): 在中性化回归前对因子值的处理：None, 'zscore', 'rank'\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "pre_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "pre_neu",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure_v1",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.4*3=4.2，不是原方案（因子数据处理方法.docx）中的5.2\n    sector_fill (bool or str or float): 填补缺失值的方法，默认为'median'\n    pre_neu (str): UNUSED\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "pre_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "pre_neu",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "linearly_independent_cols",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "numpy_lstsq",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "y": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "y",
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "numpy_ols",
    "type": "function",
    "description": "Ordinary Least Squares regression using only NumPy.\n\n只求解及计算残差时，不必使用statsmodels.OLS，避免计算r²,summary等其他数据影响速度(如要做t检验/F检验/算P值还是选sm)。\nhttps://jianghaochu.github.io/ordinary-least-squares-regression-in-python-from-scratch.html",
    "parameters": {
      "type": "object",
      "properties": {
        "y": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "y",
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "outlier_mad",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "mad_limit": {
          "type": "any",
          "default": "1.483",
          "description": " "
        },
        "n_mul": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "sector_categorical",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sector_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "z_score",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "data_api_log_reader",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "log_fn": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "log_fn"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rtn_plot",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "bench_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "rtn_series",
        "bench_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "format_date",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "day": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fmt": {
          "type": "any",
          "default": "str-",
          "description": " "
        }
      },
      "required": [
        "day"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "HTML",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "IFrameCanvas",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "update",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "msg": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "finalize": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "msg"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Javascript",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "display",
    "type": "function",
    "description": "Display a Python object in all frontends.\n\nBy default all representations will be computed and sent to the frontends.\nFrontends can decide which representation is used and how.\n\nIn terminal IPython this will be similar to using :func:`print`, for use in richer\nfrontends see Jupyter notebook examples with rich display logic.\n\nParameters\n----------\n*objs : object\n    The Python objects to display.\nraw : bool, optional\n    Are the objects to be displayed already mimetype-keyed dicts of raw display data,\n    or Python objects that need to be formatted before display? [default: False]\ninclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to include in the\n    format data dict. If this is set *only* the format types included\n    in this list will be computed.\nexclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to exclude in the format\n    data dict. If this is set all format types will be computed,\n    except for those included in this argument.\nmetadata : dict, optional\n    A dictionary of metadata to associate with the output.\n    mime-type keys in this dictionary will be associated with the individual\n    representation formats, if they exist.\ntransient : dict, optional\n    A dictionary of transient data to associate with the output.\n    Data in this dict should not be persisted to files (e.g. notebooks).\ndisplay_id : str, bool optional\n    Set an id for the display.\n    This id can be used for updating this display area later via update_display.\n    If given as `True`, generate a new `display_id`\nclear : bool, optional\n    Should the output area be cleared before displaying anything? If True,\n    this will wait for additional output before clearing. [default: False]\n**kwargs : additional keyword-args, optional\n    Additional keyword-arguments are passed through to the display publisher.\n\nReturns\n-------\nhandle: DisplayHandle\n    Returns a handle on updatable displays for use with :func:`update_display`,\n    if `display_id` is given. Returns :any:`None` if no `display_id` is given\n    (default).\n\nExamples\n--------\n>>> class Json(object):\n...     def __init__(self, json):\n...         self.json = json\n...     def _repr_pretty_(self, pp, cycle):\n...         import json\n...         pp.text(json.dumps(self.json, indent=2))\n...     def __repr__(self):\n...         return str(self.json)\n...\n\n>>> d = Json({1:2, 3: {4:5}})\n\n>>> print(d)\n{1: 2, 3: {4: 5}}\n\n>>> display(d)\n{\n  \"1\": 2,\n  \"3\": {\n    \"4\": 5\n  }\n}\n\n>>> def int_formatter(integer, pp, cycle):\n...     pp.text('I'*integer)\n\n>>> plain = get_ipython().display_formatter.formatters['text/plain']\n>>> plain.for_type(int, int_formatter)\n<function _repr_pprint at 0x...>\n>>> display(7-5)\nII\n\n>>> del plain.type_printers[int]\n>>> display(7-5)\n2\n\nSee Also\n--------\n:func:`update_display`\n\nNotes\n-----\nIn Python, objects can declare their textual representation using the\n`__repr__` method. IPython expands on this idea and allows objects to declare\nother, rich representations including:\n\n  - HTML\n  - JSON\n  - PNG\n  - JPEG\n  - SVG\n  - LaTeX\n\nA single object can declare some or all of these representations; all are\nhandled by IPython's display system.\n\nThe main idea of the first approach is that you have to implement special\ndisplay methods when you define your class, one for each representation you\nwant to use. Here is a list of the names of the special methods and the\nvalues they must return:\n\n  - `_repr_html_`: return raw HTML as a string, or a tuple (see below).\n  - `_repr_json_`: return a JSONable dict, or a tuple (see below).\n  - `_repr_jpeg_`: return raw JPEG data, or a tuple (see below).\n  - `_repr_png_`: return raw PNG data, or a tuple (see below).\n  - `_repr_svg_`: return raw SVG data as a string, or a tuple (see below).\n  - `_repr_latex_`: return LaTeX commands in a string surrounded by \"$\",\n                    or a tuple (see below).\n  - `_repr_mimebundle_`: return a full mimebundle containing the mapping\n                         from all mimetypes to data.\n                         Use this for any mime-type not listed above.\n\nThe above functions may also return the object's metadata alonside the\ndata.  If the metadata is available, the functions will return a tuple\ncontaining the data and metadata, in that order.  If there is no metadata\navailable, then the functions will return the data only.\n\nWhen you are directly writing your own classes, you can adapt them for\ndisplay in IPython by following the above approach. But in practice, you\noften need to work with existing classes that you can't easily modify.\n\nYou can refer to the documentation on integrating with the display system in\norder to register custom formatters for already existing types\n(:ref:`integrating_rich_display`).\n\n.. versionadded:: 5.4 display available without import\n.. versionadded:: 6.1 display available without import\n\nSince IPython 5.4 and 6.1 :func:`display` is automatically made available to\nthe user without import. If you are using display in a document that might\nbe used in a pure python context or with older version of IPython, use the\nfollowing import at the top of your file::\n\n    from IPython.display import display",
    "parameters": {
      "type": "object",
      "properties": {
        "objs": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "include": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "exclude": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "metadata": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "transient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "display_id": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "raw": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "clear": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "objs",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "HTML",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Javascript",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "NotebookCanvas",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "update",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "msg": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "finalize": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "msg"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "display",
    "type": "function",
    "description": "Display a Python object in all frontends.\n\nBy default all representations will be computed and sent to the frontends.\nFrontends can decide which representation is used and how.\n\nIn terminal IPython this will be similar to using :func:`print`, for use in richer\nfrontends see Jupyter notebook examples with rich display logic.\n\nParameters\n----------\n*objs : object\n    The Python objects to display.\nraw : bool, optional\n    Are the objects to be displayed already mimetype-keyed dicts of raw display data,\n    or Python objects that need to be formatted before display? [default: False]\ninclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to include in the\n    format data dict. If this is set *only* the format types included\n    in this list will be computed.\nexclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to exclude in the format\n    data dict. If this is set all format types will be computed,\n    except for those included in this argument.\nmetadata : dict, optional\n    A dictionary of metadata to associate with the output.\n    mime-type keys in this dictionary will be associated with the individual\n    representation formats, if they exist.\ntransient : dict, optional\n    A dictionary of transient data to associate with the output.\n    Data in this dict should not be persisted to files (e.g. notebooks).\ndisplay_id : str, bool optional\n    Set an id for the display.\n    This id can be used for updating this display area later via update_display.\n    If given as `True`, generate a new `display_id`\nclear : bool, optional\n    Should the output area be cleared before displaying anything? If True,\n    this will wait for additional output before clearing. [default: False]\n**kwargs : additional keyword-args, optional\n    Additional keyword-arguments are passed through to the display publisher.\n\nReturns\n-------\nhandle: DisplayHandle\n    Returns a handle on updatable displays for use with :func:`update_display`,\n    if `display_id` is given. Returns :any:`None` if no `display_id` is given\n    (default).\n\nExamples\n--------\n>>> class Json(object):\n...     def __init__(self, json):\n...         self.json = json\n...     def _repr_pretty_(self, pp, cycle):\n...         import json\n...         pp.text(json.dumps(self.json, indent=2))\n...     def __repr__(self):\n...         return str(self.json)\n...\n\n>>> d = Json({1:2, 3: {4:5}})\n\n>>> print(d)\n{1: 2, 3: {4: 5}}\n\n>>> display(d)\n{\n  \"1\": 2,\n  \"3\": {\n    \"4\": 5\n  }\n}\n\n>>> def int_formatter(integer, pp, cycle):\n...     pp.text('I'*integer)\n\n>>> plain = get_ipython().display_formatter.formatters['text/plain']\n>>> plain.for_type(int, int_formatter)\n<function _repr_pprint at 0x...>\n>>> display(7-5)\nII\n\n>>> del plain.type_printers[int]\n>>> display(7-5)\n2\n\nSee Also\n--------\n:func:`update_display`\n\nNotes\n-----\nIn Python, objects can declare their textual representation using the\n`__repr__` method. IPython expands on this idea and allows objects to declare\nother, rich representations including:\n\n  - HTML\n  - JSON\n  - PNG\n  - JPEG\n  - SVG\n  - LaTeX\n\nA single object can declare some or all of these representations; all are\nhandled by IPython's display system.\n\nThe main idea of the first approach is that you have to implement special\ndisplay methods when you define your class, one for each representation you\nwant to use. Here is a list of the names of the special methods and the\nvalues they must return:\n\n  - `_repr_html_`: return raw HTML as a string, or a tuple (see below).\n  - `_repr_json_`: return a JSONable dict, or a tuple (see below).\n  - `_repr_jpeg_`: return raw JPEG data, or a tuple (see below).\n  - `_repr_png_`: return raw PNG data, or a tuple (see below).\n  - `_repr_svg_`: return raw SVG data as a string, or a tuple (see below).\n  - `_repr_latex_`: return LaTeX commands in a string surrounded by \"$\",\n                    or a tuple (see below).\n  - `_repr_mimebundle_`: return a full mimebundle containing the mapping\n                         from all mimetypes to data.\n                         Use this for any mime-type not listed above.\n\nThe above functions may also return the object's metadata alonside the\ndata.  If the metadata is available, the functions will return a tuple\ncontaining the data and metadata, in that order.  If there is no metadata\navailable, then the functions will return the data only.\n\nWhen you are directly writing your own classes, you can adapt them for\ndisplay in IPython by following the above approach. But in practice, you\noften need to work with existing classes that you can't easily modify.\n\nYou can refer to the documentation on integrating with the display system in\norder to register custom formatters for already existing types\n(:ref:`integrating_rich_display`).\n\n.. versionadded:: 5.4 display available without import\n.. versionadded:: 6.1 display available without import\n\nSince IPython 5.4 and 6.1 :func:`display` is automatically made available to\nthe user without import. If you are using display in a document that might\nbe used in a pure python context or with older version of IPython, use the\nfollowing import at the top of your file::\n\n    from IPython.display import display",
    "parameters": {
      "type": "object",
      "properties": {
        "objs": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "include": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "exclude": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "metadata": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "transient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "display_id": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "raw": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "clear": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "objs",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Any",
    "type": "class",
    "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
    "methods": [],
    "properties": []
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_trade_days",
    "type": "function",
    "description": "获取交易日历\n参数：fmt:'str',返回字符串序列\n    'i'，返回整数序列\n    'dt'，返回datetime序列\n经典用法：\nstart = '20220101'\nend = '20221101'\ntradedays = pd.Series(api.getTradeCal(start, end, fmt='dt')).sort_values()\nweek_ends = tradedays.groupby(tradedays.dt.strftime('%Y%W')).max()\nmonth_ends = tradedays.groupby(tradedays.dt.strftime('%Y%m')).max()\n#month_ends = tradedays.groupby([tradedays.dt.year,tradedays.dt.month]).max()\nquarter_ends = month_ends.groupby([month_ends.dt.year,(month_ends.dt.month-1)//3]).max()",
    "parameters": {
      "type": "object",
      "properties": {
        "start": {
          "type": "any",
          "default": "20041231",
          "description": " "
        },
        "end": {
          "type": "any",
          "default": "20040101",
          "description": " "
        },
        "fmt": {
          "type": "any",
          "default": "dt",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "parse_codes",
    "type": "function",
    "description": "返回List[str]",
    "parameters": {
      "type": "object",
      "properties": {
        "codes": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "codes"
      ]
    },
    "return": {
      "type": "typing.Optional[typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "parse_dates",
    "type": "function",
    "description": "返回字符串‘20190101-20190202’表示日期范围，返回List[str]表示日期列表 ",
    "parameters": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "verify": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "max_allowed_dt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "dates"
      ]
    },
    "return": {
      "type": "typing.Union[NoneType, str, typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "run_scripts",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "scripts": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "scripts"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "deprecated",
    "type": "function",
    "description": "Used to mark a function as deprecated.\nParameters\n----------\nmsg : str\n    The message to display in the deprecation warning.\nstacklevel : int\n    How far up the stack the warning needs to go, before\n    showing the relevant calling lines.\nUsage\n-----\n@deprecated(msg='function_a is deprecated! Use function_b instead.')\ndef function_a(*args, **kwargs):",
    "parameters": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "stacklevel": {
          "type": "any",
          "default": "2",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "wraps",
    "type": "function",
    "description": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
    "parameters": {
      "type": "object",
      "properties": {
        "wrapped": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "assigned": {
          "type": "any",
          "default": "('__module__', '__name__', '__qualname__', '__doc__', '__annotations__', '__type_params__')",
          "description": " "
        },
        "updated": {
          "type": "any",
          "default": "('__dict__',)",
          "description": " "
        }
      },
      "required": [
        "wrapped"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "read",
    "type": "function",
    "description": "Read a notebook from a file as a NotebookNode of the given version.\n\nThe string can contain a notebook of any version.\nThe notebook will be returned `as_version`, converting, if necessary.\n\nNotebook format errors will be logged.\n\nParameters\n----------\nfp : file or str\n    A file-like object with a read method that returns unicode (use\n    ``io.open()`` in Python 2), or a path to a file.\nas_version : int\n    The version of the notebook format to return.\n    The notebook will be converted, if necessary.\n    Pass nbformat.NO_CONVERT to prevent conversion.\ncapture_validation_error : dict, optional\n    If provided, a key of \"ValidationError\" with a\n    value of the ValidationError instance will be added\n    to the dictionary.\n\nReturns\n-------\nnb : NotebookNode\n    The notebook that was read.",
    "parameters": {
      "type": "object",
      "properties": {
        "fp": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "as_version": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "capture_validation_error": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "fp",
        "as_version",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "extract_pos",
    "type": "function",
    "description": "Extract position values from backtest object as returned by\nget_backtest() on the Quantopian research platform.\n\nParameters\n----------\npositions : pd.DataFrame\n    timeseries containing one row per symbol (and potentially\n    duplicate datetime indices) and columns for amount and\n    last_sale_price.\ncash : pd.Series\n    timeseries containing cash in the portfolio.\n\nReturns\n-------\npd.DataFrame\n    Daily net position values.\n     - See full explanation in tears.create_full_tear_sheet.",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "cash": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions",
        "cash"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_long_short_pos",
    "type": "function",
    "description": "Determines the long and short allocations in a portfolio.\n\nParameters\n----------\npositions : pd.DataFrame\n    The positions that the strategy takes over time.\n\nReturns\n-------\ndf_long_short : pd.DataFrame\n    Long and short allocations as a decimal\n    percentage of the total net liquidation",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_max_median_position_concentration",
    "type": "function",
    "description": "Finds the max and median long and short position concentrations\nin each time period specified by the index of positions.\n\nParameters\n----------\npositions : pd.DataFrame\n    The positions that the strategy takes over time.\n\nReturns\n-------\npd.DataFrame\n    Columns are max long, max short, median long, and median short\n    position concentrations. Rows are timeperiods.",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_percent_alloc",
    "type": "function",
    "description": "Determines a portfolio's allocations.\n\nParameters\n----------\nvalues : pd.DataFrame\n    Contains position values or amounts.\n\nReturns\n-------\nallocations : pd.DataFrame\n    Positions and their allocations.",
    "parameters": {
      "type": "object",
      "properties": {
        "values": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "values"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_sector_exposures",
    "type": "function",
    "description": "Sum position exposures by sector.\n\nParameters\n----------\npositions : pd.DataFrame\n    Contains position values or amounts.\n    - Example\n        index         'AAPL'         'MSFT'        'CHK'        cash\n        2004-01-09    13939.380     -15012.993    -403.870      1477.483\n        2004-01-12    14492.630     -18624.870    142.630       3989.610\n        2004-01-13    -13853.280    13653.640     -100.980      100.000\nsymbol_sector_map : dict or pd.Series\n    Security identifier to sector mapping.\n    Security ids as keys/index, sectors as values.\n    - Example:\n        {'AAPL' : 'Technology'\n         'MSFT' : 'Technology'\n         'CHK' : 'Natural Resources'}\n\nReturns\n-------\nsector_exp : pd.DataFrame\n    Sectors and their allocations.\n    - Example:\n        index         'Technology'    'Natural Resources' cash\n        2004-01-09    -1073.613       -403.870            1477.4830\n        2004-01-12    -4132.240       142.630             3989.6100\n        2004-01-13    -199.640        -100.980            100.0000",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "symbol_sector_map": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions",
        "symbol_sector_map"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_top_long_short_abs",
    "type": "function",
    "description": "Finds the top long, short, and absolute positions.\n\nParameters\n----------\npositions : pd.DataFrame\n    The positions that the strategy takes over time.\ntop : int, optional\n    How many of each to find (default 10).\n\nReturns\n-------\ndf_top_long : pd.DataFrame\n    Top long positions.\ndf_top_short : pd.DataFrame\n    Top short positions.\ndf_top_abs : pd.DataFrame\n    Top absolute positions.",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "top": {
          "type": "any",
          "default": "10",
          "description": " "
        }
      },
      "required": [
        "positions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "compute_cap_exposures",
    "type": "function",
    "description": "Returns arrays of long, short and gross market cap exposures of an\nalgorithm's positions\n\nParameters\n----------\npositions : pd.DataFrame\n    Daily equity positions of algorithm, in dollars.\n    - See full explanation in compute_style_factor_exposures.\n\ncaps : pd.DataFrame\n    Daily Morningstar sector code per asset\n    - See full explanation in create_risk_tear_sheet",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "caps": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions",
        "caps"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "compute_sector_exposures",
    "type": "function",
    "description": "Returns arrays of long, short and gross sector exposures of an algorithm's\npositions\n\nParameters\n----------\npositions : pd.DataFrame\n    Daily equity positions of algorithm, in dollars.\n    - See full explanation in compute_style_factor_exposures.\n\nsectors : pd.DataFrame\n    Daily Morningstar sector code per asset\n    - See full explanation in create_risk_tear_sheet\n\nsector_dict : dict or OrderedDict\n    Dictionary of all sectors\n    - Keys are sector codes (e.g. ints or strings) and values are sector\n      names (which must be strings)\n    - Defaults to Morningstar sectors",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sectors": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_dict": {
          "type": "any",
          "default": "OrderedDict({101: 'Basic Materials', 102: 'Consumer Cyclical', 103: 'Financial Services', 104: 'Real Estate', 205: 'Consumer Defensive', 206: 'Healthcare', 207: 'Utilities', 308: 'Communication Services', 309: 'Energy', 310: 'Industrials', 311: 'Technology'})",
          "description": " "
        }
      },
      "required": [
        "positions",
        "sectors"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "compute_style_factor_exposures",
    "type": "function",
    "description": "Returns style factor exposure of an algorithm's positions\n\nParameters\n----------\npositions : pd.DataFrame\n    Daily equity positions of algorithm, in dollars.\n    - See full explanation in create_risk_tear_sheet\n\nrisk_factor : pd.DataFrame\n    Daily risk factor per asset.\n    - DataFrame with dates as index and equities as columns\n    - Example:\n                     Equity(24   Equity(62\n                       [AAPL])      [ABT])\n    2017-04-03        -0.51284     1.39173\n    2017-04-04        -0.73381     0.98149\n    2017-04-05        -0.90132     1.13981",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "risk_factor": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions",
        "risk_factor"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "compute_volume_exposures",
    "type": "function",
    "description": "Returns arrays of pth percentile of long, short and gross volume exposures\nof an algorithm's held shares\n\nParameters\n----------\nshares_held : pd.DataFrame\n    Daily number of shares held by an algorithm.\n    - See full explanation in create_risk_tear_sheet\n\nvolume : pd.DataFrame\n    Daily volume per asset\n    - See full explanation in create_risk_tear_sheet\n\npercentile : float\n    Percentile to use when computing and plotting volume exposures\n    - See full explanation in create_risk_tear_sheet",
    "parameters": {
      "type": "object",
      "properties": {
        "shares_held": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "volumes": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "percentile": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "shares_held",
        "volumes",
        "percentile"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "partial",
    "type": "class",
    "description": "partial(func, *args, **keywords) - new function with partial application\nof the given arguments and keywords.",
    "methods": [],
    "properties": []
  },
  {
    "name": "plot_cap_exposures_gross",
    "type": "function",
    "description": "Plots outputs of compute_cap_exposures as area charts\n\nParameters\n----------\ngross_exposures : array\n    Arrays of gross market cap exposures (output of compute_cap_exposures).",
    "parameters": {
      "type": "object",
      "properties": {
        "gross_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "gross_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_cap_exposures_longshort",
    "type": "function",
    "description": "Plots outputs of compute_cap_exposures as area charts\n\nParameters\n----------\nlong_exposures, short_exposures : arrays\n    Arrays of long and short market cap exposures (output of\n    compute_cap_exposures).",
    "parameters": {
      "type": "object",
      "properties": {
        "long_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "short_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "long_exposures",
        "short_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_cap_exposures_net",
    "type": "function",
    "description": "Plots outputs of compute_cap_exposures as line graphs\n\nParameters\n----------\nnet_exposures : array\n    Arrays of gross market cap exposures (output of compute_cap_exposures).",
    "parameters": {
      "type": "object",
      "properties": {
        "net_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "net_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_sector_exposures_gross",
    "type": "function",
    "description": "Plots output of compute_sector_exposures as area charts\n\nParameters\n----------\ngross_exposures : arrays\n    Arrays of gross sector exposures (output of compute_sector_exposures).\n\nsector_dict : dict or OrderedDict\n    Dictionary of all sectors\n    - See full description in compute_sector_exposures",
    "parameters": {
      "type": "object",
      "properties": {
        "gross_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_dict": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "gross_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_sector_exposures_longshort",
    "type": "function",
    "description": "Plots outputs of compute_sector_exposures as area charts\n\nParameters\n----------\nlong_exposures, short_exposures : arrays\n    Arrays of long and short sector exposures (output of\n    compute_sector_exposures).\n\nsector_dict : dict or OrderedDict\n    Dictionary of all sectors\n    - See full description in compute_sector_exposures",
    "parameters": {
      "type": "object",
      "properties": {
        "long_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "short_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_dict": {
          "type": "any",
          "default": "OrderedDict({101: 'Basic Materials', 102: 'Consumer Cyclical', 103: 'Financial Services', 104: 'Real Estate', 205: 'Consumer Defensive', 206: 'Healthcare', 207: 'Utilities', 308: 'Communication Services', 309: 'Energy', 310: 'Industrials', 311: 'Technology'})",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "long_exposures",
        "short_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_sector_exposures_net",
    "type": "function",
    "description": "Plots output of compute_sector_exposures as line graphs\n\nParameters\n----------\nnet_exposures : arrays\n    Arrays of net sector exposures (output of compute_sector_exposures).\n\nsector_dict : dict or OrderedDict\n    Dictionary of all sectors\n    - See full description in compute_sector_exposures",
    "parameters": {
      "type": "object",
      "properties": {
        "net_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_dict": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "net_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_style_factor_exposures",
    "type": "function",
    "description": "Plots DataFrame output of compute_style_factor_exposures as a line graph\n\nParameters\n----------\ntot_style_factor_exposure : pd.Series\n    Daily style factor exposures (output of compute_style_factor_exposures)\n    - Time series with decimal style factor exposures\n    - Example:\n        2017-04-24    0.037820\n        2017-04-25    0.016413\n        2017-04-26   -0.021472\n        2017-04-27   -0.024859\n\nfactor_name : string\n    Name of style factor, for use in graph title\n    - Defaults to tot_style_factor_exposure.name",
    "parameters": {
      "type": "object",
      "properties": {
        "tot_style_factor_exposure": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "factor_name": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "tot_style_factor_exposure"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_volume_exposures_gross",
    "type": "function",
    "description": "Plots outputs of compute_volume_exposures as line graphs\n\nParameters\n----------\ngrossed_threshold : pd.Series\n    Series of grossed volume exposures (output of\n    compute_volume_exposures).\n\npercentile : float\n    Percentile to use when computing and plotting volume exposures\n    - See full explanation in create_risk_tear_sheet",
    "parameters": {
      "type": "object",
      "properties": {
        "grossed_threshold": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "percentile": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "grossed_threshold",
        "percentile"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_volume_exposures_longshort",
    "type": "function",
    "description": "Plots outputs of compute_volume_exposures as line graphs\n\nParameters\n----------\nlonged_threshold, shorted_threshold : pd.Series\n    Series of longed and shorted volume exposures (output of\n    compute_volume_exposures).\n\npercentile : float\n    Percentile to use when computing and plotting volume exposures.\n    - See full explanation in create_risk_tear_sheet",
    "parameters": {
      "type": "object",
      "properties": {
        "longed_threshold": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "shorted_threshold": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "percentile": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "longed_threshold",
        "shorted_threshold",
        "percentile"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "adjust_returns_for_slippage",
    "type": "function",
    "description": "Apply a slippage penalty for every dollar traded.\n\nParameters\n----------\nreturns : pd.Series\n    Daily returns of the strategy, noncumulative.\n     - See full explanation in create_full_tear_sheet.\npositions : pd.DataFrame\n    Daily net position values.\n     - See full explanation in create_full_tear_sheet.\ntransactions : pd.DataFrame\n    Prices and amounts of executed trades. One row per trade.\n     - See full explanation in create_full_tear_sheet.\nslippage_bps: int/float\n    Basis points of slippage to apply.\n\nReturns\n-------\npd.Series\n    Time series of daily returns, adjusted for slippage.",
    "parameters": {
      "type": "object",
      "properties": {
        "returns": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "transactions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "slippage_bps": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "returns",
        "positions",
        "transactions",
        "slippage_bps"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_turnover",
    "type": "function",
    "description": " - Value of purchases and sales divided\nby either the actual gross book or the portfolio value\nfor the time step.\n\nParameters\n----------\npositions : pd.DataFrame\n    Contains daily position values including cash.\n    - See full explanation in tears.create_full_tear_sheet\ntransactions : pd.DataFrame\n    Prices and amounts of executed trades. One row per trade.\n    - See full explanation in tears.create_full_tear_sheet\ndenominator : str, optional\n    Either 'AGB' or 'portfolio_value', default AGB.\n    - AGB (Actual gross book) is the gross market\n    value (GMV) of the specific algo being analyzed.\n    Swapping out an entire portfolio of stocks for\n    another will yield 200% turnover, not 100%, since\n    transactions are being made for both sides.\n    - We use average of the previous and the current end-of-period\n    AGB to avoid singularities when trading only into or\n    out of an entire book in one trading period.\n    - portfolio_value is the total value of the algo's\n    positions end-of-period, including cash.\n\nReturns\n-------\nturnover_rate : pd.Series\n    timeseries of portfolio turnover rates.",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "transactions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "denominator": {
          "type": "any",
          "default": "AGB",
          "description": " "
        }
      },
      "required": [
        "positions",
        "transactions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_txn_vol",
    "type": "function",
    "description": "Extract daily transaction data from set of transaction objects.\n\nParameters\n----------\ntransactions : pd.DataFrame\n    Time series containing one row per symbol (and potentially\n    duplicate datetime indices) and columns for amount and\n    price.\n\nReturns\n-------\npd.DataFrame\n    Daily transaction volume and number of shares.\n     - See full explanation in tears.create_full_tear_sheet.",
    "parameters": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "transactions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "make_transaction_frame",
    "type": "function",
    "description": "Formats a transaction DataFrame.\n\nParameters\n----------\ntransactions : pd.DataFrame\n    Contains improperly formatted transactional data.\n\nReturns\n-------\ndf : pd.DataFrame\n    Daily transaction volume and dollar ammount.\n     - See full explanation in tears.create_full_tear_sheet.",
    "parameters": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "transactions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "map_transaction",
    "type": "function",
    "description": "Maps a single transaction row to a dictionary.\n\nParameters\n----------\ntxn : pd.DataFrame\n    A single transaction object to convert to a dictionary.\n\nReturns\n-------\ndict\n    Mapped transaction.",
    "parameters": {
      "type": "object",
      "properties": {
        "txn": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "txn"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "FacetGrid",
    "type": "class",
    "description": "Multi-plot grid for plotting conditional relationships.",
    "methods": [
      {
        "name": "add_legend",
        "type": "function",
        "description": "Draw a legend, maybe placing it outside axes and resizing the figure.\n\nParameters\n----------\nlegend_data : dict\n    Dictionary mapping label names (or two-element tuples where the\n    second element is a label name) to matplotlib artist handles. The\n    default reads from ``self._legend_data``.\ntitle : string\n    Title for the legend. The default reads from ``self._hue_var``.\nlabel_order : list of labels\n    The order that the legend entries should appear in. The default\n    reads from ``self.hue_names``.\nadjust_subtitles : bool\n    If True, modify entries with invisible artists to left-align\n    the labels and set the font size to that of a title.\nkwargs : key, value pairings\n    Other keyword arguments are passed to the underlying legend methods\n    on the Figure or Axes object.\n\nReturns\n-------\nself : Grid instance\n    Returns self for easy chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "legend_data": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "title": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "label_order": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "adjust_subtitles": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "apply",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return self.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "despine",
        "type": "function",
        "description": "Remove axis spines from the facets.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "facet_axis",
        "type": "function",
        "description": "Make the axis identified by these indices active and return it.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "row_i": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "col_j": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "modify_state": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "row_i",
            "col_j"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "facet_data",
        "type": "function",
        "description": "Generator for name indices and data subsets for each facet.\n\nYields\n------\n(i, j, k), data_ijk : tuple of ints, DataFrame\n    The ints provide an index into the {row, col, hue}_names attribute,\n    and the dataframe contains a subset of the full data corresponding\n    to each facet. The generator yields subsets that correspond with\n    the self.axes.flat iterator, or self.axes[i, j] when `col_wrap`\n    is None.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map",
        "type": "function",
        "description": "Apply a plotting function to each facet's subset of the data.\n\nParameters\n----------\nfunc : callable\n    A plotting function that takes data and keyword arguments. It\n    must plot to the currently active matplotlib Axes and take a\n    `color` keyword argument. If faceting on the `hue` dimension,\n    it must also take a `label` keyword argument.\nargs : strings\n    Column names in self.data that identify variables with data to\n    plot. The data for each variable is passed to `func` in the\n    order the variables are specified in the call.\nkwargs : keyword arguments\n    All keyword arguments are passed to the plotting function.\n\nReturns\n-------\nself : object\n    Returns self.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map_dataframe",
        "type": "function",
        "description": "Like ``.map`` but passes args as strings and inserts data in kwargs.\n\nThis method is suitable for plotting with functions that accept a\nlong-form DataFrame as a `data` keyword argument and access the\ndata in that DataFrame using string variable names.\n\nParameters\n----------\nfunc : callable\n    A plotting function that takes data and keyword arguments. Unlike\n    the `map` method, a function used here must \"understand\" Pandas\n    objects. It also must plot to the currently active matplotlib Axes\n    and take a `color` keyword argument. If faceting on the `hue`\n    dimension, it must also take a `label` keyword argument.\nargs : strings\n    Column names in self.data that identify variables with data to\n    plot. The data for each variable is passed to `func` in the\n    order the variables are specified in the call.\nkwargs : keyword arguments\n    All keyword arguments are passed to the plotting function.\n\nReturns\n-------\nself : object\n    Returns self.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "pipe",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return its value.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "refline",
        "type": "function",
        "description": "Add a reference line(s) to each facet.\n\nParameters\n----------\nx, y : numeric\n    Value(s) to draw the line(s) at.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Specifies the color of the reference line(s). Pass ``color=None`` to\n    use ``hue`` mapping.\nlinestyle : str\n    Specifies the style of the reference line(s).\nline_kws : key, value mappings\n    Other keyword arguments are passed to :meth:`matplotlib.axes.Axes.axvline`\n    when ``x`` is not None and :meth:`matplotlib.axes.Axes.axhline` when ``y``\n    is not None.\n\nReturns\n-------\n:class:`FacetGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "x": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "y": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "color": {
              "type": "any",
              "default": ".5",
              "description": " "
            },
            "linestyle": {
              "type": "any",
              "default": "--",
              "description": " "
            },
            "line_kws": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "line_kws"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "savefig",
        "type": "function",
        "description": "Save an image of the plot.\n\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set",
        "type": "function",
        "description": "Set attributes on each subplot Axes.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_axis_labels",
        "type": "function",
        "description": "Set axis labels on the left column and bottom row of the grid.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "x_var": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "y_var": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "clear_inner": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_titles",
        "type": "function",
        "description": "Draw titles either above each facet or on the grid margins.\n\nParameters\n----------\ntemplate : string\n    Template for all titles with the formatting keys {col_var} and\n    {col_name} (if using a `col` faceting variable) and/or {row_var}\n    and {row_name} (if using a `row` faceting variable).\nrow_template:\n    Template for the row variable when titles are drawn on the grid\n    margins. Must have {row_var} and {row_name} formatting keys.\ncol_template:\n    Template for the column variable when titles are drawn on the grid\n    margins. Must have {col_var} and {col_name} formatting keys.\n\nReturns\n-------\nself: object\n    Returns self.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "template": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "row_template": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "col_template": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_xlabels",
        "type": "function",
        "description": "Label the x axis on the bottom row of the grid.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "label": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "clear_inner": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_xticklabels",
        "type": "function",
        "description": "Set x axis tick labels of the grid.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "labels": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "step": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_ylabels",
        "type": "function",
        "description": "Label the y axis on the left column of the grid.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "label": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "clear_inner": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_yticklabels",
        "type": "function",
        "description": "Set y axis tick labels on the left column of the grid.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "labels": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "tick_params",
        "type": "function",
        "description": "Modify the ticks, tick labels, and gridlines.\n\nParameters\n----------\naxis : {'x', 'y', 'both'}\n    The axis on which to apply the formatting.\nkwargs : keyword arguments\n    Additional keyword arguments to pass to\n    :meth:`matplotlib.axes.Axes.tick_params`.\n\nReturns\n-------\nself : Grid instance\n    Returns self for easy chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "axis": {
              "type": "any",
              "default": "both",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "tight_layout",
        "type": "function",
        "description": "Call fig.tight_layout within rect that exclude the legend.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "ax",
        "type": "property",
        "description": "The :class:`matplotlib.axes.Axes` when no faceting variables are assigned."
      },
      {
        "name": "axes",
        "type": "property",
        "description": "An array of the :class:`matplotlib.axes.Axes` objects in the grid."
      },
      {
        "name": "axes_dict",
        "type": "property",
        "description": "A mapping of facet names to corresponding :class:`matplotlib.axes.Axes`.\n\nIf only one of ``row`` or ``col`` is assigned, each key is a string\nrepresenting a level of that variable. If both facet dimensions are\nassigned, each key is a ``({row_level}, {col_level})`` tuple."
      },
      {
        "name": "fig",
        "type": "property",
        "description": "DEPRECATED: prefer the `figure` property."
      },
      {
        "name": "figure",
        "type": "property",
        "description": "Access the :class:`matplotlib.figure.Figure` object underlying the grid."
      },
      {
        "name": "legend",
        "type": "property",
        "description": "The :class:`matplotlib.legend.Legend` object, if present."
      }
    ]
  },
  {
    "name": "JointGrid",
    "type": "class",
    "description": "Grid for drawing a bivariate plot with marginal univariate plots.\n\nMany plots can be drawn by using the figure-level interface :func:`jointplot`.\nUse this class directly when you need more flexibility.",
    "methods": [
      {
        "name": "apply",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return self.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "pipe",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return its value.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "plot",
        "type": "function",
        "description": "Draw the plot by passing functions for joint and marginal axes.\n\nThis method passes the ``kwargs`` dictionary to both functions. If you\nneed more control, call :meth:`JointGrid.plot_joint` and\n:meth:`JointGrid.plot_marginals` directly with specific parameters.\n\nParameters\n----------\njoint_func, marginal_func : callables\n    Functions to draw the bivariate and univariate plots. See methods\n    referenced above for information about the required characteristics\n    of these functions.\nkwargs\n    Additional keyword arguments are passed to both functions.\n\nReturns\n-------\n:class:`JointGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "joint_func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "marginal_func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "joint_func",
            "marginal_func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "plot_joint",
        "type": "function",
        "description": "Draw a bivariate plot on the joint axes of the grid.\n\nParameters\n----------\nfunc : plotting callable\n    If a seaborn function, it should accept ``x`` and ``y``. Otherwise,\n    it must accept ``x`` and ``y`` vectors of data as the first two\n    positional arguments, and it must plot on the \"current\" axes.\n    If ``hue`` was defined in the class constructor, the function must\n    accept ``hue`` as a parameter.\nkwargs\n    Keyword argument are passed to the plotting function.\n\nReturns\n-------\n:class:`JointGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "plot_marginals",
        "type": "function",
        "description": "Draw univariate plots on each marginal axes.\n\nParameters\n----------\nfunc : plotting callable\n    If a seaborn function, it should  accept ``x`` and ``y`` and plot\n    when only one of them is defined. Otherwise, it must accept a vector\n    of data as the first positional argument and determine its orientation\n    using the ``vertical`` parameter, and it must plot on the \"current\" axes.\n    If ``hue`` was defined in the class constructor, it must accept ``hue``\n    as a parameter.\nkwargs\n    Keyword argument are passed to the plotting function.\n\nReturns\n-------\n:class:`JointGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "refline",
        "type": "function",
        "description": "Add a reference line(s) to joint and/or marginal axes.\n\nParameters\n----------\nx, y : numeric\n    Value(s) to draw the line(s) at.\njoint, marginal : bools\n    Whether to add the reference line(s) to the joint/marginal axes.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Specifies the color of the reference line(s).\nlinestyle : str\n    Specifies the style of the reference line(s).\nline_kws : key, value mappings\n    Other keyword arguments are passed to :meth:`matplotlib.axes.Axes.axvline`\n    when ``x`` is not None and :meth:`matplotlib.axes.Axes.axhline` when ``y``\n    is not None.\n\nReturns\n-------\n:class:`JointGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "x": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "y": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "joint": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "marginal": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "color": {
              "type": "any",
              "default": ".5",
              "description": " "
            },
            "linestyle": {
              "type": "any",
              "default": "--",
              "description": " "
            },
            "line_kws": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "line_kws"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "savefig",
        "type": "function",
        "description": "Save an image of the plot.\n\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set",
        "type": "function",
        "description": "Set attributes on each subplot Axes.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_axis_labels",
        "type": "function",
        "description": "Set axis labels on the bivariate axes.\n\nParameters\n----------\nxlabel, ylabel : strings\n    Label names for the x and y variables.\nkwargs : key, value mappings\n    Other keyword arguments are passed to the following functions:\n\n    - :meth:`matplotlib.axes.Axes.set_xlabel`\n    - :meth:`matplotlib.axes.Axes.set_ylabel`\n\nReturns\n-------\n:class:`JointGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "xlabel": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "ylabel": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "fig",
        "type": "property",
        "description": "DEPRECATED: prefer the `figure` property."
      },
      {
        "name": "figure",
        "type": "property",
        "description": "Access the :class:`matplotlib.figure.Figure` object underlying the grid."
      }
    ]
  },
  {
    "name": "PairGrid",
    "type": "class",
    "description": "Subplot grid for plotting pairwise relationships in a dataset.\n\nThis object maps each variable in a dataset onto a column and row in a\ngrid of multiple axes. Different axes-level plotting functions can be\nused to draw bivariate plots in the upper and lower triangles, and the\nmarginal distribution of each variable can be shown on the diagonal.\n\nSeveral different common plots can be generated in a single line using\n:func:`pairplot`. Use :class:`PairGrid` when you need more flexibility.\n\nSee the :ref:`tutorial <grid_tutorial>` for more information.",
    "methods": [
      {
        "name": "add_legend",
        "type": "function",
        "description": "Draw a legend, maybe placing it outside axes and resizing the figure.\n\nParameters\n----------\nlegend_data : dict\n    Dictionary mapping label names (or two-element tuples where the\n    second element is a label name) to matplotlib artist handles. The\n    default reads from ``self._legend_data``.\ntitle : string\n    Title for the legend. The default reads from ``self._hue_var``.\nlabel_order : list of labels\n    The order that the legend entries should appear in. The default\n    reads from ``self.hue_names``.\nadjust_subtitles : bool\n    If True, modify entries with invisible artists to left-align\n    the labels and set the font size to that of a title.\nkwargs : key, value pairings\n    Other keyword arguments are passed to the underlying legend methods\n    on the Figure or Axes object.\n\nReturns\n-------\nself : Grid instance\n    Returns self for easy chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "legend_data": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "title": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "label_order": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "adjust_subtitles": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "apply",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return self.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map",
        "type": "function",
        "description": "Plot with the same function in every subplot.\n\nParameters\n----------\nfunc : callable plotting function\n    Must take x, y arrays as positional arguments and draw onto the\n    \"currently active\" matplotlib Axes. Also needs to accept kwargs\n    called ``color`` and  ``label``.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map_diag",
        "type": "function",
        "description": "Plot with a univariate function on each diagonal subplot.\n\nParameters\n----------\nfunc : callable plotting function\n    Must take an x array as a positional argument and draw onto the\n    \"currently active\" matplotlib Axes. Also needs to accept kwargs\n    called ``color`` and  ``label``.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map_lower",
        "type": "function",
        "description": "Plot with a bivariate function on the lower diagonal subplots.\n\nParameters\n----------\nfunc : callable plotting function\n    Must take x, y arrays as positional arguments and draw onto the\n    \"currently active\" matplotlib Axes. Also needs to accept kwargs\n    called ``color`` and  ``label``.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map_offdiag",
        "type": "function",
        "description": "Plot with a bivariate function on the off-diagonal subplots.\n\nParameters\n----------\nfunc : callable plotting function\n    Must take x, y arrays as positional arguments and draw onto the\n    \"currently active\" matplotlib Axes. Also needs to accept kwargs\n    called ``color`` and  ``label``.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map_upper",
        "type": "function",
        "description": "Plot with a bivariate function on the upper diagonal subplots.\n\nParameters\n----------\nfunc : callable plotting function\n    Must take x, y arrays as positional arguments and draw onto the\n    \"currently active\" matplotlib Axes. Also needs to accept kwargs\n    called ``color`` and  ``label``.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "pipe",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return its value.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "savefig",
        "type": "function",
        "description": "Save an image of the plot.\n\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set",
        "type": "function",
        "description": "Set attributes on each subplot Axes.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "tick_params",
        "type": "function",
        "description": "Modify the ticks, tick labels, and gridlines.\n\nParameters\n----------\naxis : {'x', 'y', 'both'}\n    The axis on which to apply the formatting.\nkwargs : keyword arguments\n    Additional keyword arguments to pass to\n    :meth:`matplotlib.axes.Axes.tick_params`.\n\nReturns\n-------\nself : Grid instance\n    Returns self for easy chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "axis": {
              "type": "any",
              "default": "both",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "tight_layout",
        "type": "function",
        "description": "Call fig.tight_layout within rect that exclude the legend.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "fig",
        "type": "property",
        "description": "DEPRECATED: prefer the `figure` property."
      },
      {
        "name": "figure",
        "type": "property",
        "description": "Access the :class:`matplotlib.figure.Figure` object underlying the grid."
      },
      {
        "name": "legend",
        "type": "property",
        "description": "The :class:`matplotlib.legend.Legend` object, if present."
      }
    ]
  },
  {
    "name": "axes_style",
    "type": "function",
    "description": "Get the parameters that control the general style of the plots.\n\nThe style parameters control properties like the color of the background and\nwhether a grid is enabled by default. This is accomplished using the\nmatplotlib rcParams system.\n\nThe options are illustrated in the\n:doc:`aesthetics tutorial <../tutorial/aesthetics>`.\n\nThis function can also be used as a context manager to temporarily\nalter the global defaults. See :func:`set_theme` or :func:`set_style`\nto modify the global defaults for all plots.\n\nParameters\n----------\nstyle : None, dict, or one of {darkgrid, whitegrid, dark, white, ticks}\n    A dictionary of parameters or the name of a preconfigured style.\nrc : dict, optional\n    Parameter mappings to override the values in the preset seaborn\n    style dictionaries. This only updates parameters that are\n    considered part of the style definition.\n\nExamples\n--------\n\n.. include:: ../docstrings/axes_style.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "style": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "barplot",
    "type": "function",
    "description": "Show point estimates and errors as rectangular bars.\n\nA bar plot represents an aggregate or statistical estimate for a numeric\nvariable with the height of each rectangle and indicates the uncertainty\naround that estimate using an error bar. Bar plots include 0 in the\naxis range, and they are a good choice when 0 is a meaningful value\nfor the variable to take.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \nestimator : string or callable that maps vector -> scalar\n    Statistical function to estimate within each categorical bin.\nerrorbar : string, (string, number) tuple, callable or None\n    Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n    with a method name and a level parameter, or a function that maps from a\n    vector to a (min, max) interval, or None to hide errorbar. See the\n    :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\n\n    .. versionadded:: v0.12.0\nn_boot : int\n    Number of bootstrap samples used to compute confidence intervals.\nseed : int, `numpy.random.Generator`, or `numpy.random.RandomState`\n    Seed or random number generator for reproducible bootstrapping.\nunits : name of variable in `data` or vector data\n    Identifier of sampling units; used by the errorbar function to\n    perform a multilevel bootstrap and account for repeated measures\nweights : name of variable in `data` or vector data\n    Data values or column used to compute weighted statistics.\n    Note that the use of weights may limit other statistical options.\n\n    .. versionadded:: v0.13.1    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsaturation : float\n    Proportion of the original saturation to draw fill colors in. Large\n    patches often look better with desaturated colors, but set this to\n    `1` if you want the colors to perfectly match the input values.    \nfill : bool\n    If True, use a solid patch. Otherwise, draw as line art.\n\n    .. versionadded:: v0.13.0    \nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nwidth : float\n    Width allotted to each element on the orient axis. When `native_scale=True`,\n    it is relative to the minimum distance between two values in the native scale.    \ndodge : \"auto\" or bool\n    When hue mapping is used, whether elements should be narrowed and shifted along\n    the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n    orient variable is crossed with the categorical variable or `False` otherwise.\n\n    .. versionchanged:: 0.13.0\n\n        Added `\"auto\"` mode as a new default.    \ngap : float\n    Shrink on the orient axis by this factor to add a gap between dodged elements.\n\n    .. versionadded:: 0.13.0    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \ncapsize : float\n    Width of the \"caps\" on error bars, relative to bar spacing.    \nerr_kws : dict\n    Parameters of :class:`matplotlib.lines.Line2D`, for the error bar artists.\n\n    .. versionadded:: v0.13.0    \nci : float\n    Level of the confidence interval to show, in [0, 100].\n\n    .. deprecated:: v0.12.0\n        Use `errorbar=(\"ci\", ...)`.    \nerrcolor : matplotlib color\n    Color used for the error bar lines.\n\n    .. deprecated:: 0.13.0\n        Use `err_kws={'color': ...}`.    \nerrwidth : float\n    Thickness of error bar lines (and caps), in points.\n\n    .. deprecated:: 0.13.0\n        Use `err_kws={'linewidth': ...}`.    \nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other parameters are passed through to :class:`matplotlib.patches.Rectangle`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\ncountplot : Show the counts of observations in each categorical bin.    \npointplot : Show point estimates and confidence intervals using dots.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nNotes\n-----\n\nFor datasets where 0 is not a meaningful value, a :func:`pointplot` will\nallow you to focus on differences between levels of one or more categorical\nvariables.\n\nIt is also important to keep in mind that a bar plot shows only the mean (or\nother aggregate) value, but it is often more informative to show the\ndistribution of values at each level of the categorical variables. In those\ncases, approaches such as a :func:`boxplot` or :func:`violinplot` may be\nmore appropriate.\n\nExamples\n--------\n.. include:: ../docstrings/barplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "estimator": {
          "type": "any",
          "default": "mean",
          "description": " "
        },
        "errorbar": {
          "type": "any",
          "default": "('ci', 95)",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "saturation": {
          "type": "any",
          "default": "0.75",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "width": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "gap": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "capsize": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "err_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "errcolor": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "errwidth": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "blend_palette",
    "type": "function",
    "description": "Make a palette that blends between a list of colors.\n\nParameters\n----------\ncolors : sequence of colors in various formats interpreted by `input`\n    hex code, html color name, or tuple in `input` space.\nn_colors : int, optional\n    Number of colors in the palette.\nas_cmap : bool, optional\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nExamples\n--------\n.. include: ../docstrings/blend_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "input": {
          "type": "any",
          "default": "rgb",
          "description": " "
        }
      },
      "required": [
        "colors"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "boxenplot",
    "type": "function",
    "description": "Draw an enhanced box plot for larger datasets.\n\nThis style of plot was originally named a \"letter value\" plot because it\nshows a large number of quantiles that are defined as \"letter values\".  It\nis similar to a box plot in plotting a nonparametric representation of a\ndistribution in which all features correspond to actual observations. By\nplotting more quantiles, it provides more information about the shape of\nthe distribution, particularly in the tails.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsaturation : float\n    Proportion of the original saturation to draw fill colors in. Large\n    patches often look better with desaturated colors, but set this to\n    `1` if you want the colors to perfectly match the input values.    \nfill : bool\n    If True, use a solid patch. Otherwise, draw as line art.\n\n    .. versionadded:: v0.13.0    \ndodge : \"auto\" or bool\n    When hue mapping is used, whether elements should be narrowed and shifted along\n    the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n    orient variable is crossed with the categorical variable or `False` otherwise.\n\n    .. versionchanged:: 0.13.0\n\n        Added `\"auto\"` mode as a new default.    \nwidth : float\n    Width allotted to each element on the orient axis. When `native_scale=True`,\n    it is relative to the minimum distance between two values in the native scale.    \ngap : float\n    Shrink on the orient axis by this factor to add a gap between dodged elements.\n\n    .. versionadded:: 0.13.0    \nlinewidth : float\n    Width of the lines that frame the plot elements.    \nlinecolor : color\n    Color to use for line elements, when `fill` is True.\n\n    .. versionadded:: v0.13.0    \nwidth_method : {\"exponential\", \"linear\", \"area\"}\n    Method to use for the width of the letter value boxes:\n\n    - `\"exponential\"`: Represent the corresponding percentile\n    - `\"linear\"`: Decrease by a constant amount for each box\n    - `\"area\"`: Represent the density of data points in that box\nk_depth : {\"tukey\", \"proportion\", \"trustworthy\", \"full\"} or int\n    The number of levels to compute and draw in each tail:\n\n    - `\"tukey\"`: Use log2(n) - 3 levels, covering similar range as boxplot whiskers\n    - `\"proportion\"`: Leave approximately `outlier_prop` fliers\n    - `\"trusthworthy\"`: Extend to level with confidence of at least `trust_alpha`\n    - `\"full\"`: Use log2(n) + 1 levels and extend to most extreme points\noutlier_prop : float\n    Proportion of data expected to be outliers; used when `k_depth=\"proportion\"`.\ntrust_alpha : float\n    Confidence threshold for most extreme level; used when `k_depth=\"trustworthy\"`.\nshowfliers : bool\n    If False, suppress the plotting of outliers.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nbox_kws: dict\n    Keyword arguments for the box artists; passed to\n    :class:`matplotlib.patches.Rectangle`.\n\n    .. versionadded:: v0.12.0\nline_kws: dict\n    Keyword arguments for the line denoting the median; passed to\n    :meth:`matplotlib.axes.Axes.plot`.\n\n    .. versionadded:: v0.12.0\nflier_kws: dict\n    Keyword arguments for the scatter denoting the outlier observations;\n    passed to :meth:`matplotlib.axes.Axes.scatter`.\n\n    .. versionadded:: v0.12.0\nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other keyword arguments are passed to :class:`matplotlib.patches.Rectangle`,\n    superceded by those in `box_kws`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nviolinplot : A combination of boxplot and kernel density estimation.    \nboxplot : A traditional box-and-whisker plot with a similar API.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nNotes\n-----\n\nFor a more extensive explanation, you can read the paper that introduced the plot:\nhttps://vita.had.co.nz/papers/letter-value-plot.html\n\nExamples\n--------\n.. include:: ../docstrings/boxenplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "saturation": {
          "type": "any",
          "default": "0.75",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "width": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "gap": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "linewidth": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "linecolor": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "width_method": {
          "type": "any",
          "default": "exponential",
          "description": " "
        },
        "k_depth": {
          "type": "any",
          "default": "tukey",
          "description": " "
        },
        "outlier_prop": {
          "type": "any",
          "default": "0.007",
          "description": " "
        },
        "trust_alpha": {
          "type": "any",
          "default": "0.05",
          "description": " "
        },
        "showfliers": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "scale": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "box_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "flier_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "line_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "boxplot",
    "type": "function",
    "description": "Draw a box plot to show distributions with respect to categories.\n\nA box plot (or box-and-whisker plot) shows the distribution of quantitative\ndata in a way that facilitates comparisons between variables or across\nlevels of a categorical variable. The box shows the quartiles of the\ndataset while the whiskers extend to show the rest of the distribution,\nexcept for points that are determined to be \"outliers\" using a method\nthat is a function of the inter-quartile range.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsaturation : float\n    Proportion of the original saturation to draw fill colors in. Large\n    patches often look better with desaturated colors, but set this to\n    `1` if you want the colors to perfectly match the input values.    \nfill : bool\n    If True, use a solid patch. Otherwise, draw as line art.\n\n    .. versionadded:: v0.13.0    \ndodge : \"auto\" or bool\n    When hue mapping is used, whether elements should be narrowed and shifted along\n    the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n    orient variable is crossed with the categorical variable or `False` otherwise.\n\n    .. versionchanged:: 0.13.0\n\n        Added `\"auto\"` mode as a new default.    \nwidth : float\n    Width allotted to each element on the orient axis. When `native_scale=True`,\n    it is relative to the minimum distance between two values in the native scale.    \ngap : float\n    Shrink on the orient axis by this factor to add a gap between dodged elements.\n\n    .. versionadded:: 0.13.0    \nwhis : float or pair of floats\n    Paramater that controls whisker length. If scalar, whiskers are drawn\n    to the farthest datapoint within *whis * IQR* from the nearest hinge.\n    If a tuple, it is interpreted as percentiles that whiskers represent.\nlinecolor : color\n    Color to use for line elements, when `fill` is True.\n\n    .. versionadded:: v0.13.0    \nlinewidth : float\n    Width of the lines that frame the plot elements.    \nfliersize : float\n    Size of the markers used to indicate outlier observations.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other keyword arguments are passed through to\n    :meth:`matplotlib.axes.Axes.boxplot`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nviolinplot : A combination of boxplot and kernel density estimation.    \nstripplot : A scatterplot where one variable is categorical. Can be used\n            in conjunction with other plots to show each observation.    \nswarmplot : A categorical scatterplot where the points do not overlap. Can\n            be used with other plots to show each observation.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nExamples\n--------\n.. include:: ../docstrings/boxplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "saturation": {
          "type": "any",
          "default": "0.75",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "width": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "gap": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "whis": {
          "type": "any",
          "default": "1.5",
          "description": " "
        },
        "linecolor": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "linewidth": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "fliersize": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "catplot",
    "type": "function",
    "description": "Figure-level interface for drawing categorical plots onto a FacetGrid.\n\nThis function provides access to several axes-level functions that\nshow the relationship between a numerical and one or more categorical\nvariables using one of several visual representations. The `kind`\nparameter selects the underlying axes-level function to use.\n\nCategorical scatterplots:\n\n- :func:`stripplot` (with `kind=\"strip\"`; the default)\n- :func:`swarmplot` (with `kind=\"swarm\"`)\n\nCategorical distribution plots:\n\n- :func:`boxplot` (with `kind=\"box\"`)\n- :func:`violinplot` (with `kind=\"violin\"`)\n- :func:`boxenplot` (with `kind=\"boxen\"`)\n\nCategorical estimate plots:\n\n- :func:`pointplot` (with `kind=\"point\"`)\n- :func:`barplot` (with `kind=\"bar\"`)\n- :func:`countplot` (with `kind=\"count\"`)\n\nExtra keyword arguments are passed to the underlying function, so you\nshould refer to the documentation for each to see kind-specific options.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nAfter plotting, the :class:`FacetGrid` with the plot is returned and can\nbe used directly to tweak supporting plot details or add other layers.\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \nrow, col : names of variables in `data` or vector data\n    Categorical variables that will determine the faceting of the grid.\nkind : str\n    The kind of plot to draw, corresponds to the name of a categorical\n    axes-level plotting function. Options are: \"strip\", \"swarm\", \"box\", \"violin\",\n    \"boxen\", \"point\", \"bar\", or \"count\".\nestimator : string or callable that maps vector -> scalar\n    Statistical function to estimate within each categorical bin.\nerrorbar : string, (string, number) tuple, callable or None\n    Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n    with a method name and a level parameter, or a function that maps from a\n    vector to a (min, max) interval, or None to hide errorbar. See the\n    :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\n\n    .. versionadded:: v0.12.0\nn_boot : int\n    Number of bootstrap samples used to compute confidence intervals.\nseed : int, `numpy.random.Generator`, or `numpy.random.RandomState`\n    Seed or random number generator for reproducible bootstrapping.\nunits : name of variable in `data` or vector data\n    Identifier of sampling units; used by the errorbar function to\n    perform a multilevel bootstrap and account for repeated measures\nweights : name of variable in `data` or vector data\n    Data values or column used to compute weighted statistics.\n    Note that the use of weights may limit other statistical options.\n\n    .. versionadded:: v0.13.1    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \nrow_order, col_order : lists of strings\n    Order to organize the rows and/or columns of the grid in; otherwise the\n    orders are inferred from the data objects.\ncol_wrap : int\n    \"Wrap\" the column variable at this width, so that the column facets\n    span multiple rows. Incompatible with a ``row`` facet.    \nheight : scalar\n    Height (in inches) of each facet. See also: ``aspect``.    \naspect : scalar\n    Aspect ratio of each facet, so that ``aspect * height`` gives the width\n    of each facet in inches.    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nlegend_out : bool\n    If ``True``, the figure size will be extended, and the legend will be\n    drawn outside the plot on the center right.    \nshare{x,y} : bool, 'col', or 'row' optional\n    If true, the facets will share y axes across columns and/or x axes\n    across rows.    \nmargin_titles : bool\n    If ``True``, the titles for the row variable are drawn to the right of\n    the last column. This option is experimental and may not work in all\n    cases.    \nfacet_kws : dict\n    Dictionary of other keyword arguments to pass to :class:`FacetGrid`.\nkwargs : key, value pairings\n    Other keyword arguments are passed through to the underlying plotting\n    function.\n\nReturns\n-------\n:class:`FacetGrid`\n    Returns the :class:`FacetGrid` object with the plot on it for further\n    tweaking.\n\nExamples\n--------\n.. include:: ../docstrings/catplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kind": {
          "type": "any",
          "default": "strip",
          "description": " "
        },
        "estimator": {
          "type": "any",
          "default": "mean",
          "description": " "
        },
        "errorbar": {
          "type": "any",
          "default": "('ci', 95)",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_wrap": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "aspect": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "legend_out": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "sharex": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "sharey": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "margin_titles": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "facet_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "choose_colorbrewer_palette",
    "type": "function",
    "description": "Select a palette from the ColorBrewer set.\n\nThese palettes are built into matplotlib and can be used by name in\nmany seaborn functions, or by passing the object returned by this function.\n\nParameters\n----------\ndata_type : {'sequential', 'diverging', 'qualitative'}\n    This describes the kind of data you want to visualize. See the seaborn\n    color palette docs for more information about how to choose this value.\n    Note that you can pass substrings (e.g. 'q' for 'qualitative.\n\nas_cmap : bool\n    If True, the return value is a matplotlib colormap rather than a\n    list of discrete colors.\n\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\n    Object that can be passed to plotting functions.\n\nSee Also\n--------\ndark_palette : Create a sequential palette with dark low values.\nlight_palette : Create a sequential palette with bright low values.\ndiverging_palette : Create a diverging palette from selected colors.\ncubehelix_palette : Create a sequential palette or colormap using the\n                    cubehelix system.",
    "parameters": {
      "type": "object",
      "properties": {
        "data_type": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "data_type"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "choose_cubehelix_palette",
    "type": "function",
    "description": "Launch an interactive widget to create a sequential cubehelix palette.\n\nThis corresponds with the :func:`cubehelix_palette` function. This kind\nof palette is good for data that range between relatively uninteresting\nlow values and interesting high values. The cubehelix system allows the\npalette to have more hue variance across the range, which can be helpful\nfor distinguishing a wider range of values.\n\nRequires IPython 2+ and must be used in the notebook.\n\nParameters\n----------\nas_cmap : bool\n    If True, the return value is a matplotlib colormap rather than a\n    list of discrete colors.\n\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\n    Object that can be passed to plotting functions.\n\nSee Also\n--------\ncubehelix_palette : Create a sequential palette or colormap using the\n                    cubehelix system.",
    "parameters": {
      "type": "object",
      "properties": {
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "choose_dark_palette",
    "type": "function",
    "description": "Launch an interactive widget to create a dark sequential palette.\n\nThis corresponds with the :func:`dark_palette` function. This kind\nof palette is good for data that range between relatively uninteresting\nlow values and interesting high values.\n\nRequires IPython 2+ and must be used in the notebook.\n\nParameters\n----------\ninput : {'husl', 'hls', 'rgb'}\n    Color space for defining the seed value. Note that the default is\n    different than the default input for :func:`dark_palette`.\nas_cmap : bool\n    If True, the return value is a matplotlib colormap rather than a\n    list of discrete colors.\n\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\n    Object that can be passed to plotting functions.\n\nSee Also\n--------\ndark_palette : Create a sequential palette with dark low values.\nlight_palette : Create a sequential palette with bright low values.\ncubehelix_palette : Create a sequential palette or colormap using the\n                    cubehelix system.",
    "parameters": {
      "type": "object",
      "properties": {
        "input": {
          "type": "any",
          "default": "husl",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "choose_diverging_palette",
    "type": "function",
    "description": "Launch an interactive widget to choose a diverging color palette.\n\nThis corresponds with the :func:`diverging_palette` function. This kind\nof palette is good for data that range between interesting low values\nand interesting high values with a meaningful midpoint. (For example,\nchange scores relative to some baseline value).\n\nRequires IPython 2+ and must be used in the notebook.\n\nParameters\n----------\nas_cmap : bool\n    If True, the return value is a matplotlib colormap rather than a\n    list of discrete colors.\n\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\n    Object that can be passed to plotting functions.\n\nSee Also\n--------\ndiverging_palette : Create a diverging color palette or colormap.\nchoose_colorbrewer_palette : Interactively choose palettes from the\n                             colorbrewer set, including diverging palettes.",
    "parameters": {
      "type": "object",
      "properties": {
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "choose_light_palette",
    "type": "function",
    "description": "Launch an interactive widget to create a light sequential palette.\n\nThis corresponds with the :func:`light_palette` function. This kind\nof palette is good for data that range between relatively uninteresting\nlow values and interesting high values.\n\nRequires IPython 2+ and must be used in the notebook.\n\nParameters\n----------\ninput : {'husl', 'hls', 'rgb'}\n    Color space for defining the seed value. Note that the default is\n    different than the default input for :func:`light_palette`.\nas_cmap : bool\n    If True, the return value is a matplotlib colormap rather than a\n    list of discrete colors.\n\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\n    Object that can be passed to plotting functions.\n\nSee Also\n--------\nlight_palette : Create a sequential palette with bright low values.\ndark_palette : Create a sequential palette with dark low values.\ncubehelix_palette : Create a sequential palette or colormap using the\n                    cubehelix system.",
    "parameters": {
      "type": "object",
      "properties": {
        "input": {
          "type": "any",
          "default": "husl",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "clustermap",
    "type": "function",
    "description": "Plot a matrix dataset as a hierarchically-clustered heatmap.\n\nThis function requires scipy to be available.\n\nParameters\n----------\ndata : 2D array-like\n    Rectangular data for clustering. Cannot contain NAs.\npivot_kws : dict, optional\n    If `data` is a tidy dataframe, can provide keyword arguments for\n    pivot to create a rectangular dataframe.\nmethod : str, optional\n    Linkage method to use for calculating clusters. See\n    :func:`scipy.cluster.hierarchy.linkage` documentation for more\n    information.\nmetric : str, optional\n    Distance metric to use for the data. See\n    :func:`scipy.spatial.distance.pdist` documentation for more options.\n    To use different metrics (or methods) for rows and columns, you may\n    construct each linkage matrix yourself and provide them as\n    `{row,col}_linkage`.\nz_score : int or None, optional\n    Either 0 (rows) or 1 (columns). Whether or not to calculate z-scores\n    for the rows or the columns. Z scores are: z = (x - mean)/std, so\n    values in each row (column) will get the mean of the row (column)\n    subtracted, then divided by the standard deviation of the row (column).\n    This ensures that each row (column) has mean of 0 and variance of 1.\nstandard_scale : int or None, optional\n    Either 0 (rows) or 1 (columns). Whether or not to standardize that\n    dimension, meaning for each row or column, subtract the minimum and\n    divide each by its maximum.\nfigsize : tuple of (width, height), optional\n    Overall size of the figure.\ncbar_kws : dict, optional\n    Keyword arguments to pass to `cbar_kws` in :func:`heatmap`, e.g. to\n    add a label to the colorbar.\n{row,col}_cluster : bool, optional\n    If ``True``, cluster the {rows, columns}.\n{row,col}_linkage : :class:`numpy.ndarray`, optional\n    Precomputed linkage matrix for the rows or columns. See\n    :func:`scipy.cluster.hierarchy.linkage` for specific formats.\n{row,col}_colors : list-like or pandas DataFrame/Series, optional\n    List of colors to label for either the rows or columns. Useful to evaluate\n    whether samples within a group are clustered together. Can use nested lists or\n    DataFrame for multiple color levels of labeling. If given as a\n    :class:`pandas.DataFrame` or :class:`pandas.Series`, labels for the colors are\n    extracted from the DataFrames column names or from the name of the Series.\n    DataFrame/Series colors are also matched to the data by their index, ensuring\n    colors are drawn in the correct order.\nmask : bool array or DataFrame, optional\n    If passed, data will not be shown in cells where `mask` is True.\n    Cells with missing values are automatically masked. Only used for\n    visualizing, not for calculating.\n{dendrogram,colors}_ratio : float, or pair of floats, optional\n    Proportion of the figure size devoted to the two marginal elements. If\n    a pair is given, they correspond to (row, col) ratios.\ncbar_pos : tuple of (left, bottom, width, height), optional\n    Position of the colorbar axes in the figure. Setting to ``None`` will\n    disable the colorbar.\ntree_kws : dict, optional\n    Parameters for the :class:`matplotlib.collections.LineCollection`\n    that is used to plot the lines of the dendrogram tree.\nkwargs : other keyword arguments\n    All other keyword arguments are passed to :func:`heatmap`.\n\nReturns\n-------\n:class:`ClusterGrid`\n    A :class:`ClusterGrid` instance.\n\nSee Also\n--------\nheatmap : Plot rectangular data as a color-encoded matrix.\n\nNotes\n-----\nThe returned object has a ``savefig`` method that should be used if you\nwant to save the figure object without clipping the dendrograms.\n\nTo access the reordered row indices, use:\n``clustergrid.dendrogram_row.reordered_ind``\n\nColumn indices, use:\n``clustergrid.dendrogram_col.reordered_ind``\n\nExamples\n--------\n\n.. include:: ../docstrings/clustermap.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "pivot_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "method": {
          "type": "any",
          "default": "average",
          "description": " "
        },
        "metric": {
          "type": "any",
          "default": "euclidean",
          "description": " "
        },
        "z_score": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "standard_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "figsize": {
          "type": "any",
          "default": "(10, 10)",
          "description": " "
        },
        "cbar_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_cluster": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "col_cluster": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "row_linkage": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_linkage": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_colors": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_colors": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "mask": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "dendrogram_ratio": {
          "type": "any",
          "default": "0.2",
          "description": " "
        },
        "colors_ratio": {
          "type": "any",
          "default": "0.03",
          "description": " "
        },
        "cbar_pos": {
          "type": "any",
          "default": "(0.02, 0.8, 0.05, 0.18)",
          "description": " "
        },
        "tree_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "data",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "color_palette",
    "type": "function",
    "description": "Return a list of colors or continuous colormap defining a palette.\n\nPossible ``palette`` values include:\n    - Name of a seaborn palette (deep, muted, bright, pastel, dark, colorblind)\n    - Name of matplotlib colormap\n    - 'husl' or 'hls'\n    - 'ch:<cubehelix arguments>'\n    - 'light:<color>', 'dark:<color>', 'blend:<color>,<color>',\n    - A sequence of colors in any format matplotlib accepts\n\nCalling this function with ``palette=None`` will return the current\nmatplotlib color cycle.\n\nThis function can also be used in a ``with`` statement to temporarily\nset the color cycle for a plot or set of plots.\n\nSee the :ref:`tutorial <palette_tutorial>` for more information.\n\nParameters\n----------\npalette : None, string, or sequence, optional\n    Name of palette or None to return current palette. If a sequence, input\n    colors are used but possibly cycled and desaturated.\nn_colors : int, optional\n    Number of colors in the palette. If ``None``, the default will depend\n    on how ``palette`` is specified. Named palettes default to 6 colors,\n    but grabbing the current palette or passing in a list of colors will\n    not change the number of colors unless this is specified. Asking for\n    more colors than exist in the palette will cause it to cycle. Ignored\n    when ``as_cmap`` is True.\ndesat : float, optional\n    Proportion to desaturate each color by.\nas_cmap : bool\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\n\nReturns\n-------\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\nset_palette : Set the default color cycle for all plots.\nset_color_codes : Reassign color codes like ``\"b\"``, ``\"g\"``, etc. to\n                  colors from one of the seaborn palettes.\n\nExamples\n--------\n\n.. include:: ../docstrings/color_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "desat": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "countplot",
    "type": "function",
    "description": "Show the counts of observations in each categorical bin using bars.\n\nA count plot can be thought of as a histogram across a categorical, instead\nof quantitative, variable. The basic API and options are identical to those\nfor :func:`barplot`, so you can compare counts across nested variables.\n\nNote that :func:`histplot` function offers similar functionality with additional\nfeatures (e.g. bar stacking), although its default behavior is somewhat different.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsaturation : float\n    Proportion of the original saturation to draw fill colors in. Large\n    patches often look better with desaturated colors, but set this to\n    `1` if you want the colors to perfectly match the input values.    \nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nstat : {'count', 'percent', 'proportion', 'probability'}\n    Statistic to compute; when not `'count'`, bar heights will be normalized so that\n    they sum to 100 (for `'percent'`) or 1 (otherwise) across the plot.\n\n    .. versionadded:: v0.13.0\nwidth : float\n    Width allotted to each element on the orient axis. When `native_scale=True`,\n    it is relative to the minimum distance between two values in the native scale.    \ndodge : \"auto\" or bool\n    When hue mapping is used, whether elements should be narrowed and shifted along\n    the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n    orient variable is crossed with the categorical variable or `False` otherwise.\n\n    .. versionchanged:: 0.13.0\n\n        Added `\"auto\"` mode as a new default.    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other parameters are passed through to :class:`matplotlib.patches.Rectangle`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nhistplot : Bin and count observations with additional options.\nbarplot : Show point estimates and confidence intervals using bars.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nExamples\n--------\n.. include:: ../docstrings/countplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "saturation": {
          "type": "any",
          "default": "0.75",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "stat": {
          "type": "any",
          "default": "count",
          "description": " "
        },
        "width": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "gap": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "crayon_palette",
    "type": "function",
    "description": "Make a palette with color names from Crayola crayons.\n\nColors are taken from here:\nhttps://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors\n\nThis is just a simple wrapper around the `seaborn.crayons` dictionary.\n\nParameters\n----------\ncolors : list of strings\n    List of keys in the `seaborn.crayons` dictionary.\n\nReturns\n-------\npalette\n    A list of colors as RGB tuples.\n\nSee Also\n--------\nxkcd_palette : Make a palette with named colors from the XKCD color survey.",
    "parameters": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "colors"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "cubehelix_palette",
    "type": "function",
    "description": "Make a sequential palette from the cubehelix system.\n\nThis produces a colormap with linearly-decreasing (or increasing)\nbrightness. That means that information will be preserved if printed to\nblack and white or viewed by someone who is colorblind.  \"cubehelix\" is\nalso available as a matplotlib-based palette, but this function gives the\nuser more control over the look of the palette and has a different set of\ndefaults.\n\nIn addition to using this function, it is also possible to generate a\ncubehelix palette generally in seaborn using a string starting with\n`ch:` and containing other parameters (e.g. `\"ch:s=.25,r=-.5\"`).\n\nParameters\n----------\nn_colors : int\n    Number of colors in the palette.\nstart : float, 0 <= start <= 3\n    The hue value at the start of the helix.\nrot : float\n    Rotations around the hue wheel over the range of the palette.\ngamma : float 0 <= gamma\n    Nonlinearity to emphasize dark (gamma < 1) or light (gamma > 1) colors.\nhue : float, 0 <= hue <= 1\n    Saturation of the colors.\ndark : float 0 <= dark <= 1\n    Intensity of the darkest color in the palette.\nlight : float 0 <= light <= 1\n    Intensity of the lightest color in the palette.\nreverse : bool\n    If True, the palette will go from dark to light.\nas_cmap : bool\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\nchoose_cubehelix_palette : Launch an interactive widget to select cubehelix\n                           palette parameters.\ndark_palette : Create a sequential palette with dark low values.\nlight_palette : Create a sequential palette with bright low values.\n\nReferences\n----------\nGreen, D. A. (2011). \"A colour scheme for the display of astronomical\nintensity images\". Bulletin of the Astromical Society of India, Vol. 39,\np. 289-295.\n\nExamples\n--------\n.. include:: ../docstrings/cubehelix_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "start": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "rot": {
          "type": "any",
          "default": "0.4",
          "description": " "
        },
        "gamma": {
          "type": "any",
          "default": "1.0",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "light": {
          "type": "any",
          "default": "0.85",
          "description": " "
        },
        "dark": {
          "type": "any",
          "default": "0.15",
          "description": " "
        },
        "reverse": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "dark_palette",
    "type": "function",
    "description": "Make a sequential palette that blends from dark to ``color``.\n\nThis kind of palette is good for data that range between relatively\nuninteresting low values and interesting high values.\n\nThe ``color`` parameter can be specified in a number of ways, including\nall options for defining a color in matplotlib and several additional\ncolor spaces that are handled by seaborn. You can also use the database\nof named colors from the XKCD color survey.\n\nIf you are using the IPython notebook, you can also choose this palette\ninteractively with the :func:`choose_dark_palette` function.\n\nParameters\n----------\ncolor : base color for high values\n    hex, rgb-tuple, or html color name\nn_colors : int, optional\n    number of colors in the palette\nreverse : bool, optional\n    if True, reverse the direction of the blend\nas_cmap : bool, optional\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\ninput : {'rgb', 'hls', 'husl', xkcd'}\n    Color space to interpret the input color. The first three options\n    apply to tuple inputs and the latter applies to string inputs.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\nlight_palette : Create a sequential palette with bright low values.\ndiverging_palette : Create a diverging palette with two colors.\n\nExamples\n--------\n.. include:: ../docstrings/dark_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "reverse": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "input": {
          "type": "any",
          "default": "rgb",
          "description": " "
        }
      },
      "required": [
        "color"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "desaturate",
    "type": "function",
    "description": "Decrease the saturation channel of a color by some percent.\n\nParameters\n----------\ncolor : matplotlib color\n    hex, rgb-tuple, or html color name\nprop : float\n    saturation channel of color will be multiplied by this value\n\nReturns\n-------\nnew_color : rgb tuple\n    desaturated color code in RGB tuple representation",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "prop": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "color",
        "prop"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "despine",
    "type": "function",
    "description": "Remove the top and right spines from plot(s).\n\nfig : matplotlib figure, optional\n    Figure to despine all axes of, defaults to the current figure.\nax : matplotlib axes, optional\n    Specific axes object to despine. Ignored if fig is provided.\ntop, right, left, bottom : boolean, optional\n    If True, remove that spine.\noffset : int or dict, optional\n    Absolute distance, in points, spines should be moved away\n    from the axes (negative values move spines inward). A single value\n    applies to all spines; a dict can be used to set offset values per\n    side.\ntrim : bool, optional\n    If True, limit spines to the smallest and largest major tick\n    on each non-despined axis.\n\nReturns\n-------\nNone",
    "parameters": {
      "type": "object",
      "properties": {
        "fig": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "top": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "right": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "left": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "bottom": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "offset": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "trim": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "displot",
    "type": "function",
    "description": "Figure-level interface for drawing distribution plots onto a FacetGrid.\n\nThis function provides access to several approaches for visualizing the\nunivariate or bivariate distribution of data, including subsets of data\ndefined by semantic mapping and faceting across multiple subplots. The\n``kind`` parameter selects the approach to use:\n\n- :func:`histplot` (with ``kind=\"hist\"``; the default)\n- :func:`kdeplot` (with ``kind=\"kde\"``)\n- :func:`ecdfplot` (with ``kind=\"ecdf\"``; univariate-only)\n\nAdditionally, a :func:`rugplot` can be added to any kind of plot to show\nindividual observations.\n\nExtra keyword arguments are passed to the underlying function, so you should\nrefer to the documentation for each to understand the complete set of options\nfor making plots with this interface.\n\nSee the :doc:`distribution plots tutorial <../tutorial/distributions>` for a more\nin-depth discussion of the relative strengths and weaknesses of each approach.\nThe distinction between figure-level and axes-level functions is explained\nfurther in the :doc:`user guide <../tutorial/function_overview>`.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nrow, col : vectors or keys in ``data``\n    Variables that define subsets to plot on different facets.    \nweights : vector or key in ``data``\n    Observation weights used for computing the distribution function.\nkind : {\"hist\", \"kde\", \"ecdf\"}\n    Approach for visualizing the data. Selects the underlying plotting function\n    and determines the additional set of valid parameters.\nrug : bool\n    If True, show each observation with marginal ticks (as in :func:`rugplot`).\nrug_kws : dict\n    Parameters to control the appearance of the rug plot.\nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\nlegend : bool\n    If False, suppress the legend for semantic variables.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Single color specification for when hue mapping is not used. Otherwise, the\n    plot will try to hook into the matplotlib property cycle.\ncol_wrap : int\n    \"Wrap\" the column variable at this width, so that the column facets\n    span multiple rows. Incompatible with a ``row`` facet.    \n{row,col}_order : vector of strings\n    Specify the order in which levels of the ``row`` and/or ``col`` variables\n    appear in the grid of subplots.    \nheight : scalar\n    Height (in inches) of each facet. See also: ``aspect``.    \naspect : scalar\n    Aspect ratio of each facet, so that ``aspect * height`` gives the width\n    of each facet in inches.    \nfacet_kws : dict\n    Additional parameters passed to :class:`FacetGrid`.\n\nkwargs\n    Other keyword arguments are documented with the relevant axes-level function:\n\n    - :func:`histplot` (with ``kind=\"hist\"``)\n    - :func:`kdeplot` (with ``kind=\"kde\"``)\n    - :func:`ecdfplot` (with ``kind=\"ecdf\"``)\n\nReturns\n-------\n:class:`FacetGrid`\n    An object managing one or more subplots that correspond to conditional data\n    subsets with convenient methods for batch-setting of axes attributes.\n\nSee Also\n--------\nhistplot : Plot a histogram of binned counts with optional normalization or smoothing.\nkdeplot : Plot univariate or bivariate distributions using kernel density estimation.\nrugplot : Plot a tick at each observation value along the x and/or y axes.\necdfplot : Plot empirical cumulative distribution functions.\njointplot : Draw a bivariate plot with univariate marginal distributions.\n\nExamples\n--------\n\nSee the API documentation for the axes-level functions for more details\nabout the breadth of options available for each plot kind.\n\n.. include:: ../docstrings/displot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kind": {
          "type": "any",
          "default": "hist",
          "description": " "
        },
        "rug": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "rug_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_wrap": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "aspect": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "facet_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "distplot",
    "type": "function",
    "description": "DEPRECATED\n\nThis function has been deprecated and will be removed in seaborn v0.14.0.\nIt has been replaced by :func:`histplot` and :func:`displot`, two functions\nwith a modern API and many more capabilities.\n\nFor a guide to updating, please see this notebook:\n\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751",
    "parameters": {
      "type": "object",
      "properties": {
        "a": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "bins": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hist": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "kde": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "rug": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "fit": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hist_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kde_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "rug_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "fit_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "vertical": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "norm_hist": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "axlabel": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "label": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "diverging_palette",
    "type": "function",
    "description": "Make a diverging palette between two HUSL colors.\n\nIf you are using the IPython notebook, you can also choose this palette\ninteractively with the :func:`choose_diverging_palette` function.\n\nParameters\n----------\nh_neg, h_pos : float in [0, 359]\n    Anchor hues for negative and positive extents of the map.\ns : float in [0, 100], optional\n    Anchor saturation for both extents of the map.\nl : float in [0, 100], optional\n    Anchor lightness for both extents of the map.\nsep : int, optional\n    Size of the intermediate region.\nn : int, optional\n    Number of colors in the palette (if not returning a cmap)\ncenter : {\"light\", \"dark\"}, optional\n    Whether the center of the palette is light or dark\nas_cmap : bool, optional\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\ndark_palette : Create a sequential palette with dark values.\nlight_palette : Create a sequential palette with light values.\n\nExamples\n--------\n.. include: ../docstrings/diverging_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "h_neg": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "h_pos": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "s": {
          "type": "any",
          "default": "75",
          "description": " "
        },
        "l": {
          "type": "any",
          "default": "50",
          "description": " "
        },
        "sep": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "n": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "center": {
          "type": "any",
          "default": "light",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "h_neg",
        "h_pos"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "dogplot",
    "type": "function",
    "description": "Who's a good boy?",
    "parameters": {
      "type": "object",
      "properties": {
        "_": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "__": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "_",
        "__"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "ecdfplot",
    "type": "function",
    "description": "Plot empirical cumulative distribution functions.\n\nAn ECDF represents the proportion or count of observations falling below each\nunique value in a dataset. Compared to a histogram or density plot, it has the\nadvantage that each observation is visualized directly, meaning that there are\nno binning or smoothing parameters that need to be adjusted. It also aids direct\ncomparisons between multiple distributions. A downside is that the relationship\nbetween the appearance of the plot and the basic properties of the distribution\n(such as its central tendency, variance, and the presence of any bimodality)\nmay not be as intuitive.\n\nMore information is provided in the :ref:`user guide <tutorial_ecdf>`.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nweights : vector or key in ``data``\n    If provided, weight the contribution of the corresponding data points\n    towards the cumulative distribution using these values.\nstat : {{\"proportion\", \"percent\", \"count\"}}\n    Distribution statistic to compute.\ncomplementary : bool\n    If True, use the complementary CDF (1 - CDF)\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\nlegend : bool\n    If False, suppress the legend for semantic variables.\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs\n    Other keyword arguments are passed to :meth:`matplotlib.axes.Axes.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nSee Also\n--------\ndisplot : Figure-level interface to distribution plot functions.\nhistplot : Plot a histogram of binned counts with optional normalization or smoothing.\nkdeplot : Plot univariate or bivariate distributions using kernel density estimation.\nrugplot : Plot a tick at each observation value along the x and/or y axes.\n\nExamples\n--------\n\n.. include:: ../docstrings/ecdfplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "stat": {
          "type": "any",
          "default": "proportion",
          "description": " "
        },
        "complementary": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_data_home",
    "type": "function",
    "description": "Return a path to the cache directory for example datasets.\n\nThis directory is used by :func:`load_dataset`.\n\nIf the ``data_home`` argument is not provided, it will use a directory\nspecified by the `SEABORN_DATA` environment variable (if it exists)\nor otherwise default to an OS-appropriate user cache location.",
    "parameters": {
      "type": "object",
      "properties": {
        "data_home": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_dataset_names",
    "type": "function",
    "description": "Report available example datasets, useful for reporting issues.\n\nRequires an internet connection.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "heatmap",
    "type": "function",
    "description": "Plot rectangular data as a color-encoded matrix.\n\nThis is an Axes-level function and will draw the heatmap into the\ncurrently-active Axes if none is provided to the ``ax`` argument.  Part of\nthis Axes space will be taken and used to plot a colormap, unless ``cbar``\nis False or a separate Axes is provided to ``cbar_ax``.\n\nParameters\n----------\ndata : rectangular dataset\n    2D dataset that can be coerced into an ndarray. If a Pandas DataFrame\n    is provided, the index/column information will be used to label the\n    columns and rows.\nvmin, vmax : floats, optional\n    Values to anchor the colormap, otherwise they are inferred from the\n    data and other keyword arguments.\ncmap : matplotlib colormap name or object, or list of colors, optional\n    The mapping from data values to color space. If not provided, the\n    default will depend on whether ``center`` is set.\ncenter : float, optional\n    The value at which to center the colormap when plotting divergent data.\n    Using this parameter will change the default ``cmap`` if none is\n    specified.\nrobust : bool, optional\n    If True and ``vmin`` or ``vmax`` are absent, the colormap range is\n    computed with robust quantiles instead of the extreme values.\nannot : bool or rectangular dataset, optional\n    If True, write the data value in each cell. If an array-like with the\n    same shape as ``data``, then use this to annotate the heatmap instead\n    of the data. Note that DataFrames will match on position, not index.\nfmt : str, optional\n    String formatting code to use when adding annotations.\nannot_kws : dict of key, value mappings, optional\n    Keyword arguments for :meth:`matplotlib.axes.Axes.text` when ``annot``\n    is True.\nlinewidths : float, optional\n    Width of the lines that will divide each cell.\nlinecolor : color, optional\n    Color of the lines that will divide each cell.\ncbar : bool, optional\n    Whether to draw a colorbar.\ncbar_kws : dict of key, value mappings, optional\n    Keyword arguments for :meth:`matplotlib.figure.Figure.colorbar`.\ncbar_ax : matplotlib Axes, optional\n    Axes in which to draw the colorbar, otherwise take space from the\n    main Axes.\nsquare : bool, optional\n    If True, set the Axes aspect to \"equal\" so each cell will be\n    square-shaped.\nxticklabels, yticklabels : \"auto\", bool, list-like, or int, optional\n    If True, plot the column names of the dataframe. If False, don't plot\n    the column names. If list-like, plot these alternate labels as the\n    xticklabels. If an integer, use the column names but plot only every\n    n label. If \"auto\", try to densely plot non-overlapping labels.\nmask : bool array or DataFrame, optional\n    If passed, data will not be shown in cells where ``mask`` is True.\n    Cells with missing values are automatically masked.\nax : matplotlib Axes, optional\n    Axes in which to draw the plot, otherwise use the currently-active\n    Axes.\nkwargs : other keyword arguments\n    All other keyword arguments are passed to\n    :meth:`matplotlib.axes.Axes.pcolormesh`.\n\nReturns\n-------\nax : matplotlib Axes\n    Axes object with the heatmap.\n\nSee Also\n--------\nclustermap : Plot a matrix using hierarchical clustering to arrange the\n             rows and columns.\n\nExamples\n--------\n\n.. include:: ../docstrings/heatmap.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "vmin": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "vmax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cmap": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "center": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "robust": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "annot": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "fmt": {
          "type": "any",
          "default": ".2g",
          "description": " "
        },
        "annot_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "linewidths": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "linecolor": {
          "type": "any",
          "default": "white",
          "description": " "
        },
        "cbar": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "cbar_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cbar_ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "square": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "xticklabels": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "yticklabels": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "mask": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "data",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "histplot",
    "type": "function",
    "description": "Plot univariate or bivariate histograms to show distributions of datasets.\n\nA histogram is a classic visualization tool that represents the distribution\nof one or more variables by counting the number of observations that fall within\ndiscrete bins.\n\nThis function can normalize the statistic computed within each bin to estimate\nfrequency, density or probability mass, and it can add a smooth curve obtained\nusing a kernel density estimate, similar to :func:`kdeplot`.\n\nMore information is provided in the :ref:`user guide <tutorial_hist>`.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nweights : vector or key in ``data``\n    If provided, weight the contribution of the corresponding data points\n    towards the count in each bin by these factors.\nstat : str\n    Aggregate statistic to compute in each bin.\n    \n    - `count`: show the number of observations in each bin\n    - `frequency`: show the number of observations divided by the bin width\n    - `probability` or `proportion`: normalize such that bar heights sum to 1\n    - `percent`: normalize such that bar heights sum to 100\n    - `density`: normalize such that the total area of the histogram equals 1\nbins : str, number, vector, or a pair of such values\n    Generic bin parameter that can be the name of a reference rule,\n    the number of bins, or the breaks of the bins.\n    Passed to :func:`numpy.histogram_bin_edges`.\nbinwidth : number or pair of numbers\n    Width of each bin, overrides ``bins`` but can be used with\n    ``binrange``.\nbinrange : pair of numbers or a pair of pairs\n    Lowest and highest value for bin edges; can be used either\n    with ``bins`` or ``binwidth``. Defaults to data extremes.\ndiscrete : bool\n    If True, default to ``binwidth=1`` and draw the bars so that they are\n    centered on their corresponding data points. This avoids \"gaps\" that may\n    otherwise appear when using discrete (integer) data.\ncumulative : bool\n    If True, plot the cumulative counts as bins increase.\ncommon_bins : bool\n    If True, use the same bins when semantic variables produce multiple\n    plots. If using a reference rule to determine the bins, it will be computed\n    with the full dataset.\ncommon_norm : bool\n    If True and using a normalized statistic, the normalization will apply over\n    the full dataset. Otherwise, normalize each histogram independently.\nmultiple : {\"layer\", \"dodge\", \"stack\", \"fill\"}\n    Approach to resolving multiple elements when semantic mapping creates subsets.\n    Only relevant with univariate data.\nelement : {\"bars\", \"step\", \"poly\"}\n    Visual representation of the histogram statistic.\n    Only relevant with univariate data.\nfill : bool\n    If True, fill in the space under the histogram.\n    Only relevant with univariate data.\nshrink : number\n    Scale the width of each bar relative to the binwidth by this factor.\n    Only relevant with univariate data.\nkde : bool\n    If True, compute a kernel density estimate to smooth the distribution\n    and show on the plot as (one or more) line(s).\n    Only relevant with univariate data.\nkde_kws : dict\n    Parameters that control the KDE computation, as in :func:`kdeplot`.\nline_kws : dict\n    Parameters that control the KDE visualization, passed to\n    :meth:`matplotlib.axes.Axes.plot`.\nthresh : number or None\n    Cells with a statistic less than or equal to this value will be transparent.\n    Only relevant with bivariate data.\npthresh : number or None\n    Like ``thresh``, but a value in [0, 1] such that cells with aggregate counts\n    (or other statistics, when used) up to this proportion of the total will be\n    transparent.\npmax : number or None\n    A value in [0, 1] that sets that saturation point for the colormap at a value\n    such that cells below constitute this proportion of the total count (or\n    other statistic, when used).\ncbar : bool\n    If True, add a colorbar to annotate the color mapping in a bivariate plot.\n    Note: Does not currently support plots with a ``hue`` variable well.\ncbar_ax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the colorbar.\ncbar_kws : dict\n    Additional parameters passed to :meth:`matplotlib.figure.Figure.colorbar`.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Single color specification for when hue mapping is not used. Otherwise, the\n    plot will try to hook into the matplotlib property cycle.\nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\nlegend : bool\n    If False, suppress the legend for semantic variables.\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs\n    Other keyword arguments are passed to one of the following matplotlib\n    functions:\n\n    - :meth:`matplotlib.axes.Axes.bar` (univariate, element=\"bars\")\n    - :meth:`matplotlib.axes.Axes.fill_between` (univariate, other element, fill=True)\n    - :meth:`matplotlib.axes.Axes.plot` (univariate, other element, fill=False)\n    - :meth:`matplotlib.axes.Axes.pcolormesh` (bivariate)\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nSee Also\n--------\ndisplot : Figure-level interface to distribution plot functions.\nkdeplot : Plot univariate or bivariate distributions using kernel density estimation.\nrugplot : Plot a tick at each observation value along the x and/or y axes.\necdfplot : Plot empirical cumulative distribution functions.\njointplot : Draw a bivariate plot with univariate marginal distributions.\n\nNotes\n-----\n\nThe choice of bins for computing and plotting a histogram can exert\nsubstantial influence on the insights that one is able to draw from the\nvisualization. If the bins are too large, they may erase important features.\nOn the other hand, bins that are too small may be dominated by random\nvariability, obscuring the shape of the true underlying distribution. The\ndefault bin size is determined using a reference rule that depends on the\nsample size and variance. This works well in many cases, (i.e., with\n\"well-behaved\" data) but it fails in others. It is always a good to try\ndifferent bin sizes to be sure that you are not missing something important.\nThis function allows you to specify bins in several different ways, such as\nby setting the total number of bins to use, the width of each bin, or the\nspecific locations where the bins should break.\n\nExamples\n--------\n\n.. include:: ../docstrings/histplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "stat": {
          "type": "any",
          "default": "count",
          "description": " "
        },
        "bins": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "binwidth": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "binrange": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "discrete": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cumulative": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "common_bins": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "common_norm": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "multiple": {
          "type": "any",
          "default": "layer",
          "description": " "
        },
        "element": {
          "type": "any",
          "default": "bars",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "shrink": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "kde": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kde_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "line_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "thresh": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "pthresh": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "pmax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cbar": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "cbar_ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cbar_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "hls_palette",
    "type": "function",
    "description": "Return hues with constant lightness and saturation in the HLS system.\n\nThe hues are evenly sampled along a circular path. The resulting palette will be\nappropriate for categorical or cyclical data.\n\nThe `h`, `l`, and `s` values should be between 0 and 1.\n\n.. note::\n    While the separation of the resulting colors will be mathematically\n    constant, the HLS system does not construct a perceptually-uniform space,\n    so their apparent intensity will vary.\n\nParameters\n----------\nn_colors : int\n    Number of colors in the palette.\nh : float\n    The value of the first hue.\nl : float\n    The lightness value.\ns : float\n    The saturation intensity.\nas_cmap : bool\n    If True, return a matplotlib colormap object.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\nhusl_palette : Make a palette using evenly spaced hues in the HUSL system.\n\nExamples\n--------\n.. include:: ../docstrings/hls_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "h": {
          "type": "any",
          "default": "0.01",
          "description": " "
        },
        "l": {
          "type": "any",
          "default": "0.6",
          "description": " "
        },
        "s": {
          "type": "any",
          "default": "0.65",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "husl_palette",
    "type": "function",
    "description": "Return hues with constant lightness and saturation in the HUSL system.\n\nThe hues are evenly sampled along a circular path. The resulting palette will be\nappropriate for categorical or cyclical data.\n\nThe `h`, `l`, and `s` values should be between 0 and 1.\n\nThis function is similar to :func:`hls_palette`, but it uses a nonlinear color\nspace that is more perceptually uniform.\n\nParameters\n----------\nn_colors : int\n    Number of colors in the palette.\nh : float\n    The value of the first hue.\nl : float\n    The lightness value.\ns : float\n    The saturation intensity.\nas_cmap : bool\n    If True, return a matplotlib colormap object.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\nhls_palette : Make a palette using evenly spaced hues in the HSL system.\n\nExamples\n--------\n.. include:: ../docstrings/husl_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "h": {
          "type": "any",
          "default": "0.01",
          "description": " "
        },
        "s": {
          "type": "any",
          "default": "0.9",
          "description": " "
        },
        "l": {
          "type": "any",
          "default": "0.65",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "jointplot",
    "type": "function",
    "description": "Draw a plot of two variables with bivariate and univariate graphs.\n\nThis function provides a convenient interface to the :class:`JointGrid`\nclass, with several canned plot kinds. This is intended to be a fairly\nlightweight wrapper; if you need more flexibility, you should use\n:class:`JointGrid` directly.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nkind : { \"scatter\" | \"kde\" | \"hist\" | \"hex\" | \"reg\" | \"resid\" }\n    Kind of plot to draw. See the examples for references to the underlying functions.\nheight : numeric\n    Size of the figure (it will be square).\nratio : numeric\n    Ratio of joint axes height to marginal axes height.\nspace : numeric\n    Space between the joint and marginal axes\ndropna : bool\n    If True, remove observations that are missing from ``x`` and ``y``.\n{x, y}lim : pairs of numbers\n    Axis limits to set before plotting.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Single color specification for when hue mapping is not used. Otherwise, the\n    plot will try to hook into the matplotlib property cycle.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nmarginal_ticks : bool\n    If False, suppress ticks on the count/density axis of the marginal plots.\n{joint, marginal}_kws : dicts\n    Additional keyword arguments for the plot components.\nkwargs\n    Additional keyword arguments are passed to the function used to\n    draw the plot on the joint Axes, superseding items in the\n    ``joint_kws`` dictionary.\n\nReturns\n-------\n:class:`JointGrid`\n    An object managing multiple subplots that correspond to joint and marginal axes\n    for plotting a bivariate relationship or distribution.\n\nSee Also\n--------\nJointGrid : Set up a figure with joint and marginal views on bivariate data.\nPairGrid : Set up a figure with joint and marginal views on multiple variables.\njointplot : Draw multiple bivariate plots with univariate marginal distributions.\n\nExamples\n--------\n\n.. include:: ../docstrings/jointplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kind": {
          "type": "any",
          "default": "scatter",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "ratio": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "space": {
          "type": "any",
          "default": "0.2",
          "description": " "
        },
        "dropna": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "xlim": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ylim": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "marginal_ticks": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "joint_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "marginal_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "kdeplot",
    "type": "function",
    "description": "Plot univariate or bivariate distributions using kernel density estimation.\n\nA kernel density estimate (KDE) plot is a method for visualizing the\ndistribution of observations in a dataset, analogous to a histogram. KDE\nrepresents the data using a continuous probability density curve in one or\nmore dimensions.\n\nThe approach is explained further in the :ref:`user guide <tutorial_kde>`.\n\nRelative to a histogram, KDE can produce a plot that is less cluttered and\nmore interpretable, especially when drawing multiple distributions. But it\nhas the potential to introduce distortions if the underlying distribution is\nbounded or not smooth. Like a histogram, the quality of the representation\nalso depends on the selection of good smoothing parameters.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nweights : vector or key in ``data``\n    If provided, weight the kernel density estimation using these values.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Single color specification for when hue mapping is not used. Otherwise, the\n    plot will try to hook into the matplotlib property cycle.\nfill : bool or None\n    If True, fill in the area under univariate density curves or between\n    bivariate contours. If None, the default depends on ``multiple``.\nmultiple : {{\"layer\", \"stack\", \"fill\"}}\n    Method for drawing multiple elements when semantic mapping creates subsets.\n    Only relevant with univariate data.\ncommon_norm : bool\n    If True, scale each conditional density by the number of observations\n    such that the total area under all densities sums to 1. Otherwise,\n    normalize each density independently.\ncommon_grid : bool\n    If True, use the same evaluation grid for each kernel density estimate.\n    Only relevant with univariate data.\ncumulative : bool, optional\n    If True, estimate a cumulative distribution function. Requires scipy.\nbw_method : string, scalar, or callable, optional\n    Method for determining the smoothing bandwidth to use; passed to\n    :class:`scipy.stats.gaussian_kde`.\nbw_adjust : number, optional\n    Factor that multiplicatively scales the value chosen using\n    ``bw_method``. Increasing will make the curve smoother. See Notes.\nwarn_singular : bool\n    If True, issue a warning when trying to estimate the density of data\n    with zero variance.\nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\nlevels : int or vector\n    Number of contour levels or values to draw contours at. A vector argument\n    must have increasing values in [0, 1]. Levels correspond to iso-proportions\n    of the density: e.g., 20% of the probability mass will lie below the\n    contour drawn for 0.2. Only relevant with bivariate data.\nthresh : number in [0, 1]\n    Lowest iso-proportion level at which to draw a contour line. Ignored when\n    ``levels`` is a vector. Only relevant with bivariate data.\ngridsize : int\n    Number of points on each dimension of the evaluation grid.\ncut : number, optional\n    Factor, multiplied by the smoothing bandwidth, that determines how\n    far the evaluation grid extends past the extreme datapoints. When\n    set to 0, truncate the curve at the data limits.\nclip : pair of numbers or None, or a pair of such pairs\n    Do not evaluate the density outside of these limits.\nlegend : bool\n    If False, suppress the legend for semantic variables.\ncbar : bool\n    If True, add a colorbar to annotate the color mapping in a bivariate plot.\n    Note: Does not currently support plots with a ``hue`` variable well.\ncbar_ax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the colorbar.\ncbar_kws : dict\n    Additional parameters passed to :meth:`matplotlib.figure.Figure.colorbar`.\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs\n    Other keyword arguments are passed to one of the following matplotlib\n    functions:\n\n    - :meth:`matplotlib.axes.Axes.plot` (univariate, ``fill=False``),\n    - :meth:`matplotlib.axes.Axes.fill_between` (univariate, ``fill=True``),\n    - :meth:`matplotlib.axes.Axes.contour` (bivariate, ``fill=False``),\n    - :meth:`matplotlib.axes.contourf` (bivariate, ``fill=True``).\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nSee Also\n--------\ndisplot : Figure-level interface to distribution plot functions.\nhistplot : Plot a histogram of binned counts with optional normalization or smoothing.\necdfplot : Plot empirical cumulative distribution functions.\njointplot : Draw a bivariate plot with univariate marginal distributions.\nviolinplot : Draw an enhanced boxplot using kernel density estimation.\n\nNotes\n-----\n\nThe *bandwidth*, or standard deviation of the smoothing kernel, is an\nimportant parameter. Misspecification of the bandwidth can produce a\ndistorted representation of the data. Much like the choice of bin width in a\nhistogram, an over-smoothed curve can erase true features of a\ndistribution, while an under-smoothed curve can create false features out of\nrandom variability. The rule-of-thumb that sets the default bandwidth works\nbest when the true distribution is smooth, unimodal, and roughly bell-shaped.\nIt is always a good idea to check the default behavior by using ``bw_adjust``\nto increase or decrease the amount of smoothing.\n\nBecause the smoothing algorithm uses a Gaussian kernel, the estimated density\ncurve can extend to values that do not make sense for a particular dataset.\nFor example, the curve may be drawn over negative values when smoothing data\nthat are naturally positive. The ``cut`` and ``clip`` parameters can be used\nto control the extent of the curve, but datasets that have many observations\nclose to a natural boundary may be better served by a different visualization\nmethod.\n\nSimilar considerations apply when a dataset is naturally discrete or \"spiky\"\n(containing many repeated observations of the same value). Kernel density\nestimation will always produce a smooth curve, which would be misleading\nin these situations.\n\nThe units on the density axis are a common source of confusion. While kernel\ndensity estimation produces a probability distribution, the height of the curve\nat each point gives a density, not a probability. A probability can be obtained\nonly by integrating the density across a range. The curve is normalized so\nthat the integral over all possible values is 1, meaning that the scale of\nthe density axis depends on the data values.\n\nExamples\n--------\n\n.. include:: ../docstrings/kdeplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "multiple": {
          "type": "any",
          "default": "layer",
          "description": " "
        },
        "common_norm": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "common_grid": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "cumulative": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "bw_method": {
          "type": "any",
          "default": "scott",
          "description": " "
        },
        "bw_adjust": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "warn_singular": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "levels": {
          "type": "any",
          "default": "10",
          "description": " "
        },
        "thresh": {
          "type": "any",
          "default": "0.05",
          "description": " "
        },
        "gridsize": {
          "type": "any",
          "default": "200",
          "description": " "
        },
        "cut": {
          "type": "any",
          "default": "3",
          "description": " "
        },
        "clip": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "cbar": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "cbar_ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cbar_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "light_palette",
    "type": "function",
    "description": "Make a sequential palette that blends from light to ``color``.\n\nThe ``color`` parameter can be specified in a number of ways, including\nall options for defining a color in matplotlib and several additional\ncolor spaces that are handled by seaborn. You can also use the database\nof named colors from the XKCD color survey.\n\nIf you are using a Jupyter notebook, you can also choose this palette\ninteractively with the :func:`choose_light_palette` function.\n\nParameters\n----------\ncolor : base color for high values\n    hex code, html color name, or tuple in `input` space.\nn_colors : int, optional\n    number of colors in the palette\nreverse : bool, optional\n    if True, reverse the direction of the blend\nas_cmap : bool, optional\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\ninput : {'rgb', 'hls', 'husl', xkcd'}\n    Color space to interpret the input color. The first three options\n    apply to tuple inputs and the latter applies to string inputs.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\ndark_palette : Create a sequential palette with dark low values.\ndiverging_palette : Create a diverging palette with two colors.\n\nExamples\n--------\n.. include:: ../docstrings/light_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "reverse": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "input": {
          "type": "any",
          "default": "rgb",
          "description": " "
        }
      },
      "required": [
        "color"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "lineplot",
    "type": "function",
    "description": "Draw a line plot with possibility of several semantic groupings.\n\nThe relationship between `x` and `y` can be shown for different subsets\nof the data using the `hue`, `size`, and `style` parameters. These\nparameters control what visual semantics are used to identify the different\nsubsets. It is possible to show up to three dimensions independently by\nusing all three semantic types, but this style of plot can be hard to\ninterpret and is often ineffective. Using redundant semantics (i.e. both\n`hue` and `style` for the same variable) can be helpful for making\ngraphics more accessible.\n\nSee the :ref:`tutorial <relational_tutorial>` for more information.\n\nThe default treatment of the `hue` (and to a lesser extent, `size`)\nsemantic, if present, depends on whether the variable is inferred to\nrepresent \"numeric\" or \"categorical\" data. In particular, numeric variables\nare represented with a sequential colormap by default, and the legend\nentries show regular \"ticks\" with values that may or may not exist in the\ndata. This behavior can be controlled through various parameters, as\ndescribed and illustrated below.\n\nBy default, the plot aggregates over multiple `y` values at each value of\n`x` and shows an estimate of the central tendency and a confidence\ninterval for that estimate.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in `data`\n    Grouping variable that will produce lines with different colors.\n    Can be either categorical or numeric, although color mapping will\n    behave differently in latter case.\nsize : vector or key in `data`\n    Grouping variable that will produce lines with different widths.\n    Can be either categorical or numeric, although size mapping will\n    behave differently in latter case.\nstyle : vector or key in `data`\n    Grouping variable that will produce lines with different dashes\n    and/or markers. Can have a numeric dtype but will always be treated\n    as categorical.\nunits : vector or key in `data`\n    Grouping variable identifying sampling units. When used, a separate\n    line will be drawn for each unit with appropriate semantics, but no\n    legend entry will be added. Useful for showing distribution of\n    experimental replicates when exact identities are not needed.\nweights : vector or key in `data`\n    Data values or column used to compute weighted estimation.\n    Note that use of weights currently limits the choice of statistics\n    to a 'mean' estimator and 'ci' errorbar.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nsizes : list, dict, or tuple\n    An object that determines how sizes are chosen when `size` is used.\n    List or dict arguments should provide a size for each unique data value,\n    which forces a categorical interpretation. The argument may also be a\n    min, max tuple.\nsize_order : list\n    Specified order for appearance of the `size` variable levels,\n    otherwise they are determined from the data. Not relevant when the\n    `size` variable is numeric.\nsize_norm : tuple or Normalize object\n    Normalization in data units for scaling plot objects when the\n    `size` variable is numeric.\ndashes : boolean, list, or dictionary\n    Object determining how to draw the lines for different levels of the\n    `style` variable. Setting to `True` will use default dash codes, or\n    you can pass a list of dash codes or a dictionary mapping levels of the\n    `style` variable to dash codes. Setting to `False` will use solid\n    lines for all subsets. Dashes are specified as in matplotlib: a tuple\n    of `(segment, gap)` lengths, or an empty string to draw a solid line.\nmarkers : boolean, list, or dictionary\n    Object determining how to draw the markers for different levels of the\n    `style` variable. Setting to `True` will use default markers, or\n    you can pass a list of markers or a dictionary mapping levels of the\n    `style` variable to markers. Setting to `False` will draw\n    marker-less lines.  Markers are specified as in matplotlib.\nstyle_order : list\n    Specified order for appearance of the `style` variable levels\n    otherwise they are determined from the data. Not relevant when the\n    `style` variable is numeric.\nestimator : name of pandas method or callable or None\n    Method for aggregating across multiple observations of the `y`\n    variable at the same `x` level. If `None`, all observations will\n    be drawn.\nerrorbar : string, (string, number) tuple, or callable\n    Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n    with a method name and a level parameter, or a function that maps from a\n    vector to a (min, max) interval, or None to hide errorbar. See the\n    :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\nn_boot : int\n    Number of bootstraps to use for computing the confidence interval.\nseed : int, numpy.random.Generator, or numpy.random.RandomState\n    Seed or random number generator for reproducible bootstrapping.\norient : \"x\" or \"y\"\n    Dimension along which the data are sorted / aggregated. Equivalently,\n    the \"independent variable\" of the resulting function.\nsort : boolean\n    If True, the data will be sorted by the x and y variables, otherwise\n    lines will connect points in the order they appear in the dataset.\nerr_style : \"band\" or \"bars\"\n    Whether to draw the confidence intervals with translucent error bands\n    or discrete error bars.\nerr_kws : dict of keyword arguments\n    Additional parameters to control the aesthetics of the error bars. The\n    kwargs are passed either to :meth:`matplotlib.axes.Axes.fill_between`\n    or :meth:`matplotlib.axes.Axes.errorbar`, depending on `err_style`.\nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\nci : int or \"sd\" or None\n    Size of the confidence interval to draw when aggregating.\n\n    .. deprecated:: 0.12.0\n        Use the new `errorbar` parameter for more flexibility.\n\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs : key, value mappings\n    Other keyword arguments are passed down to\n    :meth:`matplotlib.axes.Axes.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nSee Also\n--------\nscatterplot : Plot data using points.\npointplot : Plot point estimates and CIs using markers and lines.\n\nExamples\n--------\n\n.. include:: ../docstrings/lineplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "style": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "sizes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "dashes": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "style_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "estimator": {
          "type": "any",
          "default": "mean",
          "description": " "
        },
        "errorbar": {
          "type": "any",
          "default": "('ci', 95)",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "x",
          "description": " "
        },
        "sort": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "err_style": {
          "type": "any",
          "default": "band",
          "description": " "
        },
        "err_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "deprecated",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "lmplot",
    "type": "function",
    "description": "Plot data and regression model fits across a FacetGrid.\n\nThis function combines :func:`regplot` and :class:`FacetGrid`. It is\nintended as a convenient interface to fit regression models across\nconditional subsets of a dataset.\n\nWhen thinking about how to assign variables to different facets, a general\nrule is that it makes sense to use ``hue`` for the most important\ncomparison, followed by ``col`` and ``row``. However, always think about\nyour particular dataset and the goals of the visualization you are\ncreating.\n\nThere are a number of mutually exclusive options for estimating the\nregression model. See the :ref:`tutorial <regression_tutorial>` for more\ninformation.    \n\nThe parameters to this function span most of the options in\n:class:`FacetGrid`, although there may be occasional cases where you will\nwant to use that class and :func:`regplot` directly.\n\nParameters\n----------\ndata : DataFrame\n    Tidy (\"long-form\") dataframe where each column is a variable and each\n    row is an observation.    \nx, y : strings, optional\n    Input variables; these should be column names in ``data``.\nhue, col, row : strings\n    Variables that define subsets of the data, which will be drawn on\n    separate facets in the grid. See the ``*_order`` parameters to control\n    the order of levels of this variable.\npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \ncol_wrap : int\n    \"Wrap\" the column variable at this width, so that the column facets\n    span multiple rows. Incompatible with a ``row`` facet.    \nheight : scalar\n    Height (in inches) of each facet. See also: ``aspect``.    \naspect : scalar\n    Aspect ratio of each facet, so that ``aspect * height`` gives the width\n    of each facet in inches.    \nmarkers : matplotlib marker code or list of marker codes, optional\n    Markers for the scatterplot. If a list, each marker in the list will be\n    used for each level of the ``hue`` variable.\nshare{x,y} : bool, 'col', or 'row' optional\n    If true, the facets will share y axes across columns and/or x axes\n    across rows.    \n\n    .. deprecated:: 0.12.0\n        Pass using the `facet_kws` dictionary.\n\n{hue,col,row}_order : lists, optional\n    Order for the levels of the faceting variables. By default, this will\n    be the order that the levels appear in ``data`` or, if the variables\n    are pandas categoricals, the category order.\nlegend : bool, optional\n    If ``True`` and there is a ``hue`` variable, add a legend.\nlegend_out : bool\n    If ``True``, the figure size will be extended, and the legend will be\n    drawn outside the plot on the center right.    \n\n    .. deprecated:: 0.12.0\n        Pass using the `facet_kws` dictionary.\n\nx_estimator : callable that maps vector -> scalar, optional\n    Apply this function to each unique value of ``x`` and plot the\n    resulting estimate. This is useful when ``x`` is a discrete variable.\n    If ``x_ci`` is given, this estimate will be bootstrapped and a\n    confidence interval will be drawn.    \nx_bins : int or vector, optional\n    Bin the ``x`` variable into discrete bins and then estimate the central\n    tendency and a confidence interval. This binning only influences how\n    the scatterplot is drawn; the regression is still fit to the original\n    data.  This parameter is interpreted either as the number of\n    evenly-sized (not necessary spaced) bins or the positions of the bin\n    centers. When this parameter is used, it implies that the default of\n    ``x_estimator`` is ``numpy.mean``.    \nx_ci : \"ci\", \"sd\", int in [0, 100] or None, optional\n    Size of the confidence interval used when plotting a central tendency\n    for discrete values of ``x``. If ``\"ci\"``, defer to the value of the\n    ``ci`` parameter. If ``\"sd\"``, skip bootstrapping and show the\n    standard deviation of the observations in each bin.    \nscatter : bool, optional\n    If ``True``, draw a scatterplot with the underlying observations (or\n    the ``x_estimator`` values).    \nfit_reg : bool, optional\n    If ``True``, estimate and plot a regression model relating the ``x``\n    and ``y`` variables.    \nci : int in [0, 100] or None, optional\n    Size of the confidence interval for the regression estimate. This will\n    be drawn using translucent bands around the regression line. The\n    confidence interval is estimated using a bootstrap; for large\n    datasets, it may be advisable to avoid that computation by setting\n    this parameter to None.    \nn_boot : int, optional\n    Number of bootstrap resamples used to estimate the ``ci``. The default\n    value attempts to balance time and stability; you may want to increase\n    this value for \"final\" versions of plots.    \nunits : variable name in ``data``, optional\n    If the ``x`` and ``y`` observations are nested within sampling units,\n    those can be specified here. This will be taken into account when\n    computing the confidence intervals by performing a multilevel bootstrap\n    that resamples both units and observations (within unit). This does not\n    otherwise influence how the regression is estimated or drawn.    \nseed : int, numpy.random.Generator, or numpy.random.RandomState, optional\n    Seed or random number generator for reproducible bootstrapping.    \norder : int, optional\n    If ``order`` is greater than 1, use ``numpy.polyfit`` to estimate a\n    polynomial regression.    \nlogistic : bool, optional\n    If ``True``, assume that ``y`` is a binary variable and use\n    ``statsmodels`` to estimate a logistic regression model. Note that this\n    is substantially more computationally intensive than linear regression,\n    so you may wish to decrease the number of bootstrap resamples\n    (``n_boot``) or set ``ci`` to None.    \nlowess : bool, optional\n    If ``True``, use ``statsmodels`` to estimate a nonparametric lowess\n    model (locally weighted linear regression). Note that confidence\n    intervals cannot currently be drawn for this kind of model.    \nrobust : bool, optional\n    If ``True``, use ``statsmodels`` to estimate a robust regression. This\n    will de-weight outliers. Note that this is substantially more\n    computationally intensive than standard linear regression, so you may\n    wish to decrease the number of bootstrap resamples (``n_boot``) or set\n    ``ci`` to None.    \nlogx : bool, optional\n    If ``True``, estimate a linear regression of the form y ~ log(x), but\n    plot the scatterplot and regression model in the input space. Note that\n    ``x`` must be positive for this to work.    \n{x,y}_partial : strings in ``data`` or matrices\n    Confounding variables to regress out of the ``x`` or ``y`` variables\n    before plotting.    \ntruncate : bool, optional\n    If ``True``, the regression line is bounded by the data limits. If\n    ``False``, it extends to the ``x`` axis limits.\n\n{x,y}_jitter : floats, optional\n    Add uniform random noise of this size to either the ``x`` or ``y``\n    variables. The noise is added to a copy of the data after fitting the\n    regression, and only influences the look of the scatterplot. This can\n    be helpful when plotting variables that take discrete values.    \n{scatter,line}_kws : dictionaries\n    Additional keyword arguments to pass to ``plt.scatter`` and\n    ``plt.plot``.    \nfacet_kws : dict\n    Dictionary of keyword arguments for :class:`FacetGrid`.\n\nSee Also\n--------\nregplot : Plot data and a conditional model fit.\nFacetGrid : Subplot grid for plotting conditional relationships.\npairplot : Combine :func:`regplot` and :class:`PairGrid` (when used with\n           ``kind=\"reg\"``).\n\nNotes\n-----\n\nThe :func:`regplot` and :func:`lmplot` functions are closely related, but\nthe former is an axes-level function while the latter is a figure-level\nfunction that combines :func:`regplot` and :class:`FacetGrid`.    \n\nExamples\n--------\n\n.. include:: ../docstrings/lmplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_wrap": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "aspect": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "o",
          "description": " "
        },
        "sharex": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "sharey": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "legend_out": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_estimator": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_bins": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_ci": {
          "type": "any",
          "default": "ci",
          "description": " "
        },
        "scatter": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "fit_reg": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "95",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "logistic": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "lowess": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "robust": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "logx": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "x_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "truncate": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "x_jitter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_jitter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "scatter_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "line_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "facet_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "data"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "load_dataset",
    "type": "function",
    "description": "Load an example dataset from the online repository (requires internet).\n\nThis function provides quick access to a small number of example datasets\nthat are useful for documenting seaborn or generating reproducible examples\nfor bug reports. It is not necessary for normal usage.\n\nNote that some of the datasets have a small amount of preprocessing applied\nto define a proper ordering for categorical variables.\n\nUse :func:`get_dataset_names` to see a list of available datasets.\n\nParameters\n----------\nname : str\n    Name of the dataset (``{name}.csv`` on\n    https://github.com/mwaskom/seaborn-data).\ncache : boolean, optional\n    If True, try to load from the local cache first, and save to the cache\n    if a download is required.\ndata_home : string, optional\n    The directory in which to cache data; see :func:`get_data_home`.\nkws : keys and values, optional\n    Additional keyword arguments are passed to passed through to\n    :func:`pandas.read_csv`.\n\nReturns\n-------\ndf : :class:`pandas.DataFrame`\n    Tabular data, possibly with some preprocessing applied.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "cache": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "data_home": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kws": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "name",
        "kws"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "move_legend",
    "type": "function",
    "description": "Recreate a plot's legend at a new location.\n\nThe name is a slight misnomer. Matplotlib legends do not expose public\ncontrol over their position parameters. So this function creates a new legend,\ncopying over the data from the original object, which is then removed.\n\nParameters\n----------\nobj : the object with the plot\n    This argument can be either a seaborn or matplotlib object:\n\n    - :class:`seaborn.FacetGrid` or :class:`seaborn.PairGrid`\n    - :class:`matplotlib.axes.Axes` or :class:`matplotlib.figure.Figure`\n\nloc : str or int\n    Location argument, as in :meth:`matplotlib.axes.Axes.legend`.\n\nkwargs\n    Other keyword arguments are passed to :meth:`matplotlib.axes.Axes.legend`.\n\nExamples\n--------\n\n.. include:: ../docstrings/move_legend.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "obj": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "loc": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "obj",
        "loc",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "mpl_palette",
    "type": "function",
    "description": "Return a palette or colormap from the matplotlib registry.\n\nFor continuous palettes, evenly-spaced discrete samples are chosen while\nexcluding the minimum and maximum value in the colormap to provide better\ncontrast at the extremes.\n\nFor qualitative palettes (e.g. those from colorbrewer), exact values are\nindexed (rather than interpolated), but fewer than `n_colors` can be returned\nif the palette does not define that many.\n\nParameters\n----------\nname : string\n    Name of the palette. This should be a named matplotlib colormap.\nn_colors : int\n    Number of discrete colors in the palette.\n\nReturns\n-------\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nExamples\n--------\n.. include:: ../docstrings/mpl_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "name"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "pairplot",
    "type": "function",
    "description": "Plot pairwise relationships in a dataset.\n\nBy default, this function will create a grid of Axes such that each numeric\nvariable in ``data`` will by shared across the y-axes across a single row and\nthe x-axes across a single column. The diagonal plots are treated\ndifferently: a univariate distribution plot is drawn to show the marginal\ndistribution of the data in each column.\n\nIt is also possible to show a subset of variables or plot different\nvariables on the rows and columns.\n\nThis is a high-level interface for :class:`PairGrid` that is intended to\nmake it easy to draw a few common styles. You should use :class:`PairGrid`\ndirectly if you need more flexibility.\n\nParameters\n----------\ndata : `pandas.DataFrame`\n    Tidy (long-form) dataframe where each column is a variable and\n    each row is an observation.\nhue : name of variable in ``data``\n    Variable in ``data`` to map plot aspects to different colors.\nhue_order : list of strings\n    Order for the levels of the hue variable in the palette\npalette : dict or seaborn color palette\n    Set of colors for mapping the ``hue`` variable. If a dict, keys\n    should be values  in the ``hue`` variable.\nvars : list of variable names\n    Variables within ``data`` to use, otherwise use every column with\n    a numeric datatype.\n{x, y}_vars : lists of variable names\n    Variables within ``data`` to use separately for the rows and\n    columns of the figure; i.e. to make a non-square plot.\nkind : {'scatter', 'kde', 'hist', 'reg'}\n    Kind of plot to make.\ndiag_kind : {'auto', 'hist', 'kde', None}\n    Kind of plot for the diagonal subplots. If 'auto', choose based on\n    whether or not ``hue`` is used.\nmarkers : single matplotlib marker code or list\n    Either the marker to use for all scatterplot points or a list of markers\n    with a length the same as the number of levels in the hue variable so that\n    differently colored points will also have different scatterplot\n    markers.\nheight : scalar\n    Height (in inches) of each facet.\naspect : scalar\n    Aspect * height gives the width (in inches) of each facet.\ncorner : bool\n    If True, don't add axes to the upper (off-diagonal) triangle of the\n    grid, making this a \"corner\" plot.\ndropna : boolean\n    Drop missing values from the data before plotting.\n{plot, diag, grid}_kws : dicts\n    Dictionaries of keyword arguments. ``plot_kws`` are passed to the\n    bivariate plotting function, ``diag_kws`` are passed to the univariate\n    plotting function, and ``grid_kws`` are passed to the :class:`PairGrid`\n    constructor.\n\nReturns\n-------\ngrid : :class:`PairGrid`\n    Returns the underlying :class:`PairGrid` instance for further tweaking.\n\nSee Also\n--------\nPairGrid : Subplot grid for more flexible plotting of pairwise relationships.\nJointGrid : Grid for plotting joint and marginal distributions of two variables.\n\nExamples\n--------\n\n.. include:: ../docstrings/pairplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "vars": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_vars": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_vars": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kind": {
          "type": "any",
          "default": "scatter",
          "description": " "
        },
        "diag_kind": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "2.5",
          "description": " "
        },
        "aspect": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "corner": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "dropna": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "plot_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "diag_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "grid_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "data"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "palplot",
    "type": "function",
    "description": "Plot the values in a color palette as a horizontal array.\n\nParameters\n----------\npal : sequence of matplotlib colors\n    colors, i.e. as returned by seaborn.color_palette()\nsize :\n    scaling factor for size of plot",
    "parameters": {
      "type": "object",
      "properties": {
        "pal": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "1",
          "description": " "
        }
      },
      "required": [
        "pal"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotting_context",
    "type": "function",
    "description": "Get the parameters that control the scaling of plot elements.\n\nThese parameters correspond to label size, line thickness, etc. For more\ninformation, see the :doc:`aesthetics tutorial <../tutorial/aesthetics>`.\n\nThe base context is \"notebook\", and the other contexts are \"paper\", \"talk\",\nand \"poster\", which are version of the notebook parameters scaled by different\nvalues. Font elements can also be scaled independently of (but relative to)\nthe other values.\n\nThis function can also be used as a context manager to temporarily\nalter the global defaults. See :func:`set_theme` or :func:`set_context`\nto modify the global defaults for all plots.\n\nParameters\n----------\ncontext : None, dict, or one of {paper, notebook, talk, poster}\n    A dictionary of parameters or the name of a preconfigured set.\nfont_scale : float, optional\n    Separate scaling factor to independently scale the size of the\n    font elements.\nrc : dict, optional\n    Parameter mappings to override the values in the preset seaborn\n    context dictionaries. This only updates parameters that are\n    considered part of the context definition.\n\nExamples\n--------\n\n.. include:: ../docstrings/plotting_context.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "context": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "font_scale": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "pointplot",
    "type": "function",
    "description": "Show point estimates and errors using lines with markers.\n\nA point plot represents an estimate of central tendency for a numeric\nvariable by the position of the dot and provides some indication of the\nuncertainty around that estimate using error bars.\n\nPoint plots can be more useful than bar plots for focusing comparisons\nbetween different levels of one or more categorical variables. They are\nparticularly adept at showing interactions: how the relationship between\nlevels of one categorical variable changes across levels of a second\ncategorical variable. The lines that join each point from the same `hue`\nlevel allow interactions to be judged by differences in slope, which is\neasier for the eyes than comparing the heights of several groups of points\nor bars.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \nestimator : string or callable that maps vector -> scalar\n    Statistical function to estimate within each categorical bin.\nerrorbar : string, (string, number) tuple, callable or None\n    Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n    with a method name and a level parameter, or a function that maps from a\n    vector to a (min, max) interval, or None to hide errorbar. See the\n    :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\n\n    .. versionadded:: v0.12.0\nn_boot : int\n    Number of bootstrap samples used to compute confidence intervals.\nseed : int, `numpy.random.Generator`, or `numpy.random.RandomState`\n    Seed or random number generator for reproducible bootstrapping.\nunits : name of variable in `data` or vector data\n    Identifier of sampling units; used by the errorbar function to\n    perform a multilevel bootstrap and account for repeated measures\nweights : name of variable in `data` or vector data\n    Data values or column used to compute weighted statistics.\n    Note that the use of weights may limit other statistical options.\n\n    .. versionadded:: v0.13.1    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nmarkers : string or list of strings\n    Markers to use for each of the `hue` levels.\nlinestyles : string or list of strings\n    Line styles to use for each of the `hue` levels.\ndodge : bool or float\n    Amount to separate the points for each level of the `hue` variable along\n    the categorical axis. Setting to `True` will apply a small default.\nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncapsize : float\n    Width of the \"caps\" on error bars, relative to bar spacing.    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nerr_kws : dict\n    Parameters of :class:`matplotlib.lines.Line2D`, for the error bar artists.\n\n    .. versionadded:: v0.13.0    \nci : float\n    Level of the confidence interval to show, in [0, 100].\n\n    .. deprecated:: v0.12.0\n        Use `errorbar=(\"ci\", ...)`.    \nerrwidth : float\n    Thickness of error bar lines (and caps), in points.\n\n    .. deprecated:: 0.13.0\n        Use `err_kws={'linewidth': ...}`.    \njoin : bool\n    If `True`, connect point estimates with a line.\n\n    .. deprecated:: v0.13.0\n        Set `linestyle=\"none\"` to remove the lines between the points.\nscale : float\n    Scale factor for the plot elements.\n\n    .. deprecated:: v0.13.0\n        Control element sizes with :class:`matplotlib.lines.Line2D` parameters.\nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other parameters are passed through to :class:`matplotlib.lines.Line2D`.\n\n    .. versionadded:: v0.13.0\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nbarplot : Show point estimates and confidence intervals using bars.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nNotes\n-----\nIt is important to keep in mind that a point plot shows only the mean (or\nother estimator) value, but in many cases it may be more informative to\nshow the distribution of values at each level of the categorical variables.\nIn that case, other approaches such as a box or violin plot may be more\nappropriate.\n\nExamples\n--------\n.. include:: ../docstrings/pointplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "estimator": {
          "type": "any",
          "default": "mean",
          "description": " "
        },
        "errorbar": {
          "type": "any",
          "default": "('ci', 95)",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "<default>",
          "description": " "
        },
        "linestyles": {
          "type": "any",
          "default": "<default>",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "capsize": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "err_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "errwidth": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "join": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "scale": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "regplot",
    "type": "function",
    "description": "Plot data and a linear regression model fit.\n\nThere are a number of mutually exclusive options for estimating the\nregression model. See the :ref:`tutorial <regression_tutorial>` for more\ninformation.    \n\nParameters\n----------\nx, y: string, series, or vector array\n    Input variables. If strings, these should correspond with column names\n    in ``data``. When pandas objects are used, axes will be labeled with\n    the series name.\ndata : DataFrame\n    Tidy (\"long-form\") dataframe where each column is a variable and each\n    row is an observation.    \nx_estimator : callable that maps vector -> scalar, optional\n    Apply this function to each unique value of ``x`` and plot the\n    resulting estimate. This is useful when ``x`` is a discrete variable.\n    If ``x_ci`` is given, this estimate will be bootstrapped and a\n    confidence interval will be drawn.    \nx_bins : int or vector, optional\n    Bin the ``x`` variable into discrete bins and then estimate the central\n    tendency and a confidence interval. This binning only influences how\n    the scatterplot is drawn; the regression is still fit to the original\n    data.  This parameter is interpreted either as the number of\n    evenly-sized (not necessary spaced) bins or the positions of the bin\n    centers. When this parameter is used, it implies that the default of\n    ``x_estimator`` is ``numpy.mean``.    \nx_ci : \"ci\", \"sd\", int in [0, 100] or None, optional\n    Size of the confidence interval used when plotting a central tendency\n    for discrete values of ``x``. If ``\"ci\"``, defer to the value of the\n    ``ci`` parameter. If ``\"sd\"``, skip bootstrapping and show the\n    standard deviation of the observations in each bin.    \nscatter : bool, optional\n    If ``True``, draw a scatterplot with the underlying observations (or\n    the ``x_estimator`` values).    \nfit_reg : bool, optional\n    If ``True``, estimate and plot a regression model relating the ``x``\n    and ``y`` variables.    \nci : int in [0, 100] or None, optional\n    Size of the confidence interval for the regression estimate. This will\n    be drawn using translucent bands around the regression line. The\n    confidence interval is estimated using a bootstrap; for large\n    datasets, it may be advisable to avoid that computation by setting\n    this parameter to None.    \nn_boot : int, optional\n    Number of bootstrap resamples used to estimate the ``ci``. The default\n    value attempts to balance time and stability; you may want to increase\n    this value for \"final\" versions of plots.    \nunits : variable name in ``data``, optional\n    If the ``x`` and ``y`` observations are nested within sampling units,\n    those can be specified here. This will be taken into account when\n    computing the confidence intervals by performing a multilevel bootstrap\n    that resamples both units and observations (within unit). This does not\n    otherwise influence how the regression is estimated or drawn.    \nseed : int, numpy.random.Generator, or numpy.random.RandomState, optional\n    Seed or random number generator for reproducible bootstrapping.    \norder : int, optional\n    If ``order`` is greater than 1, use ``numpy.polyfit`` to estimate a\n    polynomial regression.    \nlogistic : bool, optional\n    If ``True``, assume that ``y`` is a binary variable and use\n    ``statsmodels`` to estimate a logistic regression model. Note that this\n    is substantially more computationally intensive than linear regression,\n    so you may wish to decrease the number of bootstrap resamples\n    (``n_boot``) or set ``ci`` to None.    \nlowess : bool, optional\n    If ``True``, use ``statsmodels`` to estimate a nonparametric lowess\n    model (locally weighted linear regression). Note that confidence\n    intervals cannot currently be drawn for this kind of model.    \nrobust : bool, optional\n    If ``True``, use ``statsmodels`` to estimate a robust regression. This\n    will de-weight outliers. Note that this is substantially more\n    computationally intensive than standard linear regression, so you may\n    wish to decrease the number of bootstrap resamples (``n_boot``) or set\n    ``ci`` to None.    \nlogx : bool, optional\n    If ``True``, estimate a linear regression of the form y ~ log(x), but\n    plot the scatterplot and regression model in the input space. Note that\n    ``x`` must be positive for this to work.    \n{x,y}_partial : strings in ``data`` or matrices\n    Confounding variables to regress out of the ``x`` or ``y`` variables\n    before plotting.    \ntruncate : bool, optional\n    If ``True``, the regression line is bounded by the data limits. If\n    ``False``, it extends to the ``x`` axis limits.\n\n{x,y}_jitter : floats, optional\n    Add uniform random noise of this size to either the ``x`` or ``y``\n    variables. The noise is added to a copy of the data after fitting the\n    regression, and only influences the look of the scatterplot. This can\n    be helpful when plotting variables that take discrete values.    \nlabel : string\n    Label to apply to either the scatterplot or regression line (if\n    ``scatter`` is ``False``) for use in a legend.\ncolor : matplotlib color\n    Color to apply to all plot elements; will be superseded by colors\n    passed in ``scatter_kws`` or ``line_kws``.\nmarker : matplotlib marker code\n    Marker to use for the scatterplot glyphs.\n{scatter,line}_kws : dictionaries\n    Additional keyword arguments to pass to ``plt.scatter`` and\n    ``plt.plot``.    \nax : matplotlib Axes, optional\n    Axes object to draw the plot onto, otherwise uses the current Axes.\n\nReturns\n-------\nax : matplotlib Axes\n    The Axes object containing the plot.\n\nSee Also\n--------\nlmplot : Combine :func:`regplot` and :class:`FacetGrid` to plot multiple\n         linear relationships in a dataset.\njointplot : Combine :func:`regplot` and :class:`JointGrid` (when used with\n            ``kind=\"reg\"``).\npairplot : Combine :func:`regplot` and :class:`PairGrid` (when used with\n           ``kind=\"reg\"``).\nresidplot : Plot the residuals of a linear regression model.\n\nNotes\n-----\n\nThe :func:`regplot` and :func:`lmplot` functions are closely related, but\nthe former is an axes-level function while the latter is a figure-level\nfunction that combines :func:`regplot` and :class:`FacetGrid`.    \n\n\nIt's also easy to combine :func:`regplot` and :class:`JointGrid` or\n:class:`PairGrid` through the :func:`jointplot` and :func:`pairplot`\nfunctions, although these do not directly accept all of :func:`regplot`'s\nparameters.\n\nExamples\n--------\n\n.. include:: ../docstrings/regplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_estimator": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_bins": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_ci": {
          "type": "any",
          "default": "ci",
          "description": " "
        },
        "scatter": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "fit_reg": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "95",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "logistic": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "lowess": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "robust": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "logx": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "x_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "truncate": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "dropna": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "x_jitter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_jitter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "label": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "marker": {
          "type": "any",
          "default": "o",
          "description": " "
        },
        "scatter_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "line_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "relplot",
    "type": "function",
    "description": "Figure-level interface for drawing relational plots onto a FacetGrid.\n\nThis function provides access to several different axes-level functions\nthat show the relationship between two variables with semantic mappings\nof subsets. The `kind` parameter selects the underlying axes-level\nfunction to use:\n\n- :func:`scatterplot` (with `kind=\"scatter\"`; the default)\n- :func:`lineplot` (with `kind=\"line\"`)\n\nExtra keyword arguments are passed to the underlying function, so you\nshould refer to the documentation for each to see kind-specific options.\n\nThe relationship between `x` and `y` can be shown for different subsets\nof the data using the `hue`, `size`, and `style` parameters. These\nparameters control what visual semantics are used to identify the different\nsubsets. It is possible to show up to three dimensions independently by\nusing all three semantic types, but this style of plot can be hard to\ninterpret and is often ineffective. Using redundant semantics (i.e. both\n`hue` and `style` for the same variable) can be helpful for making\ngraphics more accessible.\n\nSee the :ref:`tutorial <relational_tutorial>` for more information.\n\nThe default treatment of the `hue` (and to a lesser extent, `size`)\nsemantic, if present, depends on whether the variable is inferred to\nrepresent \"numeric\" or \"categorical\" data. In particular, numeric variables\nare represented with a sequential colormap by default, and the legend\nentries show regular \"ticks\" with values that may or may not exist in the\ndata. This behavior can be controlled through various parameters, as\ndescribed and illustrated below.\n\nAfter plotting, the :class:`FacetGrid` with the plot is returned and can\nbe used directly to tweak supporting plot details or add other layers.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in `data`\n    Grouping variable that will produce elements with different colors.\n    Can be either categorical or numeric, although color mapping will\n    behave differently in latter case.\nsize : vector or key in `data`\n    Grouping variable that will produce elements with different sizes.\n    Can be either categorical or numeric, although size mapping will\n    behave differently in latter case.\nstyle : vector or key in `data`\n    Grouping variable that will produce elements with different styles.\n    Can have a numeric dtype but will always be treated as categorical.\nunits : vector or key in `data`\n    Grouping variable identifying sampling units. When used, a separate\n    line will be drawn for each unit with appropriate semantics, but no\n    legend entry will be added. Useful for showing distribution of\n    experimental replicates when exact identities are not needed.\nweights : vector or key in `data`\n    Data values or column used to compute weighted estimation.\n    Note that use of weights currently limits the choice of statistics\n    to a 'mean' estimator and 'ci' errorbar.\nrow, col : vectors or keys in ``data``\n    Variables that define subsets to plot on different facets.    \ncol_wrap : int\n    \"Wrap\" the column variable at this width, so that the column facets\n    span multiple rows. Incompatible with a ``row`` facet.    \nrow_order, col_order : lists of strings\n    Order to organize the rows and/or columns of the grid in, otherwise the\n    orders are inferred from the data objects.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nsizes : list, dict, or tuple\n    An object that determines how sizes are chosen when `size` is used.\n    List or dict arguments should provide a size for each unique data value,\n    which forces a categorical interpretation. The argument may also be a\n    min, max tuple.\nsize_order : list\n    Specified order for appearance of the `size` variable levels,\n    otherwise they are determined from the data. Not relevant when the\n    `size` variable is numeric.\nsize_norm : tuple or Normalize object\n    Normalization in data units for scaling plot objects when the\n    `size` variable is numeric.\nstyle_order : list\n    Specified order for appearance of the `style` variable levels\n    otherwise they are determined from the data. Not relevant when the\n    `style` variable is numeric.\ndashes : boolean, list, or dictionary\n    Object determining how to draw the lines for different levels of the\n    `style` variable. Setting to `True` will use default dash codes, or\n    you can pass a list of dash codes or a dictionary mapping levels of the\n    `style` variable to dash codes. Setting to `False` will use solid\n    lines for all subsets. Dashes are specified as in matplotlib: a tuple\n    of `(segment, gap)` lengths, or an empty string to draw a solid line.\nmarkers : boolean, list, or dictionary\n    Object determining how to draw the markers for different levels of the\n    `style` variable. Setting to `True` will use default markers, or\n    you can pass a list of markers or a dictionary mapping levels of the\n    `style` variable to markers. Setting to `False` will draw\n    marker-less lines.  Markers are specified as in matplotlib.\nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\nkind : string\n    Kind of plot to draw, corresponding to a seaborn relational plot.\n    Options are `\"scatter\"` or `\"line\"`.\nheight : scalar\n    Height (in inches) of each facet. See also: ``aspect``.    \naspect : scalar\n    Aspect ratio of each facet, so that ``aspect * height`` gives the width\n    of each facet in inches.    \nfacet_kws : dict\n    Dictionary of other keyword arguments to pass to :class:`FacetGrid`.\nkwargs : key, value pairings\n    Other keyword arguments are passed through to the underlying plotting\n    function.\n\nReturns\n-------\n:class:`FacetGrid`\n    An object managing one or more subplots that correspond to conditional data\n    subsets with convenient methods for batch-setting of axes attributes.\n\nExamples\n--------\n\n.. include:: ../docstrings/relplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "style": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_wrap": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "sizes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "dashes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "style_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "kind": {
          "type": "any",
          "default": "scatter",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "aspect": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "facet_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "reset_defaults",
    "type": "function",
    "description": "Restore all RC params to default settings.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "reset_orig",
    "type": "function",
    "description": "Restore all RC params to original settings (respects custom rc).",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "residplot",
    "type": "function",
    "description": "Plot the residuals of a linear regression.\n\nThis function will regress y on x (possibly as a robust or polynomial\nregression) and then draw a scatterplot of the residuals. You can\noptionally fit a lowess smoother to the residual plot, which can\nhelp in determining if there is structure to the residuals.\n\nParameters\n----------\ndata : DataFrame, optional\n    DataFrame to use if `x` and `y` are column names.\nx : vector or string\n    Data or column name in `data` for the predictor variable.\ny : vector or string\n    Data or column name in `data` for the response variable.\n{x, y}_partial : vectors or string(s) , optional\n    These variables are treated as confounding and are removed from\n    the `x` or `y` variables before plotting.\nlowess : boolean, optional\n    Fit a lowess smoother to the residual scatterplot.\norder : int, optional\n    Order of the polynomial to fit when calculating the residuals.\nrobust : boolean, optional\n    Fit a robust linear regression when calculating the residuals.\ndropna : boolean, optional\n    If True, ignore observations with missing data when fitting and\n    plotting.\nlabel : string, optional\n    Label that will be used in any plot legends.\ncolor : matplotlib color, optional\n    Color to use for all elements of the plot.\n{scatter, line}_kws : dictionaries, optional\n    Additional keyword arguments passed to scatter() and plot() for drawing\n    the components of the plot.\nax : matplotlib axis, optional\n    Plot into this axis, otherwise grab the current axis or make a new\n    one if not existing.\n\nReturns\n-------\nax: matplotlib axes\n    Axes with the regression plot.\n\nSee Also\n--------\nregplot : Plot a simple linear regression model.\njointplot : Draw a :func:`residplot` with univariate marginal distributions\n            (when used with ``kind=\"resid\"``).\n\nExamples\n--------\n\n.. include:: ../docstrings/residplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "lowess": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "robust": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "dropna": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "label": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "scatter_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "line_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rugplot",
    "type": "function",
    "description": "Plot marginal distributions by drawing ticks along the x and y axes.\n\nThis function is intended to complement other plots by showing the location\nof individual observations in an unobtrusive way.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nheight : float\n    Proportion of axes extent covered by each rug element. Can be negative.\nexpand_margins : bool\n    If True, increase the axes margins by the height of the rug to avoid\n    overlap with other elements.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nlegend : bool\n    If False, do not add a legend for semantic variables.\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs\n    Other keyword arguments are passed to\n    :meth:`matplotlib.collections.LineCollection`\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nExamples\n--------\n\n.. include:: ../docstrings/rugplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "0.025",
          "description": " "
        },
        "expand_margins": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "saturate",
    "type": "function",
    "description": "Return a fully saturated color with the same hue.\n\nParameters\n----------\ncolor : matplotlib color\n    hex, rgb-tuple, or html color name\n\nReturns\n-------\nnew_color : rgb tuple\n    saturated color code in RGB tuple representation",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "color"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "scatterplot",
    "type": "function",
    "description": "Draw a scatter plot with possibility of several semantic groupings.\n\nThe relationship between `x` and `y` can be shown for different subsets\nof the data using the `hue`, `size`, and `style` parameters. These\nparameters control what visual semantics are used to identify the different\nsubsets. It is possible to show up to three dimensions independently by\nusing all three semantic types, but this style of plot can be hard to\ninterpret and is often ineffective. Using redundant semantics (i.e. both\n`hue` and `style` for the same variable) can be helpful for making\ngraphics more accessible.\n\nSee the :ref:`tutorial <relational_tutorial>` for more information.\n\nThe default treatment of the `hue` (and to a lesser extent, `size`)\nsemantic, if present, depends on whether the variable is inferred to\nrepresent \"numeric\" or \"categorical\" data. In particular, numeric variables\nare represented with a sequential colormap by default, and the legend\nentries show regular \"ticks\" with values that may or may not exist in the\ndata. This behavior can be controlled through various parameters, as\ndescribed and illustrated below.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in `data`\n    Grouping variable that will produce points with different colors.\n    Can be either categorical or numeric, although color mapping will\n    behave differently in latter case.\nsize : vector or key in `data`\n    Grouping variable that will produce points with different sizes.\n    Can be either categorical or numeric, although size mapping will\n    behave differently in latter case.\nstyle : vector or key in `data`\n    Grouping variable that will produce points with different markers.\n    Can have a numeric dtype but will always be treated as categorical.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nsizes : list, dict, or tuple\n    An object that determines how sizes are chosen when `size` is used.\n    List or dict arguments should provide a size for each unique data value,\n    which forces a categorical interpretation. The argument may also be a\n    min, max tuple.\nsize_order : list\n    Specified order for appearance of the `size` variable levels,\n    otherwise they are determined from the data. Not relevant when the\n    `size` variable is numeric.\nsize_norm : tuple or Normalize object\n    Normalization in data units for scaling plot objects when the\n    `size` variable is numeric.\nmarkers : boolean, list, or dictionary\n    Object determining how to draw the markers for different levels of the\n    `style` variable. Setting to `True` will use default markers, or\n    you can pass a list of markers or a dictionary mapping levels of the\n    `style` variable to markers. Setting to `False` will draw\n    marker-less lines.  Markers are specified as in matplotlib.\nstyle_order : list\n    Specified order for appearance of the `style` variable levels\n    otherwise they are determined from the data. Not relevant when the\n    `style` variable is numeric.\nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs : key, value mappings\n    Other keyword arguments are passed down to\n    :meth:`matplotlib.axes.Axes.scatter`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nSee Also\n--------\nlineplot : Plot data using lines.\nstripplot : Plot a categorical scatter with jitter.\nswarmplot : Plot a categorical scatter with non-overlapping points.\n\nExamples\n--------\n\n.. include:: ../docstrings/scatterplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "style": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "sizes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "style_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set",
    "type": "function",
    "description": "Alias for :func:`set_theme`, which is the preferred interface.\n\nThis function may be removed in the future.",
    "parameters": {
      "type": "object",
      "properties": {
        "args": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_color_codes",
    "type": "function",
    "description": "Change how matplotlib color shorthands are interpreted.\n\nCalling this will change how shorthand codes like \"b\" or \"g\"\nare interpreted by matplotlib in subsequent plots.\n\nParameters\n----------\npalette : {deep, muted, pastel, dark, bright, colorblind}\n    Named seaborn palette to use as the source of colors.\n\nSee Also\n--------\nset : Color codes can be set through the high-level seaborn style\n      manager.\nset_palette : Color codes can also be set through the function that\n              sets the matplotlib color cycle.",
    "parameters": {
      "type": "object",
      "properties": {
        "palette": {
          "type": "any",
          "default": "deep",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_context",
    "type": "function",
    "description": "Set the parameters that control the scaling of plot elements.\n\nThese parameters correspond to label size, line thickness, etc.\nCalling this function modifies the global matplotlib `rcParams`. For more\ninformation, see the :doc:`aesthetics tutorial <../tutorial/aesthetics>`.\n\nThe base context is \"notebook\", and the other contexts are \"paper\", \"talk\",\nand \"poster\", which are version of the notebook parameters scaled by different\nvalues. Font elements can also be scaled independently of (but relative to)\nthe other values.\n\nSee :func:`plotting_context` to get the parameter values.\n\nParameters\n----------\ncontext : dict, or one of {paper, notebook, talk, poster}\n    A dictionary of parameters or the name of a preconfigured set.\nfont_scale : float, optional\n    Separate scaling factor to independently scale the size of the\n    font elements.\nrc : dict, optional\n    Parameter mappings to override the values in the preset seaborn\n    context dictionaries. This only updates parameters that are\n    considered part of the context definition.\n\nExamples\n--------\n\n.. include:: ../docstrings/set_context.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "context": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "font_scale": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_hls_values",
    "type": "function",
    "description": "Independently manipulate the h, l, or s channels of a color.\n\nParameters\n----------\ncolor : matplotlib color\n    hex, rgb-tuple, or html color name\nh, l, s : floats between 0 and 1, or None\n    new values for each channel in hls space\n\nReturns\n-------\nnew_color : rgb tuple\n    new color code in RGB tuple representation",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "h": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "l": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "s": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "color"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_palette",
    "type": "function",
    "description": "Set the matplotlib color cycle using a seaborn palette.\n\nParameters\n----------\npalette : seaborn color palette | matplotlib colormap | hls | husl\n    Palette definition. Should be something :func:`color_palette` can process.\nn_colors : int\n    Number of colors in the cycle. The default number of colors will depend\n    on the format of ``palette``, see the :func:`color_palette`\n    documentation for more information.\ndesat : float\n    Proportion to desaturate each color by.\ncolor_codes : bool\n    If ``True`` and ``palette`` is a seaborn palette, remap the shorthand\n    color codes (e.g. \"b\", \"g\", \"r\", etc.) to the colors from this palette.\n\nSee Also\n--------\ncolor_palette : build a color palette or set the color cycle temporarily\n                in a ``with`` statement.\nset_context : set parameters to scale plot elements\nset_style : set the default parameters for figure style",
    "parameters": {
      "type": "object",
      "properties": {
        "palette": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "desat": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color_codes": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "palette"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_style",
    "type": "function",
    "description": "Set the parameters that control the general style of the plots.\n\nThe style parameters control properties like the color of the background and\nwhether a grid is enabled by default. This is accomplished using the\nmatplotlib rcParams system.\n\nThe options are illustrated in the\n:doc:`aesthetics tutorial <../tutorial/aesthetics>`.\n\nSee :func:`axes_style` to get the parameter values.\n\nParameters\n----------\nstyle : dict, or one of {darkgrid, whitegrid, dark, white, ticks}\n    A dictionary of parameters or the name of a preconfigured style.\nrc : dict, optional\n    Parameter mappings to override the values in the preset seaborn\n    style dictionaries. This only updates parameters that are\n    considered part of the style definition.\n\nExamples\n--------\n\n.. include:: ../docstrings/set_style.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "style": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_theme",
    "type": "function",
    "description": "Set aspects of the visual theme for all matplotlib and seaborn plots.\n\nThis function changes the global defaults for all plots using the\nmatplotlib rcParams system. The themeing is decomposed into several distinct\nsets of parameter values.\n\nThe options are illustrated in the :doc:`aesthetics <../tutorial/aesthetics>`\nand :doc:`color palette <../tutorial/color_palettes>` tutorials.\n\nParameters\n----------\ncontext : string or dict\n    Scaling parameters, see :func:`plotting_context`.\nstyle : string or dict\n    Axes style parameters, see :func:`axes_style`.\npalette : string or sequence\n    Color palette, see :func:`color_palette`.\nfont : string\n    Font family, see matplotlib font manager.\nfont_scale : float, optional\n    Separate scaling factor to independently scale the size of the\n    font elements.\ncolor_codes : bool\n    If ``True`` and ``palette`` is a seaborn palette, remap the shorthand\n    color codes (e.g. \"b\", \"g\", \"r\", etc.) to the colors from this palette.\nrc : dict or None\n    Dictionary of rc parameter mappings to override the above.\n\nExamples\n--------\n\n.. include:: ../docstrings/set_theme.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "context": {
          "type": "any",
          "default": "notebook",
          "description": " "
        },
        "style": {
          "type": "any",
          "default": "darkgrid",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "deep",
          "description": " "
        },
        "font": {
          "type": "any",
          "default": "sans-serif",
          "description": " "
        },
        "font_scale": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "color_codes": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "stripplot",
    "type": "function",
    "description": "Draw a categorical scatterplot using jitter to reduce overplotting.\n\nA strip plot can be drawn on its own, but it is also a good complement\nto a box or violin plot in cases where you want to show all observations\nalong with some representation of the underlying distribution.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \njitter : float, `True`/`1` is special-cased\n    Amount of jitter (only along the categorical axis) to apply. This\n    can be useful when you have many points and they overlap, so that\n    it is easier to see the distribution. You can specify the amount\n    of jitter (half the width of the uniform random variable support),\n    or use `True` for a good default.\ndodge : bool\n    When a `hue` variable is assigned, setting this to `True` will\n    separate the strips for different hue levels along the categorical\n    axis and narrow the amount of space allotedto each strip. Otherwise,\n    the points for each level will be plotted in the same strip.\norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsize : float\n    Radius of the markers, in points.\nedgecolor : matplotlib color, \"gray\" is special-cased\n    Color of the lines around each point. If you pass `\"gray\"`, the\n    brightness is determined by the color palette used for the body\n    of the points. Note that `stripplot` has `linewidth=0` by default,\n    so edge colors are only visible with nonzero line width.\nlinewidth : float\n    Width of the lines that frame the plot elements.    \nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other keyword arguments are passed through to\n    :meth:`matplotlib.axes.Axes.scatter`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nswarmplot : A categorical scatterplot where the points do not overlap. Can\n            be used with other plots to show each observation.    \nboxplot : A traditional box-and-whisker plot with a similar API.    \nviolinplot : A combination of boxplot and kernel density estimation.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nExamples\n--------\n.. include:: ../docstrings/stripplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "jitter": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "edgecolor": {
          "type": "any",
          "default": "<default>",
          "description": " "
        },
        "linewidth": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "swarmplot",
    "type": "function",
    "description": "Draw a categorical scatterplot with points adjusted to be non-overlapping.\n\nThis function is similar to :func:`stripplot`, but the points are adjusted\n(only along the categorical axis) so that they don't overlap. This gives a\nbetter representation of the distribution of values, but it does not scale\nwell to large numbers of observations. This style of plot is sometimes\ncalled a \"beeswarm\".\n\nA swarm plot can be drawn on its own, but it is also a good complement\nto a box or violin plot in cases where you want to show all observations\nalong with some representation of the underlying distribution.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \ndodge : bool\n    When a `hue` variable is assigned, setting this to `True` will\n    separate the swarms for different hue levels along the categorical\n    axis and narrow the amount of space allotedto each strip. Otherwise,\n    the points for each level will be plotted in the same swarm.\norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsize : float\n    Radius of the markers, in points.\nedgecolor : matplotlib color, \"gray\" is special-cased\n    Color of the lines around each point. If you pass `\"gray\"`, the\n    brightness is determined by the color palette used for the body\n    of the points.\nlinewidth : float\n    Width of the lines that frame the plot elements.    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other keyword arguments are passed through to\n    :meth:`matplotlib.axes.Axes.scatter`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nboxplot : A traditional box-and-whisker plot with a similar API.    \nviolinplot : A combination of boxplot and kernel density estimation.    \nstripplot : A scatterplot where one variable is categorical. Can be used\n            in conjunction with other plots to show each observation.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nExamples\n--------\n.. include:: ../docstrings/swarmplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "edgecolor": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "linewidth": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "warn_thresh": {
          "type": "any",
          "default": "0.05",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "violinplot",
    "type": "function",
    "description": "Draw a patch representing a KDE and add observations or box plot statistics.\n\nA violin plot plays a similar role as a box-and-whisker plot. It shows the\ndistribution of data points after grouping by one (or more) variables.\nUnlike a box plot, each violin is drawn using a kernel density estimate\nof the underlying distribution.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsaturation : float\n    Proportion of the original saturation to draw fill colors in. Large\n    patches often look better with desaturated colors, but set this to\n    `1` if you want the colors to perfectly match the input values.    \nfill : bool\n    If True, use a solid patch. Otherwise, draw as line art.\n\n    .. versionadded:: v0.13.0    \ninner : {\"box\", \"quart\", \"point\", \"stick\", None}\n    Representation of the data in the violin interior. One of the following:\n\n    - `\"box\"`: draw a miniature box-and-whisker plot\n    - `\"quart\"`: show the quartiles of the data\n    - `\"point\"` or `\"stick\"`: show each observation\nsplit : bool\n    Show an un-mirrored distribution, alternating sides when using `hue`.\n\n    .. versionchanged:: v0.13.0\n        Previously, this option required a `hue` variable with exactly two levels.\nwidth : float\n    Width allotted to each element on the orient axis. When `native_scale=True`,\n    it is relative to the minimum distance between two values in the native scale.    \ndodge : \"auto\" or bool\n    When hue mapping is used, whether elements should be narrowed and shifted along\n    the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n    orient variable is crossed with the categorical variable or `False` otherwise.\n\n    .. versionchanged:: 0.13.0\n\n        Added `\"auto\"` mode as a new default.    \ngap : float\n    Shrink on the orient axis by this factor to add a gap between dodged elements.\n\n    .. versionadded:: 0.13.0    \nlinewidth : float\n    Width of the lines that frame the plot elements.    \nlinecolor : color\n    Color to use for line elements, when `fill` is True.\n\n    .. versionadded:: v0.13.0    \ncut : float\n    Distance, in units of bandwidth, to extend the density past extreme\n    datapoints. Set to 0 to limit the violin within the data range.\ngridsize : int\n    Number of points in the discrete grid used to evaluate the KDE.\nbw_method : {\"scott\", \"silverman\", float}\n    Either the name of a reference rule or the scale factor to use when\n    computing the kernel bandwidth. The actual kernel size will be\n    determined by multiplying the scale factor by the standard deviation of\n    the data within each group.\n\n    .. versionadded:: v0.13.0\nbw_adjust: float\n    Factor that scales the bandwidth to use more or less smoothing.\n\n    .. versionadded:: v0.13.0\ndensity_norm : {\"area\", \"count\", \"width\"}\n    Method that normalizes each density to determine the violin's width.\n    If `area`, each violin will have the same area. If `count`, the width\n    will be proportional to the number of observations. If `width`, each\n    violin will have the same width.\n\n    .. versionadded:: v0.13.0\ncommon_norm : bool\n    When `True`, normalize the density across all violins.\n\n    .. versionadded:: v0.13.0\nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nscale : {\"area\", \"count\", \"width\"}\n    .. deprecated:: v0.13.0\n        See `density_norm`.\nscale_hue : bool\n    .. deprecated:: v0.13.0\n        See `common_norm`.\nbw : {'scott', 'silverman', float}\n    .. deprecated:: v0.13.0\n        See `bw_method` and `bw_adjust`.\ninner_kws : dict of key, value mappings\n    Keyword arguments for the \"inner\" plot, passed to one of:\n\n    - :class:`matplotlib.collections.LineCollection` (with `inner=\"stick\"`)\n    - :meth:`matplotlib.axes.Axes.scatter` (with `inner=\"point\"`)\n    - :meth:`matplotlib.axes.Axes.plot` (with `inner=\"quart\"` or `inner=\"box\"`)\n\n    Additionally, with `inner=\"box\"`, the keywords `box_width`, `whis_width`,\n    and `marker` receive special handling for the components of the \"box\" plot.\n\n    .. versionadded:: v0.13.0\nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Keyword arguments for the violin patches, passsed through to\n    :meth:`matplotlib.axes.Axes.fill_between`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nboxplot : A traditional box-and-whisker plot with a similar API.    \nstripplot : A scatterplot where one variable is categorical. Can be used\n            in conjunction with other plots to show each observation.    \nswarmplot : A categorical scatterplot where the points do not overlap. Can\n            be used with other plots to show each observation.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nExamples\n--------\n.. include:: ../docstrings/violinplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "saturation": {
          "type": "any",
          "default": "0.75",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "inner": {
          "type": "any",
          "default": "box",
          "description": " "
        },
        "split": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "width": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "gap": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "linewidth": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "linecolor": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "cut": {
          "type": "any",
          "default": "2",
          "description": " "
        },
        "gridsize": {
          "type": "any",
          "default": "100",
          "description": " "
        },
        "bw_method": {
          "type": "any",
          "default": "scott",
          "description": " "
        },
        "bw_adjust": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "density_norm": {
          "type": "any",
          "default": "area",
          "description": " "
        },
        "common_norm": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "scale": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "scale_hue": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "bw": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "inner_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "xkcd_palette",
    "type": "function",
    "description": "Make a palette with color names from the xkcd color survey.\n\nSee xkcd for the full list of colors: https://xkcd.com/color/rgb/\n\nThis is just a simple wrapper around the `seaborn.xkcd_rgb` dictionary.\n\nParameters\n----------\ncolors : list of strings\n    List of keys in the `seaborn.xkcd_rgb` dictionary.\n\nReturns\n-------\npalette\n    A list of colors as RGB tuples.\n\nSee Also\n--------\ncrayon_palette : Make a palette with Crayola crayon colors.",
    "parameters": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "colors"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_versions",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotBarChart",
    "type": "function",
    "description": "柱状图\n参数：\n    rtn_series: pd.Series 收益率序列（索引为坐标名，值为坐标值）\n    direction=H/V 绘图方向，默认为横向柱状图\n    title = None 绘图标题用户指定，建议包含“区间收益率”\n用法：\nret = pd.Series(np.random.normal(0,1,10),index=pd.date_range('20220101',periods=10).strftime('%Y%m%d'))\nplotBarChart(ret)",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "title": {
          "type": "any",
          "default": "区间收益率",
          "description": " "
        },
        "direction": {
          "type": "any",
          "default": "H",
          "description": " "
        }
      },
      "required": [
        "rtn_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotIndIndexNetTrend",
    "type": "function",
    "description": "绘制申万/中信31个行业的区间净值走势图，每个行业一幅子图\n参数:\n    df pd.DataFrame，行业累计收益率（index为日期格式，columns为行业名称，共31个行业，按默认顺序排序）\n    subs 默认为 8*4样式",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "subs": {
          "type": "any",
          "default": "(8, 4)",
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_nettrendchart",
    "type": "function",
    "description": "绘制多个指数叠加的净值走势折线图\n参数:\n    df: pd.DataFrame  \n        index为日期格式\n        columns 名称",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_swindex_nettrendchart",
    "type": "function",
    "description": "绘制申万31个行业的区间净值走势图：8*4样式，每个行业一幅子图\n参数:\n    df: pd.DataFrame\n        index为日期格式\n        columns为行业名称，共31个行业，按默认顺序排序",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_twoax_trendchart",
    "type": "function",
    "description": "绘制双坐标轴图\ndf：第一列、第二列分别为主轴、次轴",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_neu",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "numeric_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "categorical_series": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "factor_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.483*3\n    sector_fill (bool or str): 填补缺失值的方法，默认为'median'\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "outlier_mad",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "mad_limit": {
          "type": "any",
          "default": "1.483",
          "description": " "
        },
        "n_mul": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "sector_categorical",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sector_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "z_score",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "codes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_name",
        "dates",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactor",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorList",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getedbvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "edbcode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "edbcode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorlist",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "codes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_name",
        "dates",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gethqfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getperiodfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gettradeday",
    "type": "function",
    "description": "# 查询交易日，可以是特殊类型的交易日\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:dtype: 特殊交易日（见字名义，不做特别解释）:'d','month_end','month_start','week_end'\n        ,'week_start','quarter_start','quarter_end'\n:return 日期组成的list",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dtype": {
          "type": "any",
          "default": "d",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "monendtradeday",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe，参数中必须包括:'adjdate','weight','stock',即（调仓日期、权重、股票代码），非空\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfoliobacktest",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空\nadd kwargs = [bt_type,rolling_d]  by guosj at 20200318",
    "parameters": {
      "type": "object",
      "properties": {
        "weight_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "benchno": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "buy_rate": {
          "type": "any",
          "default": "0.001",
          "description": " "
        },
        "sell_rate": {
          "type": "any",
          "default": "0.002",
          "description": " "
        },
        "daily_cost": {
          "type": "any",
          "default": "0.0",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "weight_df",
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfolioperformance",
    "type": "function",
    "description": ":rtn_df,组合收益dataFrame,index为时间序列，columns中至少包含['rtn'],['bench_rtn','turnover','stcoknum']为可选\n:t_year,年化天数，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "year_days": {
          "type": "any",
          "default": "250",
          "description": " "
        }
      },
      "required": [
        "rtn_df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "querysql",
    "type": "function",
    "description": "获取基金年报、半年报持股权重数据",
    "parameters": {
      "type": "object",
      "properties": {
        "sql": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "conn": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sql",
        "conn",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getFactorIC",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotBarChart",
    "type": "function",
    "description": "柱状图\n参数：\n    rtn_series: pd.Series 收益率序列（索引为坐标名，值为坐标值）\n    direction=H/V 绘图方向，默认为横向柱状图\n    title = None 绘图标题用户指定，建议包含“区间收益率”\n用法：\nret = pd.Series(np.random.normal(0,1,10),index=pd.date_range('20220101',periods=10).strftime('%Y%m%d'))\nplotBarChart(ret)",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "title": {
          "type": "any",
          "default": "区间收益率",
          "description": " "
        },
        "direction": {
          "type": "any",
          "default": "H",
          "description": " "
        }
      },
      "required": [
        "rtn_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotIndIndexNetTrend",
    "type": "function",
    "description": "绘制申万/中信31个行业的区间净值走势图，每个行业一幅子图\n参数:\n    df pd.DataFrame，行业累计收益率（index为日期格式，columns为行业名称，共31个行业，按默认顺序排序）\n    subs 默认为 8*4样式",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "subs": {
          "type": "any",
          "default": "(8, 4)",
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_nettrendchart",
    "type": "function",
    "description": "绘制多个指数叠加的净值走势折线图\n参数:\n    df: pd.DataFrame  \n        index为日期格式\n        columns 名称",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_swindex_nettrendchart",
    "type": "function",
    "description": "绘制申万31个行业的区间净值走势图：8*4样式，每个行业一幅子图\n参数:\n    df: pd.DataFrame\n        index为日期格式\n        columns为行业名称，共31个行业，按默认顺序排序",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_twoax_trendchart",
    "type": "function",
    "description": "绘制双坐标轴图\ndf：第一列、第二列分别为主轴、次轴",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "FactorProcess",
    "type": "function",
    "description": "因子去极值,中性化,标准化,填充缺失值",
    "parameters": {
      "type": "object",
      "properties": {
        "factordata": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "show": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kw": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factordata",
        "kw"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "MADextAdj",
    "type": "function",
    "description": "MAD极值调整\n超过极值的部分均匀分布在3-3.5倍之间",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "MADmodAdj",
    "type": "function",
    "description": "MAD极值调整\n超过极值的部分均匀分布在3-3.5倍之间",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factorOrth",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "X": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "orthret": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "X"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "olsregression",
    "type": "function",
    "description": "回归",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "y": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "x",
        "y"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "orthfactor",
    "type": "function",
    "description": "因子正交\nx : dataframe,因子值(N×K)",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "standardize",
    "type": "function",
    "description": "标准化",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "calfactor",
    "type": "function",
    "description": "因子计算测试",
    "parameters": {
      "type": "object",
      "properties": {
        "t": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fname": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "t",
        "fname"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "testfactor",
    "type": "function",
    "description": "更新给定日期给定因子,并保存",
    "parameters": {
      "type": "object",
      "properties": {
        "t": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "filepath": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "storekeys": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "t",
        "fname",
        "filepath",
        "storekeys"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getFactorIC",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_neu",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "numeric_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "categorical_series": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "factor_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.483*3\n    sector_fill (bool or str): 填补缺失值的方法，默认为'median'\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "outlier_mad",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "mad_limit": {
          "type": "any",
          "default": "1.483",
          "description": " "
        },
        "n_mul": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "sector_categorical",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sector_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "z_score",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "codes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_name",
        "dates",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactor",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorList",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getedbvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "edbcode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "edbcode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorlist",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "codes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_name",
        "dates",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gethqfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getperiodfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gettradeday",
    "type": "function",
    "description": "# 查询交易日，可以是特殊类型的交易日\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:dtype: 特殊交易日（见字名义，不做特别解释）:'d','month_end','month_start','week_end'\n        ,'week_start','quarter_start','quarter_end'\n:return 日期组成的list",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dtype": {
          "type": "any",
          "default": "d",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "monendtradeday",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe，参数中必须包括:'adjdate','weight','stock',即（调仓日期、权重、股票代码），非空\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfoliobacktest",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空\nadd kwargs = [bt_type,rolling_d]  by guosj at 20200318",
    "parameters": {
      "type": "object",
      "properties": {
        "weight_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "benchno": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "buy_rate": {
          "type": "any",
          "default": "0.001",
          "description": " "
        },
        "sell_rate": {
          "type": "any",
          "default": "0.002",
          "description": " "
        },
        "daily_cost": {
          "type": "any",
          "default": "0.0",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "weight_df",
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfolioperformance",
    "type": "function",
    "description": ":rtn_df,组合收益dataFrame,index为时间序列，columns中至少包含['rtn'],['bench_rtn','turnover','stcoknum']为可选\n:t_year,年化天数，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "year_days": {
          "type": "any",
          "default": "250",
          "description": " "
        }
      },
      "required": [
        "rtn_df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "querysql",
    "type": "function",
    "description": "获取基金年报、半年报持股权重数据",
    "parameters": {
      "type": "object",
      "properties": {
        "sql": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "conn": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sql",
        "conn",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "HTTPAdapter",
    "type": "class",
    "description": "The built-in HTTP Adapter for urllib3.\n\nProvides a general-case interface for Requests sessions to contact HTTP and\nHTTPS urls by implementing the Transport Adapter interface. This class will\nusually be created by the :class:`Session <Session>` class under the\ncovers.\n\n:param pool_connections: The number of urllib3 connection pools to cache.\n:param pool_maxsize: The maximum number of connections to save in the pool.\n:param max_retries: The maximum number of retries each connection\n    should attempt. Note, this applies only to failed DNS lookups, socket\n    connections and connection timeouts, never to requests where data has\n    made it to the server. By default, Requests does not retry failed\n    connections. If you need granular control over the conditions under\n    which we retry a request, import urllib3's ``Retry`` class and pass\n    that instead.\n:param pool_block: Whether the connection pool should block for connections.\n\nUsage::\n\n  >>> import requests\n  >>> s = requests.Session()\n  >>> a = requests.adapters.HTTPAdapter(max_retries=3)\n  >>> s.mount('http://', a)",
    "methods": [
      {
        "name": "add_headers",
        "type": "function",
        "description": "Add any headers needed by the connection. As of v2.0 this does\nnothing by default, but is left for overriding by users that subclass\nthe :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n:param kwargs: The keyword arguments from the call to send().",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "request": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "request",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "build_connection_pool_key_attributes",
        "type": "function",
        "description": "Build the PoolKey attributes used by urllib3 to return a connection.\n\nThis looks at the PreparedRequest, the user-specified verify value,\nand the value of the cert parameter to determine what PoolKey values\nto use to select a connection from a given urllib3 Connection Pool.\n\nThe SSL related pool key arguments are not consistently set. As of\nthis writing, use the following to determine what keys may be in that\ndictionary:\n\n* If ``verify`` is ``True``, ``\"ssl_context\"`` will be set and will be the\n  default Requests SSL Context\n* If ``verify`` is ``False``, ``\"ssl_context\"`` will not be set but\n  ``\"cert_reqs\"`` will be set\n* If ``verify`` is a string, (i.e., it is a user-specified trust bundle)\n  ``\"ca_certs\"`` will be set if the string is not a directory recognized\n  by :py:func:`os.path.isdir`, otherwise ``\"ca_certs_dir\"`` will be\n  set.\n* If ``\"cert\"`` is specified, ``\"cert_file\"`` will always be set. If\n  ``\"cert\"`` is a tuple with a second item, ``\"key_file\"`` will also\n  be present\n\nTo override these settings, one may subclass this class, call this\nmethod and use the above logic to change parameters as desired. For\nexample, if one wishes to use a custom :py:class:`ssl.SSLContext` one\nmust both set ``\"ssl_context\"`` and based on what else they require,\nalter the other keys to ensure the desired behaviour.\n\n:param request:\n    The PreparedReqest being sent over the connection.\n:type request:\n    :class:`~requests.models.PreparedRequest`\n:param verify:\n    Either a boolean, in which case it controls whether\n    we verify the server's TLS certificate, or a string, in which case it\n    must be a path to a CA bundle to use.\n:param cert:\n    (optional) Any user-provided SSL certificate for client\n    authentication (a.k.a., mTLS). This may be a string (i.e., just\n    the path to a file which holds both certificate and key) or a\n    tuple of length 2 with the certificate file path and key file\n    path.\n:returns:\n    A tuple of two dictionaries. The first is the \"host parameters\"\n    portion of the Pool Key including scheme, hostname, and port. The\n    second is a dictionary of SSLContext related parameters.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "request": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "verify": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cert": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "request",
            "verify"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "build_response",
        "type": "function",
        "description": "Builds a :class:`Response <requests.Response>` object from a urllib3\nresponse. This should not be called from user code, and is only exposed\nfor use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`\n\n:param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n:param resp: The urllib3 response object.\n:rtype: requests.Response",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "req": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "resp": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "req",
            "resp"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "cert_verify",
        "type": "function",
        "description": "Verify a SSL certificate. This method should not be called from user\ncode, and is only exposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param conn: The urllib3 connection object associated with the cert.\n:param url: The requested URL.\n:param verify: Either a boolean, in which case it controls whether we verify\n    the server's TLS certificate, or a string, in which case it must be a path\n    to a CA bundle to use\n:param cert: The SSL certificate to verify.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "conn": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "url": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "verify": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cert": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "conn",
            "url",
            "verify",
            "cert"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "close",
        "type": "function",
        "description": "Disposes of any internal state.\n\nCurrently, this closes the PoolManager and any active ProxyManager,\nwhich closes any pooled connections.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_connection",
        "type": "function",
        "description": "DEPRECATED: Users should move to `get_connection_with_tls_context`\nfor all subclasses of HTTPAdapter using Requests>=2.32.2.\n\nReturns a urllib3 connection for the given URL. This should not be\ncalled from user code, and is only exposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param url: The URL to connect to.\n:param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n:rtype: urllib3.ConnectionPool",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "url": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxies": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "url"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_connection_with_tls_context",
        "type": "function",
        "description": "Returns a urllib3 connection for the given request and TLS settings.\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request:\n    The :class:`PreparedRequest <PreparedRequest>` object to be sent\n    over the connection.\n:param verify:\n    Either a boolean, in which case it controls whether we verify the\n    server's TLS certificate, or a string, in which case it must be a\n    path to a CA bundle to use.\n:param proxies:\n    (optional) The proxies dictionary to apply to the request.\n:param cert:\n    (optional) Any user-provided SSL certificate to be used for client\n    authentication (a.k.a., mTLS).\n:rtype:\n    urllib3.ConnectionPool",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "request": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "verify": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxies": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "cert": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "request",
            "verify"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "init_poolmanager",
        "type": "function",
        "description": "Initializes a urllib3 PoolManager.\n\nThis method should not be called from user code, and is only\nexposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param connections: The number of urllib3 connection pools to cache.\n:param maxsize: The maximum number of connections to save in the pool.\n:param block: Block when no free connections are available.\n:param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "connections": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "maxsize": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "block": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "pool_kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "connections",
            "maxsize",
            "pool_kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "proxy_headers",
        "type": "function",
        "description": "Returns a dictionary of the headers to add to any request sent\nthrough a proxy. This works with urllib3 magic to ensure that they are\ncorrectly sent to the proxy, rather than in a tunnelled request if\nCONNECT is being used.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param proxy: The url of the proxy being used for this request.\n:rtype: dict",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxy": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "proxy"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "proxy_manager_for",
        "type": "function",
        "description": "Return urllib3 ProxyManager for the given proxy.\n\nThis method should not be called from user code, and is only\nexposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param proxy: The proxy to return a urllib3 ProxyManager for.\n:param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.\n:returns: ProxyManager\n:rtype: urllib3.ProxyManager",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxy": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxy_kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "proxy",
            "proxy_kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "request_url",
        "type": "function",
        "description": "Obtain the url to use when making the final request.\n\nIf the message is being sent through a HTTP proxy, the full URL has to\nbe used. Otherwise, we should only use the path portion of the URL.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n:param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.\n:rtype: str",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "request": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxies": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "request",
            "proxies"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "send",
        "type": "function",
        "description": "Sends PreparedRequest object. Returns Response object.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n:param stream: (optional) Whether to stream the request content.\n:param timeout: (optional) How long to wait for the server to send\n    data before giving up, as a float, or a :ref:`(connect timeout,\n    read timeout) <timeouts>` tuple.\n:type timeout: float or tuple or urllib3 Timeout object\n:param verify: (optional) Either a boolean, in which case it controls whether\n    we verify the server's TLS certificate, or a string, in which case it\n    must be a path to a CA bundle to use\n:param cert: (optional) Any user-provided SSL certificate to be trusted.\n:param proxies: (optional) The proxies dictionary to apply to the request.\n:rtype: requests.Response",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "request": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "stream": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "timeout": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "verify": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "cert": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "proxies": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "request"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Retry",
    "type": "class",
    "description": "Retry configuration.\n\nEach retry attempt will create a new Retry object with updated values, so\nthey can be safely reused.\n\nRetries can be defined as a default for a pool:\n\n.. code-block:: python\n\n    retries = Retry(connect=5, read=2, redirect=5)\n    http = PoolManager(retries=retries)\n    response = http.request(\"GET\", \"https://example.com/\")\n\nOr per-request (which overrides the default for the pool):\n\n.. code-block:: python\n\n    response = http.request(\"GET\", \"https://example.com/\", retries=Retry(10))\n\nRetries can be disabled by passing ``False``:\n\n.. code-block:: python\n\n    response = http.request(\"GET\", \"https://example.com/\", retries=False)\n\nErrors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless\nretries are disabled, in which case the causing exception will be raised.\n\n:param int total:\n    Total number of retries to allow. Takes precedence over other counts.\n\n    Set to ``None`` to remove this constraint and fall back on other\n    counts.\n\n    Set to ``0`` to fail on the first retry.\n\n    Set to ``False`` to disable and imply ``raise_on_redirect=False``.\n\n:param int connect:\n    How many connection-related errors to retry on.\n\n    These are errors raised before the request is sent to the remote server,\n    which we assume has not triggered the server to process the request.\n\n    Set to ``0`` to fail on the first retry of this type.\n\n:param int read:\n    How many times to retry on read errors.\n\n    These errors are raised after the request was sent to the server, so the\n    request may have side-effects.\n\n    Set to ``0`` to fail on the first retry of this type.\n\n:param int redirect:\n    How many redirects to perform. Limit this to avoid infinite redirect\n    loops.\n\n    A redirect is a HTTP response with a status code 301, 302, 303, 307 or\n    308.\n\n    Set to ``0`` to fail on the first retry of this type.\n\n    Set to ``False`` to disable and imply ``raise_on_redirect=False``.\n\n:param int status:\n    How many times to retry on bad status codes.\n\n    These are retries made on responses, where status code matches\n    ``status_forcelist``.\n\n    Set to ``0`` to fail on the first retry of this type.\n\n:param int other:\n    How many times to retry on other errors.\n\n    Other errors are errors that are not connect, read, redirect or status errors.\n    These errors might be raised after the request was sent to the server, so the\n    request might have side-effects.\n\n    Set to ``0`` to fail on the first retry of this type.\n\n    If ``total`` is not set, it's a good idea to set this to 0 to account\n    for unexpected edge cases and avoid infinite retry loops.\n\n:param Collection allowed_methods:\n    Set of uppercased HTTP method verbs that we should retry on.\n\n    By default, we only retry on methods which are considered to be\n    idempotent (multiple requests with the same parameters end with the\n    same state). See :attr:`Retry.DEFAULT_ALLOWED_METHODS`.\n\n    Set to a ``None`` value to retry on any verb.\n\n:param Collection status_forcelist:\n    A set of integer HTTP status codes that we should force a retry on.\n    A retry is initiated if the request method is in ``allowed_methods``\n    and the response status code is in ``status_forcelist``.\n\n    By default, this is disabled with ``None``.\n\n:param float backoff_factor:\n    A backoff factor to apply between attempts after the second try\n    (most errors are resolved immediately by a second try without a\n    delay). urllib3 will sleep for::\n\n        {backoff factor} * (2 ** ({number of previous retries}))\n\n    seconds. If `backoff_jitter` is non-zero, this sleep is extended by::\n\n        random.uniform(0, {backoff jitter})\n\n    seconds. For example, if the backoff_factor is 0.1, then :func:`Retry.sleep` will\n    sleep for [0.0s, 0.2s, 0.4s, 0.8s, ...] between retries. No backoff will ever\n    be longer than `backoff_max`.\n\n    By default, backoff is disabled (factor set to 0).\n\n:param bool raise_on_redirect: Whether, if the number of redirects is\n    exhausted, to raise a MaxRetryError, or to return a response with a\n    response code in the 3xx range.\n\n:param bool raise_on_status: Similar meaning to ``raise_on_redirect``:\n    whether we should raise an exception, or return a response,\n    if status falls in ``status_forcelist`` range and retries have\n    been exhausted.\n\n:param tuple history: The history of the request encountered during\n    each call to :meth:`~Retry.increment`. The list is in the order\n    the requests occurred. Each list item is of class :class:`RequestHistory`.\n\n:param bool respect_retry_after_header:\n    Whether to respect Retry-After header on status codes defined as\n    :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.\n\n:param Collection remove_headers_on_redirect:\n    Sequence of headers to remove from the request when a response\n    indicating a redirect is returned before firing off the redirected\n    request.",
    "methods": [
      {
        "name": "get_backoff_time",
        "type": "function",
        "description": "Formula for computing the current backoff\n\n:rtype: float",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "float",
          "description": " "
        }
      },
      {
        "name": "is_exhausted",
        "type": "function",
        "description": "Are we out of retries?",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "bool",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "WindClient",
    "type": "class",
    "description": "Wind API客户端类",
    "methods": [
      {
        "name": "edb",
        "type": "function",
        "description": "获取宏观经济指标数据\n参数:\n    codes: 股票代码，可以是单个代码或代码列表\n    fields: 指标字段，可以是单个字段或字段列表\n    options: 可选参数字符串，格式为\"key1=value1;key2=value2\"\n    \n返回:\n    包含请求数据的DataFrame",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "begindate": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "enddate": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "codes",
            "begindate",
            "enddate"
          ]
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "edb_indicatorinfo",
        "type": "function",
        "description": "获取宏观经济指标信息",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "indicatorinfo",
        "type": "function",
        "description": "获取指标信息\n\n返回:\n    包含指标信息的DataFrame，包括指标名称、类型、表名、列名等",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "sectortype",
        "type": "function",
        "description": "获取sectortype表数据",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "start",
        "type": "function",
        "description": "初始化 Wind API 客户端并连接服务器\n\n参数:\n    base_url: API 服务的基础 URL\n    timeout: 请求超时时间（秒）\n\n返回:\n    True: 初始化成功",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "timeout": {
              "type": "int",
              "default": "150",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "tdays",
        "type": "function",
        "description": "获取交易日序列\n\n参数:\n    start: 开始日期，格式为'YYYY-MM-DD'\n    end: 结束日期，格式为'YYYY-MM-DD'\n    options: 可选参数字符串\n    \n返回:\n    包含交易日的日期列表",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "end": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "start",
            "end"
          ]
        },
        "return": {
          "type": "typing.List[datetime.datetime]",
          "description": " "
        }
      },
      {
        "name": "tdayscount",
        "type": "function",
        "description": "获取交易日天数\n\n参数:\n    start: 开始日期，格式为'YYYY-MM-DD'\n    end: 结束日期，格式为'YYYY-MM-DD'\n    options: 可选参数字符串\n    \n返回:\n    交易日天数（整数）",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "end": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "start",
            "end"
          ]
        },
        "return": {
          "type": "<class 'int'>",
          "description": " "
        }
      },
      {
        "name": "tdaysoffset",
        "type": "function",
        "description": "获取偏移后的交易日\n\n参数:\n    offset: 偏移天数，正数为向后偏移，负数为向前偏移\n    begin_time: 开始日期，格式为'YYYY-MM-DD'\n    options: 可选参数字符串\n    \n返回:\n    偏移后的交易日，格式为'YYYY-MM-DD'",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "int",
              "default": null,
              "description": " "
            },
            "begin_time": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "offset",
            "begin_time"
          ]
        },
        "return": {
          "type": "<class 'str'>",
          "description": " "
        }
      },
      {
        "name": "windcodes",
        "type": "function",
        "description": "获取指定品种的所有代码\n\n参数:\n    sectypes: 品种类型，可以是单个类型或类型列表\n    \n返回:\n    包含代码的DataFrame",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sectypes": {
              "type": "Union",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "sectypes"
          ]
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "wsd",
        "type": "function",
        "description": "获取时间序列数据\n\n参数:\n    codes: 股票代码，可以是单个代码或代码列表\n    fields: 指标字段，可以是单个字段或字段列表\n    begindate: 开始日期，格式为'YYYY-MM-DD'\n    enddate: 结束日期，格式为'YYYY-MM-DD'\n    options: 可选参数字符串，格式为\"key1=value1;key2=value2\"\n    \n返回:\n    包含请求数据的DataFrame",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "fields": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "begindate": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "enddate": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "codes",
            "fields",
            "begindate",
            "enddate"
          ]
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "wset",
        "type": "function",
        "description": "获取数据集\n\n参数:\n    target: 数据集名称\n    options: 可选参数字符串，格式为\"key1=value1;key2=value2\"\n    \n返回:\n    包含请求数据的DataFrame",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "target"
          ]
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "wss",
        "type": "function",
        "description": "获取截面数据\n\n参数:\n    codes: 股票代码，可以是单个代码或代码列表\n    fields: 指标字段，可以是单个字段或字段列表\n    options: 可选参数字符串，格式为\"key1=value1;key2=value2\"\n    \n返回:\n    包含请求数据的DataFrame",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "fields": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "codes",
            "fields"
          ]
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "WindClientError",
    "type": "class",
    "description": "Wind客户端异常类",
    "methods": [],
    "properties": []
  },
  {
    "name": "datetime",
    "type": "class",
    "description": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\nThe year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints.",
    "methods": [],
    "properties": []
  },
  {
    "name": "get_logger",
    "type": "function",
    "description": "获取指定名称的日志记录器\n\n参数:\n    name: 日志记录器名称\n\n返回:\n    Logger 实例",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "name"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "WindClientError",
    "type": "class",
    "description": "Wind客户端异常类",
    "methods": [],
    "properties": []
  },
  {
    "name": "datetime",
    "type": "class",
    "description": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\nThe year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints.",
    "methods": [],
    "properties": []
  },
  {
    "name": "get_logger",
    "type": "function",
    "description": "获取指定名称的日志记录器\n\n参数:\n    name: 日志记录器名称\n\n返回:\n    Logger 实例",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "name"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "setup_logging",
    "type": "function",
    "description": "设置日志配置\n\n参数:\n    level: 日志级别，默认为 INFO",
    "parameters": {
      "type": "object",
      "properties": {
        "level": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  }
][
  {
    "name": "rolling_apply",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "window": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "func": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "min_periods": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "freq": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "center": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "args": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "x",
        "window",
        "func"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rolling_mean",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "window": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "min_periods": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "center": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "x",
        "window"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rolling_std",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "window": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "min_periods": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "center": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "ddof": {
          "type": "any",
          "default": "1",
          "description": " "
        }
      },
      "required": [
        "x",
        "window"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "MaxLossExceededError",
    "type": "class",
    "description": "Common base class for all non-exit exceptions.",
    "methods": [],
    "properties": []
  },
  {
    "name": "non_unique_bin_edges_error",
    "type": "function",
    "description": "捕获 pd.qcut 的异常, 添加提示信息并报错",
    "parameters": {
      "type": "object",
      "properties": {
        "func": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "func"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rethrow",
    "type": "function",
    "description": "重新抛出当前作用域中的最后一个异常, 保留堆栈信息, 并且在报错信息中添加其他内容",
    "parameters": {
      "type": "object",
      "properties": {
        "exception": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "additional_message": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "exception",
        "additional_message"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "wraps",
    "type": "function",
    "description": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
    "parameters": {
      "type": "object",
      "properties": {
        "wrapped": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "assigned": {
          "type": "any",
          "default": "('__module__', '__name__', '__qualname__', '__doc__', '__annotations__', '__type_params__')",
          "description": " "
        },
        "updated": {
          "type": "any",
          "default": "('__dict__',)",
          "description": " "
        }
      },
      "required": [
        "wrapped"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "PlotConfig",
    "type": "class",
    "description": "No description available.",
    "methods": [],
    "properties": []
  },
  {
    "name": "axes_style",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "style": {
          "type": "any",
          "default": "darkgrid",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "customize",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "func": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "func"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_chinese_font",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotting_context",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "context": {
          "type": "any",
          "default": "notebook",
          "description": " "
        },
        "font_scale": {
          "type": "any",
          "default": "1.5",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "print_table",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "table": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "name": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "fmt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "table"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "wraps",
    "type": "function",
    "description": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
    "parameters": {
      "type": "object",
      "properties": {
        "wrapped": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "assigned": {
          "type": "any",
          "default": "('__module__', '__name__', '__qualname__', '__doc__', '__annotations__', '__type_params__')",
          "description": " "
        },
        "updated": {
          "type": "any",
          "default": "('__dict__',)",
          "description": " "
        }
      },
      "required": [
        "wrapped"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Iterable",
    "type": "class",
    "description": "No description available.",
    "methods": [],
    "properties": []
  },
  {
    "name": "convert_to_forward_returns_columns",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "period": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "period"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "ensure_tuple",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_forward_returns_columns",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "columns"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "ignore_warning",
    "type": "function",
    "description": "过滤 warnings",
    "parameters": {
      "type": "object",
      "properties": {
        "message": {
          "type": "any",
          "default": "",
          "description": " "
        },
        "category": {
          "type": "any",
          "default": "<class 'Warning'>",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "",
          "description": " "
        },
        "lineno": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "append": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "wraps",
    "type": "function",
    "description": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
    "parameters": {
      "type": "object",
      "properties": {
        "wrapped": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "assigned": {
          "type": "any",
          "default": "('__module__', '__name__', '__qualname__', '__doc__', '__annotations__', '__type_params__')",
          "description": " "
        },
        "updated": {
          "type": "any",
          "default": "('__dict__',)",
          "description": " "
        }
      },
      "required": [
        "wrapped"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "date",
    "type": "class",
    "description": "date(year, month, day) --> date object",
    "methods": [],
    "properties": []
  },
  {
    "name": "datetime",
    "type": "class",
    "description": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\nThe year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints.",
    "methods": [],
    "properties": []
  },
  {
    "name": "time",
    "type": "class",
    "description": "time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object\n\nAll arguments are optional. tzinfo may be None, or an instance of\na tzinfo subclass. The remaining arguments may be ints.",
    "methods": [],
    "properties": []
  },
  {
    "name": "timedelta",
    "type": "class",
    "description": "Difference between two datetime values.\n\ntimedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)\n\nAll arguments are optional and default to 0.\nArguments may be integers or floats, and may be positive or negative.",
    "methods": [],
    "properties": []
  },
  {
    "name": "date2str",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "date": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "format": {
          "type": "any",
          "default": "%Y-%m-%d",
          "description": " "
        }
      },
      "required": [
        "date"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "MyDbPool",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "callQueryProc",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "procname": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "params_in": {
              "type": "any",
              "default": "[]",
              "description": " "
            }
          },
          "required": [
            "procname"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_160db",
        "type": "function",
        "description": "静态方法，从连接池中取出连接\nreturn oracle.connection",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_161db",
        "type": "function",
        "description": "静态方法，从连接池中取出连接\nreturn oracle.connection",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_DMPDB",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_conn",
        "type": "function",
        "description": "静态方法，从连接池中取出连接\nreturn oracle.connection",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "insert_161db",
        "type": "function",
        "description": "静态方法，从连接池中取出连接\nreturn oracle.connection",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "sqlDDL",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sql": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "n": {
              "type": "any",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "sql"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "sqlDML",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sql": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "sql"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "sqlManyDML",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sql": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "data": {
              "type": "any",
              "default": "[]",
              "description": " "
            }
          },
          "required": [
            "sql"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "get_connTT",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactor",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorList",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getedbvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "edbcode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "edbcode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorlist",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gethqfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getperiodfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gettradeday",
    "type": "function",
    "description": "# 查询交易日，可以是特殊类型的交易日\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:dtype: 特殊交易日（见字名义，不做特别解释）:'d','month_end','month_start','week_end'\n        ,'week_start','quarter_start','quarter_end'\n:return 日期组成的list",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dtype": {
          "type": "any",
          "default": "d",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "monendtradeday",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe，参数中必须包括:'adjdate','weight','stock',即（调仓日期、权重、股票代码），非空\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfoliobacktest",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空\nadd kwargs = [bt_type,rolling_d]  by guosj at 20200318",
    "parameters": {
      "type": "object",
      "properties": {
        "weight_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "benchno": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "buy_rate": {
          "type": "any",
          "default": "0.001",
          "description": " "
        },
        "sell_rate": {
          "type": "any",
          "default": "0.002",
          "description": " "
        },
        "daily_cost": {
          "type": "any",
          "default": "0.0",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "weight_df",
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfolioperformance",
    "type": "function",
    "description": ":rtn_df,组合收益dataFrame,index为时间序列，columns中至少包含['rtn'],['bench_rtn','turnover','stcoknum']为可选\n:t_year,年化天数，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "year_days": {
          "type": "any",
          "default": "250",
          "description": " "
        }
      },
      "required": [
        "rtn_df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "querysql",
    "type": "function",
    "description": "获取基金年报、半年报持股权重数据",
    "parameters": {
      "type": "object",
      "properties": {
        "sql": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "conn": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sql",
        "conn",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Attribution",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "brinson_multi",
        "type": "function",
        "description": "Brinson归因：多期模型",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight_df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "end_day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_SW",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "()",
              "description": " "
            },
            "full_pos": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "distri": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "weight_df",
            "end_day",
            "bench"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "brinson_single",
        "type": "function",
        "description": "Brinson归因：单期模型",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "Series",
              "default": null,
              "description": " "
            },
            "tday0": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "tday1": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_SW",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "()",
              "description": " "
            },
            "full_pos": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "portfolio_weight",
            "tday0",
            "tday1",
            "bench"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Any",
    "type": "class",
    "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BytesIO",
    "type": "class",
    "description": "Buffered I/O implementation using an in-memory bytes buffer.",
    "methods": [],
    "properties": []
  },
  {
    "name": "Client",
    "type": "class",
    "description": "Cache server's client protocol ",
    "methods": [
      {
        "name": "add_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "hit": {
              "type": "int",
              "default": null,
              "description": " "
            },
            "req_time": {
              "type": "float",
              "default": null,
              "description": " "
            },
            "tot_time": {
              "type": "float",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name",
            "hit",
            "req_time",
            "tot_time"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "api_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "call",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "data": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "data"
          ]
        },
        "return": {
          "type": "typing.Any",
          "description": " "
        }
      },
      {
        "name": "df_to_series",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cached",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "param": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "param"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_ex",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "obj": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "out": {
              "type": "str",
              "default": "df",
              "description": " "
            }
          },
          "required": [
            "obj",
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "mod_codes",
        "type": "function",
        "description": "处理改股票代码的情况，只有get series by one date时才处理，如检测到新股票代码则添加旧代码 ",
        "parameters": {
          "type": "object",
          "properties": {
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "codes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "ModCode",
    "type": "class",
    "description": "ModCode(old, new, date)",
    "methods": [],
    "properties": []
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "parse_codes",
    "type": "function",
    "description": "返回List[str]",
    "parameters": {
      "type": "object",
      "properties": {
        "codes": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "codes"
      ]
    },
    "return": {
      "type": "typing.Optional[typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "parse_dates",
    "type": "function",
    "description": "返回字符串‘20190101-20190202’表示日期范围，返回List[str]表示日期列表 ",
    "parameters": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "verify": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "max_allowed_dt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "dates"
      ]
    },
    "return": {
      "type": "typing.Union[NoneType, str, typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "Any",
    "type": "class",
    "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BytesIO",
    "type": "class",
    "description": "Buffered I/O implementation using an in-memory bytes buffer.",
    "methods": [],
    "properties": []
  },
  {
    "name": "Client",
    "type": "class",
    "description": "Cache server's client protocol ",
    "methods": [
      {
        "name": "add_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "hit": {
              "type": "int",
              "default": null,
              "description": " "
            },
            "req_time": {
              "type": "float",
              "default": null,
              "description": " "
            },
            "tot_time": {
              "type": "float",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name",
            "hit",
            "req_time",
            "tot_time"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "api_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "call",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "data": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "data"
          ]
        },
        "return": {
          "type": "typing.Any",
          "description": " "
        }
      },
      {
        "name": "df_to_series",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cached",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "param": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "param"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_ex",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "obj": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "out": {
              "type": "str",
              "default": "df",
              "description": " "
            }
          },
          "required": [
            "obj",
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "mod_codes",
        "type": "function",
        "description": "处理改股票代码的情况，只有get series by one date时才处理，如检测到新股票代码则添加旧代码 ",
        "parameters": {
          "type": "object",
          "properties": {
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "codes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "ModCode",
    "type": "class",
    "description": "ModCode(old, new, date)",
    "methods": [],
    "properties": []
  },
  {
    "name": "get_factor",
    "type": "function",
    "description": "factorname = 'CLOSE'\ndates = '20231201-20231231'",
    "parameters": {
      "type": "object",
      "properties": {
        "factorname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorname",
        "dates"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "parse_codes",
    "type": "function",
    "description": "返回List[str]",
    "parameters": {
      "type": "object",
      "properties": {
        "codes": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "codes"
      ]
    },
    "return": {
      "type": "typing.Optional[typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "parse_dates",
    "type": "function",
    "description": "返回字符串‘20190101-20190202’表示日期范围，返回List[str]表示日期列表 ",
    "parameters": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "verify": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "max_allowed_dt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "dates"
      ]
    },
    "return": {
      "type": "typing.Union[NoneType, str, typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "LocalData",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "get_factor",
        "type": "function",
        "description": "必须返回copy() ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "Union",
              "default": "None",
              "description": " "
            },
            "codes": {
              "type": "List",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "int",
              "default": "0",
              "description": " "
            },
            "func_trade_days": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "factor_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "register",
        "type": "function",
        "description": "注册本地因子数据; set `factor_name = None` to list all; set `df_factor = None` to de-register ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "str",
              "default": "None",
              "description": " "
            },
            "df_factor": {
              "type": "DataFrame",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "FactorProcessParams",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_params",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_params": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_params"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_param",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_alias",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_alias": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_alias"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_defaults",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_defaults": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_defaults"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "df_table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "BackTestMagic",
    "type": "class",
    "description": "Base class for implementing magic functions.\n\nShell functions which can be reached as %function_name. All magic\nfunctions should accept a string, which they can parse for their own\nneeds. This can make some functions easier to type, eg `%cd ../`\nvs. `%cd(\"../\")`\n\nClasses providing magic functions need to subclass this class, and they\nMUST:\n\n- Use the method decorators `@line_magic` and `@cell_magic` to decorate\n  individual methods as magic functions, AND\n\n- Use the class decorator `@magics_class` to ensure that the magic\n  methods are properly registered at the instance level upon instance\n  initialization.\n\nSee :mod:`magic_functions` for examples of actual implementation classes.",
    "methods": [
      {
        "name": "arg_err",
        "type": "function",
        "description": "Print docstring if incorrect arguments were passed",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt",
        "type": "function",
        "description": "::\n\n  %bt [--out OUT]\n\n运行回测策略，详见文档“通用策略回测框架”中的说明\n\noptions:\n  --out OUT, -o OUT  指定回测报告结果的变量名，默认为\"report\"",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt_load",
        "type": "function",
        "description": "::\n\n  %bt_load [--strategy STRATEGY] [--code CODE] [--history HISTORY] [--keyword KEYWORD] [--user [USER]]\n\n从数据库加载已保存的策略代码到本单元格，也可以搜索策略代码。\n\n基本用法示例：\n    %bt_load           不带任何参数，列出可加载的策略列表\n    %bt_load -s 123    指定加载id为123的策略的最新代码\n\n扩展用法示例：\n    %bt_load -u        列出自己创建的策略列表\n    %bt_load -u lixy   列出用户lixy创建的策略列表\n    %bt_load -k 估值   列出策略名称或描述里包含\"估值\"的策略\n\n    %bt_load -h 123    列出id为123的策略的所有版本的历史代码\n    %bt_load -c 666    指定加载代码id为666的历史代码\n\noptions:\n  --strategy STRATEGY, -s STRATEGY\n                        根据策略id取策略的最新代码\n  --code CODE, -c CODE  根据代码id取代码\n  --history HISTORY, -h HISTORY\n                        取策略id的历史代码列表\n  --keyword KEYWORD, -k KEYWORD\n                        搜索策略名称或描述\n  --user <[USER]>, -u <[USER]>\n                        只列出某个用户的策略(不指定用户名则只列出自己的策略)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt_save",
        "type": "function",
        "description": "::\n\n  %bt_save [--name NAME] [--desc DESC] [--public PUBLIC] [--strategy STRATEGY] [--delete DELETE]\n\n将本单元格的策略代码保存到数据库中，根据参数不同可以是创建新策略或更新已存在的策略。\n\n基本用法示例(两个%号的命令为操作整个单元格的内容，只保存策略不运行，请到投研平台图形界面手动重新运行策略)：\n    %%bt_save -n 沪深300A          将本单元格的策略代码保存到一个新建策略，并将策略命名为\"沪深300A\"\n    %%bt_save -s 123               用本单元格的策略代码更新一个已存在的id为123的策略\n\n扩展用法示例(一个%号的命令是只操作一行的命令，修改策略属性也可以在投研平台用图形界面操作)：\n    %bt_save -s 123 -n 沪深300B    更新一个已存在的id为123的策略，将名称改为\"沪深300B\"\n    %bt_save -s 123 -d 策略描述B   更新一个已存在的id为123的策略，将描述改为\"策略描述B\"\n    %bt_save -s 123 -p Y           更新一个已存在的id为123的策略，将策略设为公开的(其他用户也可以访问但不能修改)\n\n    %bt_save --delete 123          删除id为123的策略\n\noptions:\n  --name NAME, -n NAME  策略名称(≤50字符)\n  --desc DESC, -d DESC  策略描述(≤1000字符)\n  --public PUBLIC, -p PUBLIC\n                        是否公开，一个字符: Y=公开，N=不公开(默认值)\n  --strategy STRATEGY, -s STRATEGY\n                        已存在的策略id(更新策略)\n  --delete DELETE       根据策略id删除策略",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "class_config_rst_doc",
        "type": "function",
        "description": "Generate rST documentation for this class' config options.\n\nExcludes traits defined on parent classes.",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "str",
          "description": " "
        }
      },
      {
        "name": "default_option",
        "type": "function",
        "description": "Make an entry in the options_table for fn, with value optstr",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fn": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "optstr": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fn",
            "optstr"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_latex",
        "type": "function",
        "description": "Format a string for latex inclusion.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strng": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strng"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_traceback",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "bt_lines": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "bt_lines"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "hold_trait_notifications",
        "type": "function",
        "description": "Context manager for bundling trait change notifications and cross\nvalidation.\n\nUse this when doing multiple trait assignments (init, config), to avoid\nrace conditions in trait notifiers requesting other trait values.\nAll trait notifications will fire after all values have been assigned.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "t.Any",
          "description": " "
        }
      },
      {
        "name": "parse_options",
        "type": "function",
        "description": "Parse options passed to an argument string.\n\nThe interface is similar to that of :func:`getopt.getopt`, but it\nreturns a :class:`~IPython.utils.struct.Struct` with the options as keys\nand the stripped argument string still as a string.\n\narg_str is quoted as a true sys.argv vector by using shlex.split.\nThis allows us to easily expand variables, glob files, quote\narguments, etc.\n\nParameters\n----------\narg_str : str\n    The arguments to parse.\nopt_str : str\n    The options specification.\nmode : str, default 'string'\n    If given as 'list', the argument string is returned as a list (split\n    on whitespace) instead of a string.\nlist_all : bool, default False\n    Put all option values in lists. Normally only options\n    appearing more than once are put in a list.\nposix : bool, default True\n    Whether to split the input line in POSIX mode or not, as per the\n    conventions outlined in the :mod:`shlex` module from the standard\n    library.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "arg_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "opt_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "long_opts": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "arg_str",
            "opt_str",
            "long_opts",
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "section_names",
        "type": "function",
        "description": "return section names as a list",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "list[str]",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "cross_validation_lock",
        "type": "property",
        "description": "A contextmanager for running a block with our cross validation lock set\nto True.\n\nAt the end of the block, the lock's value is restored to its value\nprior to entering the block."
      }
    ]
  },
  {
    "name": "Magics",
    "type": "class",
    "description": "Base class for implementing magic functions.\n\nShell functions which can be reached as %function_name. All magic\nfunctions should accept a string, which they can parse for their own\nneeds. This can make some functions easier to type, eg `%cd ../`\nvs. `%cd(\"../\")`\n\nClasses providing magic functions need to subclass this class, and they\nMUST:\n\n- Use the method decorators `@line_magic` and `@cell_magic` to decorate\n  individual methods as magic functions, AND\n\n- Use the class decorator `@magics_class` to ensure that the magic\n  methods are properly registered at the instance level upon instance\n  initialization.\n\nSee :mod:`magic_functions` for examples of actual implementation classes.",
    "methods": [
      {
        "name": "arg_err",
        "type": "function",
        "description": "Print docstring if incorrect arguments were passed",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "class_config_rst_doc",
        "type": "function",
        "description": "Generate rST documentation for this class' config options.\n\nExcludes traits defined on parent classes.",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "str",
          "description": " "
        }
      },
      {
        "name": "default_option",
        "type": "function",
        "description": "Make an entry in the options_table for fn, with value optstr",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fn": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "optstr": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fn",
            "optstr"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_latex",
        "type": "function",
        "description": "Format a string for latex inclusion.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strng": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strng"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "hold_trait_notifications",
        "type": "function",
        "description": "Context manager for bundling trait change notifications and cross\nvalidation.\n\nUse this when doing multiple trait assignments (init, config), to avoid\nrace conditions in trait notifiers requesting other trait values.\nAll trait notifications will fire after all values have been assigned.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "t.Any",
          "description": " "
        }
      },
      {
        "name": "parse_options",
        "type": "function",
        "description": "Parse options passed to an argument string.\n\nThe interface is similar to that of :func:`getopt.getopt`, but it\nreturns a :class:`~IPython.utils.struct.Struct` with the options as keys\nand the stripped argument string still as a string.\n\narg_str is quoted as a true sys.argv vector by using shlex.split.\nThis allows us to easily expand variables, glob files, quote\narguments, etc.\n\nParameters\n----------\narg_str : str\n    The arguments to parse.\nopt_str : str\n    The options specification.\nmode : str, default 'string'\n    If given as 'list', the argument string is returned as a list (split\n    on whitespace) instead of a string.\nlist_all : bool, default False\n    Put all option values in lists. Normally only options\n    appearing more than once are put in a list.\nposix : bool, default True\n    Whether to split the input line in POSIX mode or not, as per the\n    conventions outlined in the :mod:`shlex` module from the standard\n    library.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "arg_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "opt_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "long_opts": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "arg_str",
            "opt_str",
            "long_opts",
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "section_names",
        "type": "function",
        "description": "return section names as a list",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "list[str]",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "cross_validation_lock",
        "type": "property",
        "description": "A contextmanager for running a block with our cross validation lock set\nto True.\n\nAt the end of the block, the lock's value is restored to its value\nprior to entering the block."
      }
    ]
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as cell magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a cell magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a cell magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a cell magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipython",
    "type": "function",
    "description": "Get the global InteractiveShell instance.\n\nReturns None if no InteractiveShell instance is registered.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as line_cell magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a line_cell magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a line_cell magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a line_cell magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as line magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a line magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a line magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a line magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "load_ipython_extension",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "ipython": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "ipython"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magics_class",
    "type": "function",
    "description": "Class decorator for all subclasses of the main Magics class.\n\nAny class that subclasses Magics *must* also apply this decorator, to\nensure that all the methods that have been decorated as line/cell magics\nget correctly registered in the class instance.  This is necessary because\nwhen method decorators run, the class does not exist yet, so they\ntemporarily store their information into a module global.  Application of\nthis class decorator copies that global data to the class instance and\nclears the global.\n\nObviously, this mechanism is not thread-safe, which means that the\n*creation* of subclasses of Magic should only be done in a single-thread\ncontext.  Instantiation of the classes has no restrictions.  Given that\nthese classes are typically created at IPython startup time and before user\napplication code becomes active, in practice this should not pose any\nproblems.",
    "parameters": {
      "type": "object",
      "properties": {
        "cls": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "cls"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "needs_local_scope",
    "type": "function",
    "description": "Decorator to mark magic functions which need to local scope to run.",
    "parameters": {
      "type": "object",
      "properties": {
        "func": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "func"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "unload_ipython_extension",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "ipython": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "ipython"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "FactorProcessParams",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_params",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_params": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_params"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_param",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_alias",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_alias": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_alias"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_defaults",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_defaults": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_defaults"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "df_table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "FactorStore",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_day",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "is_temp_day": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "is_temp_day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "add_factor_value",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "rank_ic": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "factor_name",
            "factor_series",
            "rank_ic"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_values_and_ic",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "IC_Rule",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "allow_fallback",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "allow": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "allow"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "half_life_weights",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "N": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "H": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "N",
            "H"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "max_ir_weights",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df_ic": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "df_ic"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "min_periods",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "combine_factor",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "fac_series_dict": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "df_ic": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "weighting": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sr_conf_weight": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sr_conf_direction": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "orthogonalize": {
          "type": "bool",
          "default": null,
          "description": " "
        },
        "logger": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fac_name": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "fac_series_dict",
        "df_ic",
        "weighting",
        "sr_conf_weight",
        "sr_conf_direction",
        "orthogonalize",
        "logger",
        "fac_name"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_alpha_model",
    "type": "function",
    "description": "按调仓日权重回测\n\nArgs:\n    config: 策略运行参数\n    alpha_model_config: Alpha模型的参数\n    portfolio_construct_config: 组合构建参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "alpha_model_config": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "portfolio_construct_config": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "args": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "args"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_analyze_single_factor",
    "type": "function",
    "description": "单因子分析\n\nArgs:\n    config: 策略通用配置参数\n    extra_config: 因子分析参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "extra_config": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_single_factor",
    "type": "function",
    "description": "单因子回测\n\nArgs:\n    config: 策略通用配置参数\n    factor_conf: 被测因子配置\n    portfolio_construct_config: 组合构建参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "factor_conf": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "portfolio_construct_config": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "DataApi",
    "type": "class",
    "description": "GFQuant DataApi",
    "methods": [
      {
        "name": "get_factor_info",
        "type": "function",
        "description": "取因子信息表\n\nArgs:\n    factor_class (str): 匹配因子大类名称(估值、成长、盈利质量等)和分类(alpha, market, period等)，不区分大小写\n    keyword (str): 在因子名称、因子描述中搜索的关键词，不区分大小写\n    compact (bool): 是否只返回常用的信息列\n\nReturns:\n    :obj:`pandas.DataFrame`: 因子信息表\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_info('盈利质量')\n    >>> api.get_factor_info('alpha', keyword='YOY')\n    >>> api.get_factor_info('user')  # 用户自定义因子",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_class": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "compact": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_alpha_factor_name_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_asset_daily",
        "type": "function",
        "description": "获取资产日度数据：因子暴露、特质风险",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_barra_factor_name",
        "type": "function",
        "description": "        \n        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor",
        "type": "function",
        "description": "取因子数据。 alpha因子、行情数据、状态数据都用统一的接口取数。\n\nArgs:\n    factor_name (str): 因子名称或列表，如'Q_EPS', 'CLOSE,CLOSE_ADJ'\n    dates (str or list): 日期字符串或列表，如'20181012-20181024'、'20181008,20181013,20181024'、[20190513, 20190603]\n    codes (str or list, optional): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    fill (int): 如果当天没有因子数据，是否取更早日期的数据填充，默认为0不填充，正整数n为最多往前看n个交易日取最新值填充;\n                仅当dates时日期列表时有效，若dates是日期范围(如'20181012-20181024')则fill参数无效\n    out (str): 'df'/'series'，如果数据只有一行，可选择返回DataFrame或Series\n    batch (int): 按batch指定的交易日数量分批取数\n\nReturns:\n    :obj:`pd.DataFrame` or :obj:`pd.Series` or None: 因子数据DataFrame，其index为日期，columns为证券代码。\n    如果factor_name同时指定多个因子，则columns为2层的MultiIndex(因子名称, 证券代码)\n\nRaises:\n    ValueError: 请求参数错误\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor('EP', '20180102, 20180201, 20180301')\n    >>> api.get_factor('CLOSE,CLOSE_ADJ,AMOUNT', '20180201-20180301', '000001.SZ, 600000.SH')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "out": {
              "type": "any",
              "default": "df",
              "description": " "
            },
            "batch": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "factor_name",
            "dates",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cov",
        "type": "function",
        "description": "因子收益率协方差：日度\n        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_info",
        "type": "function",
        "description": "取因子信息表\n\nArgs:\n    factor_class (str): 匹配因子大类名称(估值、成长、盈利质量等)和分类(alpha, market, period等)，不区分大小写\n    keyword (str): 在因子名称、因子描述中搜索的关键词，不区分大小写\n    compact (bool): 是否只返回常用的信息列\n\nReturns:\n    :obj:`pandas.DataFrame`: 因子信息表\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_info('盈利质量')\n    >>> api.get_factor_info('alpha', keyword='YOY')\n    >>> api.get_factor_info('user')  # 用户自定义因子",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_class": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "compact": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_name_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_return",
        "type": "function",
        "description": "        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_series",
        "type": "function",
        "description": "取一个日期的一个因子数据，返回一个pandas.Series；可选因子中性化处理。\n\n注意：当取Barra风格因子和非alpha因子时，请勿指定 `neutral=True` 。因为Barra因子的原始值已标准化过，非alpha因子标准化处理没有意义。\n\nArgs:\n    factor (str or Series): 因子名称或因子原始值的Series\n    day (datetime or str): 表示一个日期\n    codes (str or list): 股票代码列表，如'000001.SZ, 600000.SH'\n    fill (int): 如果当天没有因子数据，是否用更早的数据填充，默认为0不填充，正整数表示最多往前取多少天，同 :obj:`get_factor()` 的 `fill` 参数，仅当 `factor` 参数为因子名称时有效。\n                特殊处理：当day为一个非交易日日期，即使fill=0时也会取day前推最后一个交易日的因子值\n    universe (str or callable): 选样空间，默认值None，可选值：['ALL', 'HS300', 'ZZ500', 'ZZ800', 'ZZ1000', 'CYB', 'H50'];\n        如为函数，则其形式为 *func(date, DataApi) -> pd.Series*, 返回Series的index为股票代码, value为bool值(或value>0)表示对应的股票是否被选入股票池。\n        (参见  `自定义选股池 <doc_data_api.ipynb#自定义选股池>`_ )\n\n    exclude (bool or dict): 是否剔除新股/ST/停牌股票等，默认None(不剔除)。如为True, 则使用默认剔除条件: `dict(no_new=120, no_st=True, no_suspend=True)`;\n        也可以设置为自定义剔除参数组合，如只剔除停牌: `exclude={\"no_suspend\": True}`。dict可选参数说明：\n\n        * **no_new** (*bool or int*): 是否剔除新股，ex_new=120表示剔除上市交易日不超过120天的股票(如True,默认为120)\n        * **no_st** (*bool*): 是否剔除ST股票\n        * **no_suspend** (*bool*): 是否剔除停牌股票\n\n    neutral (bool or dict): 是否做因子中性化处理，默认False(返回因子原始值); 如为True, 则使用以下6个参数的默认值，也即最常用的中性化处理参数组合来处理因子原始值并返回处理后的值。\n        如其中某些参数不使用默认值可使用自定义参数组合，如只做log和zscore: `neutral=dict(log=True, zscore=True)`\n\n        * **log** (*bool*): 是否做log处理(自然对数)，一般在处理市值类因子时选用，默认False\n        * **outlier** (*bool*): 是否去极值(MAD处理)，默认True\n        * **sector_fill** (*bool or str or float*): 分行业填充缺失值的方式，默认为用行业中值填充('median'或True)，还可以用'min'/'max'/'mean'或直接指定一个用于填充的数值(如0); None则不填充\n        * **pre_neu** (*str*): 前置处理，默认None。可选 'zscore', 'rank'\n        * **sector_neu** (*bool or str*): 做行业中性使用的因子，默认为中信一级行业('LEVEL_1_CITIC'或True); None则不做行业中性\n        * **size_neu** (*bool or str*): 做市值中性使用的因子，默认为总市值('MV'或True); None则不做市值中性\n        * **zscore** (*bool*): 是否做Z-Score变换，默认True\n\nReturns:\n    :obj:`Series` or None: 因子数据Series，其index为证券代码，values为因子值。\n\nRaises:\n    ValueError: 请求参数错误，或结果不是一维的Series\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_series('VOLUME', '20190531')\n    >>> api.get_factor_series('Q_EP', '20190531', universe='HS300', exclude=True, neutral=True)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "universe": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "exclude": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "factor",
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_summary",
        "type": "function",
        "description": "(Experimental) 取一段时间内系统公共因子已预先计算好的分组收益表现汇总，返回一个pandas.DataFrame。\n返回结果等同于量化投研平台上的“因子分析——因子表现汇总”中的因子表现数据。\n\nArgs:\n    dates: 指定一个时间段，格式如'20210101-20210131'\n    stock_pool: 选择股票池，可选'ALL'/'HS300'/'ZZ500'/'ZZ1000'/'CYB'\n    style: 取大类因子数据：True，取细分因子数据：False\n    neutral: 是否将因子中性化处理, True/False\n\nReturns:\n    :obj:`DataFrame` or None: 返回因子表现汇总结果。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "stock_pool": {
              "type": "any",
              "default": "ALL",
              "description": " "
            },
            "style": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "dates"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_realtime_price",
        "type": "function",
        "description": "实时行情 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_rpvalue",
        "type": "function",
        "description": "\"(Experimental) 取报告期数据(report-period value)。\n\nArgs:\n    names (str): 报告期数据的名称或列表，如'RP_CASH_EQ', 'RP_Q_PROFIT, RP_Q_OPER_REV'\n    report_periods (str or list, optional): 报告期日期的字符串或列表，如'20181231, 20190630'、['20181231', '20190331']；若report_periods=None,则取day日期能取到的最新报告期数值\n    codes (str or list, optional): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    day (str, optional): 指定本次查询的截止日期，如'20181012'，该日期之后发布的公告数据不会在返回的结果里；默认值为当前日期\n    day_back (str, optional): 查询公告发布日期的回溯日数，默认400。若report_periods=None, 则(day-day_back)日期之前发布的公告不会在返回的结果里。\n\nReturns:\n    :obj:`pd.DataFrame` or None: 报告期数据DataFrame，columns为['report_period', 'code', 'issue_date'] + names\n\nRaises:\n    ValueError: 请求参数错误\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_rpvalue('RP_CASH_EQ', '20181231, 20190630, 20191231', day='20200301')\n    >>> api.get_rpvalue('RP_Q_PROFIT, RP_Q_OPER_REV', '20190630, 20191231', '000001.SZ, 600000.SH')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "names": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "report_periods": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "day": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "day_back": {
              "type": "any",
              "default": "400",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "names",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_rpvalue_series",
        "type": "function",
        "description": "(Experimental) 取一个日期可得的一个报告期数据，返回一个pandas.Series；可选因子中性化处理。\n\nArgs:\n    name (str): 报告期数据名称，如'RP_CASH_EQ'\n    day (str or datetime): 表示当前日期，只取当前日期及之前发布的公告数据\n    codes (str or list): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    report_period (None, str or datetime): 默认值None，返回day日期可得的最新报告期数据；如指定了一个报告期日期，则返回day日期可得的该报告期数据，此时参数fill=True无效\n    fill (bool): 未指定报告期时(report_period==None)，对于没有最新报告期数据的股票，是否用更早报告期的数据填充，默认为不填充(False)\n    universe (str or callable): 同 :obj:`get_factor_series()` 的 `universe` 参数\n    exclude (bool or dict): 同 :obj:`get_factor_series()` 的 `exclude` 参数\n    neutral (bool or dict): 同 :obj:`get_factor_series()` 的 `neutral` 参数\n\nReturns:\n    :obj:`Series` or None: 报告期数据Series，其index为证券代码，values为因子值。\n\nRaises:\n    ValueError: 请求参数错误，或结果不是一维的Series\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_rpvalue_series('RP_Q_PROFIT', '20191231')\n    >>> api.get_rpvalue_series('RP_Q_PROFIT', '20190531', fill=True, universe='HS300', exclude=True)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "report_period": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "universe": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "exclude": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "name",
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_split_sector_series",
        "type": "function",
        "description": "取一个日期的一级行业因子数据，可选将部分一级行业拆分为二级行业\n\nArgs:\n    tday (datetime or str): 表示一个日期\n    sector (str): 一级行业因子名称， 如'LEVEL_1_CITIC'或'LEVEL_1_SW’\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表，如 ['非银行金融', '电子']\n    codes (str or list): 股票代码列表，为None则取全市场股票\n    fill (int): 如果当天没有因子数据，是否用更早的数据填充，默认为0，正整数表示往前取多少天\n\nReturns:\n    :obj:`pd.Series`: 行业分类序列，index为股票名称，value为行业名称\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_series('20190401', 'LEVEL_1_SW').dropna()\n    >>> api.get_split_sector_series('20190401', 'LEVEL_1_SW', split_sectors=['非银金融']).dropna()",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": [
            "tday",
            "sector",
            "split_sectors"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_trade_days",
        "type": "function",
        "description": "取交易日列表。\n\nArgs:\n    start (str): 开始日期, 格式如: '20181008'\n    end (str): 结束日期, 格式如: '20181024'\n    fmt (str): 指定返回日期的格式，'dt'返回日期格式，'str'或'str-'返回字符串格式，'i'返回整数格式\n    arr (bool): False: 返回list; True: 返回np.array\n\nReturns:\n    :obj:`numpy.ndarray`: 日期数组\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_trade_days('20181009', '20181013')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fmt": {
              "type": "any",
              "default": "dt",
              "description": " "
            },
            "arr": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "portfolio_optimize",
        "type": "function",
        "description": "组合优化：控制组合相对于基准的行业/风格因子暴露、个股相对基准的权重偏离、个股的绝对权重、成分股的总权重占比、换手率和跟踪误差等。\n\nArgs:\n    expect_rtn_series (Series): 预期收益序列，index为股票代码，不存在的股票(或value为nan的股票)不可选；\n                                不可选的股票相对基准的偏离(也可能出现一个行业的所有股票都不可选)，均不会导致优化器出错：\n                                1) 不可选的股票，即使它在基准中有权重，也不会受个股权重偏离参数的约束(它在优化结果中的权重一定是0)；\n                                2) 不可选的行业，如果它在基准中有权重，即使不能满足行业暴露参数的约束，也仅会输出一条警告信息。\n    tday (datetime or str): 一个交易日日期\n    bench (str): 基准权重因子名称，目前支持 ‘WEIGHT_[H50|300|500|800|1000|CYBZ|CYB|ALL]’\n    sector (str): 一级行业因子名称，目前支持 'LEVEL_1_[CITIC|SW]'\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表\n    sect_exp_min (float): 组合相对基准的行业暴露下限\n    sect_exp_max (float): 组合相对基准的行业暴露上限\n    sect_exp_min_deviation (dict | callable): 单独设置行业暴露度在'sect_exp_min'基础上的偏离\n    sect_exp_max_deviation (dict | callable): 单独设置行业暴露度在'sect_exp_max'基础上的偏离\n    style_factors (str or list): 可选'LNMV'(自由流通市值的自然对数) 或'BARRA'(10个Barra风格因子)，也可以自定义风格因子(参见 `因子标准化处理 <doc_data_norm.ipynb#自定义标准化处理规则>`_ )\n    style_exp_min (float): 组合相对基准的风格因子暴露下限\n    style_exp_max (float): 组合相对基准的风格因子暴露上限\n    style_exp_min_deviation (dict | callable): 单独设置风格因子暴露度在'style_exp_min'基础上的偏离\n    style_exp_max_deviation (dict | callable): 单独设置风格因子暴露度在'style_exp_max'基础上的偏离\n    rel_weight_min (float): 组合内个股相对基准的的权重偏差下限，默认不限(None)\n    rel_weight_max (float): 组合内个股相对基准的的权重偏差上限\n    abs_weight_min (float): 组合内个股的绝对权重下限\n    abs_weight_max (float): 组合内个股的绝对权重上限\n    bench_pct (float): 组合内基准指数成分股的权重占比下限(上限为1，即全部在基准内选股)\n    turnover_max (float): 组合换手率上限\n    pre_weight (pd.Series): 调仓前的持仓权重，计算组合换手率使用(如无持仓可设为None)\n    trackerr_max (float): 组合跟踪误差上限\n    cov_type : 跟踪误差约束时，优化求解时，采用的方法\n    result_stock_count (int): 组合优化结果可返回的最大股票数量，个股权重按从大到小排序，超过此数量的个股的权重将被收回重新分配\n    result_weight_min (float): 组合优化结果要求的个股最低权重值，低于此值的个股的权重将被收回重新分配\n    result_weight_sum (float): 组合优化结果的总权重，为避免数值计算误差请设定为小于1的数\n    fill_barra (bool): 组合优化时，如果用到Barra因子但当日没有值，是否取前值填充\n    verify_result (bool): 组合优化后，复查结果是否符合约束条件\n    max_stk_nums: 股票数量约束\n\nReturns:\n    :obj:`Series`: 组合优化的结果Series，其index为证券代码，values为权重值。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "expect_rtn_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "any",
              "default": "WEIGHT_300",
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_CITIC",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sect_exp_min": {
              "type": "any",
              "default": "-0.0",
              "description": " "
            },
            "sect_exp_max": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "sect_exp_min_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sect_exp_max_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "style_factors": {
              "type": "any",
              "default": "LNMV",
              "description": " "
            },
            "style_exp_min": {
              "type": "any",
              "default": "-0.0",
              "description": " "
            },
            "style_exp_max": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "style_exp_min_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "style_exp_max_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "rel_weight_min": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "rel_weight_max": {
              "type": "any",
              "default": "0.02",
              "description": " "
            },
            "abs_weight_min": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "abs_weight_max": {
              "type": "any",
              "default": "0.1",
              "description": " "
            },
            "bench_pct": {
              "type": "any",
              "default": "0.8",
              "description": " "
            },
            "turnover_max": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "pre_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "trackerr_max": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "cov_type": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "result_stock_count": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "result_weight_min": {
              "type": "any",
              "default": "0.001",
              "description": " "
            },
            "result_weight_sum": {
              "type": "any",
              "default": "0.9999",
              "description": " "
            },
            "max_stk_nums": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill_barra": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "verify_result": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "expect_rtn_series",
            "tday"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "portfolio_weighting",
        "type": "function",
        "description": "组合加权构建：可选 “不考虑行业加权” 或 “先选股再分行业配权”或“先定行业权重，再行业内选股配权”。\n\nArgs:\n    expect_rtn_series (Series): 预期收益序列，index为股票代码，value为nan的股票不可选\n    tday (datetime or str): 一个交易日日期\n    weighting (str or Series or callable): 股票权重分配方式，支持'equal'(等权)、'score'(使用expect_rtn_series参数的值)\n        或一个函数(def func(score, dataApi) -> pd.Series)，也可以用另一个因子名称作为权重，如'FFMV'即为自由流通市值加权；\n        权重取值只保留非负值\n    top_n (int): 选择前n个股票；如果'sector_first'=True，则在每个行业里选择前n个股票\n    top_pct (float): 选择前(pct*100)%个股票；如果'sector_first'=True，则在每个行业里选择前(pct*100)%个股票(四舍五入)\n    per_sector_weighting (bool): 是否分行业配权重，如为False, 则由此以下的参数都不生效\n    sector_first (bool): 是否先设定行业权重再在行业内选股, False:先选股票再按行业配权重; True:先定行业权重再选股再配权重\n    bench (str): 行业基准权重因子名称，目前支持 ‘WEIGHT_[H50|300|500|800|1000|CYBZ|CYB|ALL]’，以及行业等权'equal_sector'\n    sector (str): 一级行业因子名称，目前支持 'LEVEL_1_[CITIC|SW]'\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表\n    sector_deviation (dict): 行业权重偏离，被拆分的一级行业不能配置，应指定对应二级行业的值\n    final_equal (bool): 分行业选股(也配了权重)的最后，是否最终按每个股票等权配置(如场景：组合要和等权基准比较)\n\nReturns:\n    :obj:`pd.Series`: 组合权重分配结果，其index为证券代码，values为权重值。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "expect_rtn_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weighting": {
              "type": "Union",
              "default": "equal",
              "description": " "
            },
            "top_n": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "top_pct": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "per_sector_weighting": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "sector_first": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "bench": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sector_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "final_equal": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "expect_rtn_series",
            "tday"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_trade_days",
        "type": "function",
        "description": "取交易日列表。\n\nArgs:\n    start (str): 开始日期, 格式如: '20181008'\n    end (str): 结束日期, 格式如: '20181024'\n    fmt (str): 指定返回日期的格式，'dt'返回日期格式，'str'或'str-'返回字符串格式，'i'返回整数格式\n    arr (bool): False: 返回list; True: 返回np.array\n\nReturns:\n    :obj:`numpy.ndarray`: 日期数组\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_trade_days('20181009', '20181013')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fmt": {
              "type": "any",
              "default": "dt",
              "description": " "
            },
            "arr": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "server",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_weight",
    "type": "function",
    "description": "按调仓日权重回测\n\nArgs:\n    config: 策略运行参数\n    weight_df: 类似PMS调仓格式的DataFrame, 需要用到3列：调整日期 证券代码(Wind格式) 持仓权重(日权重之和<=1)，证券类型只支持股票；\n        weight_df也可以通过 config[\"holding\"] 配置(同时weight_df参数必须不指定)\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "weight_df": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run",
    "type": "function",
    "description": "Every module as its globals() so can't use it as GLOBAL variables ",
    "parameters": {
      "type": "object",
      "properties": {
        "code": {
          "type": "str",
          "default": null,
          "description": " "
        },
        "stg_info": {
          "type": "dict",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "code"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Base",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BigInteger",
    "type": "class",
    "description": "A type for bigger ``int`` integers.\n\nTypically generates a ``BIGINT`` in DDL, and otherwise acts like\na normal :class:`.Integer` on the Python side.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "Column",
    "type": "class",
    "description": "Represents a column in a database table.",
    "methods": [
      {
        "name": "all_",
        "type": "function",
        "description": "Produce an :func:`_expression.all_` clause against the\nparent object.\n\nSee the documentation for :func:`_sql.all_` for examples.\n\n.. note:: be sure to not confuse the newer\n    :meth:`_sql.ColumnOperators.all_` method with the **legacy**\n    version of this method, the :meth:`_types.ARRAY.Comparator.all`\n    method that's specific to :class:`_types.ARRAY`, which uses a\n    different calling style.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "any_",
        "type": "function",
        "description": "Produce an :func:`_expression.any_` clause against the\nparent object.\n\nSee the documentation for :func:`_sql.any_` for examples.\n\n.. note:: be sure to not confuse the newer\n    :meth:`_sql.ColumnOperators.any_` method with the **legacy**\n    version of this method, the :meth:`_types.ARRAY.Comparator.any`\n    method that's specific to :class:`_types.ARRAY`, which uses a\n    different calling style.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "asc",
        "type": "function",
        "description": "Produce a :func:`_expression.asc` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "bitwise_not",
        "type": "function",
        "description": "Produce a bitwise NOT operation, typically via the ``~``\noperator.\n\n.. versionadded:: 2.0.2\n\n.. seealso::\n\n    :ref:`operators_bitwise`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "desc",
        "type": "function",
        "description": "Produce a :func:`_expression.desc` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "distinct",
        "type": "function",
        "description": "Produce a :func:`_expression.distinct` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "get_children",
        "type": "function",
        "description": "Return immediate child :class:`.visitors.HasTraverseInternals`\nelements of this :class:`.visitors.HasTraverseInternals`.\n\nThis is used for visit traversal.\n\n\\**kw may contain flags that change the collection that is\nreturned, for example to return a subset of items in order to\ncut down on larger traversals, or to return child items from a\ndifferent context (such as schema-level collections instead of\nclause-level).",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "column_tables": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "nulls_first",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_first` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_first()`` operator is\n   renamed from ``nullsfirst()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_last",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_last` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_last()`` operator is\n   renamed from ``nullslast()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_first",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_first` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_first()`` operator is\n   renamed from ``nullsfirst()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_last",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_last` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_last()`` operator is\n   renamed from ``nullslast()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "anon_key_label",
        "type": "property",
        "description": ".. deprecated:: 1.4 The :attr:`_expression.ColumnElement.anon_key_label` attribute is now private, and the public accessor is deprecated."
      },
      {
        "name": "anon_label",
        "type": "property",
        "description": ".. deprecated:: 1.4 The :attr:`_expression.ColumnElement.anon_label` attribute is now private, and the public accessor is deprecated."
      },
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "entity_namespace",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "expression",
        "type": "property",
        "description": "Return a column expression.\n\nPart of the inspection interface; returns self."
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      }
    ]
  },
  {
    "name": "Date",
    "type": "class",
    "description": "A type for ``datetime.date()`` objects.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "DateTime",
    "type": "class",
    "description": "A type for ``datetime.datetime()`` objects.\n\nDate and time types return objects from the Python ``datetime``\nmodule.  Most DBAPIs have built in support for the datetime\nmodule, with the noted exception of SQLite.  In the case of\nSQLite, date and time types are stored as strings which are then\nconverted back to datetime objects when rows are returned.\n\nFor the time representation within the datetime type, some\nbackends include additional options, such as timezone support and\nfractional seconds support.  For fractional seconds, use the\ndialect-specific datatype, such as :class:`.mysql.TIME`.  For\ntimezone support, use at least the :class:`_types.TIMESTAMP` datatype,\nif not the dialect-specific datatype object.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "Float",
    "type": "class",
    "description": "Type representing floating point types, such as ``FLOAT`` or ``REAL``.\n\nThis type returns Python ``float`` objects by default, unless the\n:paramref:`.Float.asdecimal` flag is set to ``True``, in which case they\nare coerced to ``decimal.Decimal`` objects.\n\nWhen a :paramref:`.Float.precision` is not provided in a\n:class:`_types.Float` type some backend may compile this type as\nan 8 bytes / 64 bit float datatype. To use a 4 bytes / 32 bit float\ndatatype a precision <= 24 can usually be provided or the\n:class:`_types.REAL` type can be used.\nThis is known to be the case in the PostgreSQL and MSSQL dialects\nthat render the type as ``FLOAT`` that's in both an alias of\n``DOUBLE PRECISION``. Other third party dialects may have similar\nbehavior.",
    "methods": [
      {
        "name": "bind_processor",
        "type": "function",
        "description": "Return a conversion function for processing bind values.\n\nReturns a callable which will receive a bind parameter value\nas the sole positional argument and will return a value to\nsend to the DB-API.\n\nIf processing is not necessary, the method should return ``None``.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.bind_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.bind_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_bind_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`\n\n\n:param dialect: Dialect instance in use.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "result_processor",
        "type": "function",
        "description": "Return a conversion function for processing result row values.\n\nReturns a callable which will receive a result row column\nvalue as the sole positional argument and will return a value\nto return to the user.\n\nIf processing is not necessary, the method should return ``None``.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.result_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.result_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_result_value`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`\n\n:param dialect: Dialect instance in use.\n\n:param coltype: DBAPI coltype argument received in cursor.description.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "coltype": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect",
            "coltype"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "ForeignKey",
    "type": "class",
    "description": "Defines a dependency between two columns.\n\n``ForeignKey`` is specified as an argument to a :class:`_schema.Column`\nobject,\ne.g.::\n\n    t = Table(\n        \"remote_table\",\n        metadata,\n        Column(\"remote_id\", ForeignKey(\"main_table.id\")),\n    )\n\nNote that ``ForeignKey`` is only a marker object that defines\na dependency between two columns.   The actual constraint\nis in all cases represented by the :class:`_schema.ForeignKeyConstraint`\nobject.   This object will be generated automatically when\na ``ForeignKey`` is associated with a :class:`_schema.Column` which\nin turn is associated with a :class:`_schema.Table`.   Conversely,\nwhen :class:`_schema.ForeignKeyConstraint` is applied to a\n:class:`_schema.Table`,\n``ForeignKey`` markers are automatically generated to be\npresent on each associated :class:`_schema.Column`, which are also\nassociated with the constraint object.\n\nNote that you cannot define a \"composite\" foreign key constraint,\nthat is a constraint between a grouping of multiple parent/child\ncolumns, using ``ForeignKey`` objects.   To define this grouping,\nthe :class:`_schema.ForeignKeyConstraint` object must be used, and applied\nto the :class:`_schema.Table`.   The associated ``ForeignKey`` objects\nare created automatically.\n\nThe ``ForeignKey`` objects associated with an individual\n:class:`_schema.Column`\nobject are available in the `foreign_keys` collection\nof that column.\n\nFurther examples of foreign key configuration are in\n:ref:`metadata_foreignkeys`.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "target_fullname",
        "type": "property",
        "description": "Return a string based 'column specification' for this\n:class:`_schema.ForeignKey`.\n\nThis is usually the equivalent of the string-based \"tablename.colname\"\nargument first passed to the object's constructor."
      }
    ]
  },
  {
    "name": "Index",
    "type": "class",
    "description": "A table-level INDEX.\n\nDefines a composite (one or more column) INDEX.\n\nE.g.::\n\n    sometable = Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n    )\n\n    Index(\"some_index\", sometable.c.name)\n\nFor a no-frills, single column index, adding\n:class:`_schema.Column` also supports ``index=True``::\n\n    sometable = Table(\n        \"sometable\", metadata, Column(\"name\", String(50), index=True)\n    )\n\nFor a composite index, multiple columns can be specified::\n\n    Index(\"some_index\", sometable.c.name, sometable.c.address)\n\nFunctional indexes are supported as well, typically by using the\n:data:`.func` construct in conjunction with table-bound\n:class:`_schema.Column` objects::\n\n    Index(\"some_index\", func.lower(sometable.c.name))\n\nAn :class:`.Index` can also be manually associated with a\n:class:`_schema.Table`,\neither through inline declaration or using\n:meth:`_schema.Table.append_constraint`.  When this approach is used,\nthe names\nof the indexed columns can be specified as strings::\n\n    Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n        Index(\"some_index\", \"name\", \"address\"),\n    )\n\nTo support functional or expression-based indexes in this form, the\n:func:`_expression.text` construct may be used::\n\n    from sqlalchemy import text\n\n    Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n        Index(\"some_index\", text(\"lower(name)\")),\n    )\n\n.. seealso::\n\n    :ref:`schema_indexes` - General information on :class:`.Index`.\n\n    :ref:`postgresql_indexes` - PostgreSQL-specific options available for\n    the :class:`.Index` construct.\n\n    :ref:`mysql_indexes` - MySQL-specific options available for the\n    :class:`.Index` construct.\n\n    :ref:`mssql_indexes` - MSSQL-specific options available for the\n    :class:`.Index` construct.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      }
    ]
  },
  {
    "name": "Integer",
    "type": "class",
    "description": "A type for ``int`` integers.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "PickleType",
    "type": "class",
    "description": "Holds Python objects, which are serialized using pickle.\n\nPickleType builds upon the Binary type to apply Python's\n``pickle.dumps()`` to incoming objects, and ``pickle.loads()`` on\nthe way out, allowing any pickleable Python object to be stored as\na serialized binary field.\n\nTo allow ORM change events to propagate for elements associated\nwith :class:`.PickleType`, see :ref:`mutable_toplevel`.",
    "methods": [
      {
        "name": "bind_processor",
        "type": "function",
        "description": "Provide a bound value processing function for the\ngiven :class:`.Dialect`.\n\nThis is the method that fulfills the :class:`.TypeEngine`\ncontract for bound value conversion which normally occurs via\nthe :meth:`_types.TypeEngine.bind_processor` method.\n\n.. note::\n\n    User-defined subclasses of :class:`_types.TypeDecorator` should\n    **not** implement this method, and should instead implement\n    :meth:`_types.TypeDecorator.process_bind_param` so that the \"inner\"\n    processing provided by the implementing type is maintained.\n\n:param dialect: Dialect instance in use.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "compare_values",
        "type": "function",
        "description": "Given two values, compare them for equality.\n\nBy default this calls upon :meth:`.TypeEngine.compare_values`\nof the underlying \"impl\", which in turn usually\nuses the Python equals operator ``==``.\n\nThis function is used by the ORM to compare\nan original-loaded value with an intercepted\n\"changed\" value, to determine if a net change\nhas occurred.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "x": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "y": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "x",
            "y"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "result_processor",
        "type": "function",
        "description": "Provide a result value processing function for the given\n:class:`.Dialect`.\n\nThis is the method that fulfills the :class:`.TypeEngine`\ncontract for bound value conversion which normally occurs via\nthe :meth:`_types.TypeEngine.result_processor` method.\n\n.. note::\n\n    User-defined subclasses of :class:`_types.TypeDecorator` should\n    **not** implement this method, and should instead implement\n    :meth:`_types.TypeDecorator.process_result_value` so that the\n    \"inner\" processing provided by the implementing type is maintained.\n\n:param dialect: Dialect instance in use.\n:param coltype: A SQLAlchemy data type",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "coltype": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect",
            "coltype"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "comparator_factory",
        "type": "property",
        "description": "Base class for custom comparison operations defined at the\ntype level.  See :attr:`.TypeEngine.comparator_factory`."
      },
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      },
      {
        "name": "sort_key_function",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "PrimaryKeyConstraint",
    "type": "class",
    "description": "A table-level PRIMARY KEY constraint.\n\nThe :class:`.PrimaryKeyConstraint` object is present automatically\non any :class:`_schema.Table` object; it is assigned a set of\n:class:`_schema.Column` objects corresponding to those marked with\nthe :paramref:`_schema.Column.primary_key` flag::\n\n    >>> my_table = Table(\n    ...     \"mytable\",\n    ...     metadata,\n    ...     Column(\"id\", Integer, primary_key=True),\n    ...     Column(\"version_id\", Integer, primary_key=True),\n    ...     Column(\"data\", String(50)),\n    ... )\n    >>> my_table.primary_key\n    PrimaryKeyConstraint(\n        Column('id', Integer(), table=<mytable>,\n               primary_key=True, nullable=False),\n        Column('version_id', Integer(), table=<mytable>,\n               primary_key=True, nullable=False)\n    )\n\nThe primary key of a :class:`_schema.Table` can also be specified by using\na :class:`.PrimaryKeyConstraint` object explicitly; in this mode of usage,\nthe \"name\" of the constraint can also be specified, as well as other\noptions which may be recognized by dialects::\n\n    my_table = Table(\n        \"mytable\",\n        metadata,\n        Column(\"id\", Integer),\n        Column(\"version_id\", Integer),\n        Column(\"data\", String(50)),\n        PrimaryKeyConstraint(\"id\", \"version_id\", name=\"mytable_pk\"),\n    )\n\nThe two styles of column-specification should generally not be mixed.\nAn warning is emitted if the columns present in the\n:class:`.PrimaryKeyConstraint`\ndon't match the columns that were marked as ``primary_key=True``, if both\nare present; in this case, the columns are taken strictly from the\n:class:`.PrimaryKeyConstraint` declaration, and those columns otherwise\nmarked as ``primary_key=True`` are ignored.  This behavior is intended to\nbe backwards compatible with previous behavior.\n\nFor the use case where specific options are to be specified on the\n:class:`.PrimaryKeyConstraint`, but the usual style of using\n``primary_key=True`` flags is still desirable, an empty\n:class:`.PrimaryKeyConstraint` may be specified, which will take on the\nprimary key column collection from the :class:`_schema.Table` based on the\nflags::\n\n    my_table = Table(\n        \"mytable\",\n        metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"version_id\", Integer, primary_key=True),\n        Column(\"data\", String(50)),\n        PrimaryKeyConstraint(name=\"mytable_pk\", mssql_clustered=True),\n    )",
    "methods": [],
    "properties": [
      {
        "name": "columns_autoinc_first",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "Sequence",
    "type": "class",
    "description": "Represents a named database sequence.\n\nThe :class:`.Sequence` object represents the name and configurational\nparameters of a database sequence.   It also represents\na construct that can be \"executed\" by a SQLAlchemy :class:`_engine.Engine`\nor :class:`_engine.Connection`,\nrendering the appropriate \"next value\" function\nfor the target database and returning a result.\n\nThe :class:`.Sequence` is typically associated with a primary key column::\n\n    some_table = Table(\n        \"some_table\",\n        metadata,\n        Column(\n            \"id\",\n            Integer,\n            Sequence(\"some_table_seq\", start=1),\n            primary_key=True,\n        ),\n    )\n\nWhen CREATE TABLE is emitted for the above :class:`_schema.Table`, if the\ntarget platform supports sequences, a CREATE SEQUENCE statement will\nbe emitted as well.   For platforms that don't support sequences,\nthe :class:`.Sequence` construct is ignored.\n\n.. seealso::\n\n    :ref:`defaults_sequences`\n\n    :class:`.CreateSequence`\n\n    :class:`.DropSequence`",
    "methods": [
      {
        "name": "get_execution_options",
        "type": "function",
        "description": "Get the non-SQL options which will take effect during execution.\n\n.. versionadded:: 1.3\n\n.. seealso::\n\n    :meth:`.Executable.execution_options`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "_ExecuteOptions",
          "description": " "
        }
      },
      {
        "name": "next_value",
        "type": "function",
        "description": "Return a :class:`.next_value` function element\nwhich will render the appropriate increment function\nfor this :class:`.Sequence` within any SQL expression.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Function[int]",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "StrategyCode",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyDaily",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyDividend",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyHold",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyModel",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyRun",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyTrade",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyWeightTarget",
    "type": "class",
    "description": "e.g. 次日均价调仓的策略，可在此需要记录交易下单时的目标权重；本表由上层策略负责保存(而不是像其他表一样由底层策略负责) ",
    "methods": [],
    "properties": []
  },
  {
    "name": "String",
    "type": "class",
    "description": "The base for all string and character types.\n\nIn SQL, corresponds to VARCHAR.\n\nThe `length` field is usually required when the `String` type is\nused within a CREATE TABLE statement, as VARCHAR requires a length\non most databases.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "UniqueConstraint",
    "type": "class",
    "description": "A table-level UNIQUE constraint.\n\nDefines a single column or composite UNIQUE constraint. For a no-frills,\nsingle column constraint, adding ``unique=True`` to the ``Column``\ndefinition is a shorthand equivalent for an unnamed, single column\nUniqueConstraint.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "declarative_base",
    "type": "function",
    "description": ".. deprecated:: 2.0 The ``declarative_base()`` function is now available as :func:`sqlalchemy.orm.declarative_base`. (Background on SQLAlchemy 2.0 at: :ref:`migration_20_toplevel`)",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kw": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg",
        "kw"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "FakeReply",
    "type": "class",
    "description": "FakeReply(status_code, content)",
    "methods": [],
    "properties": []
  },
  {
    "name": "RemoteStrategyAPI",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "get_strategy_code",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "code_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_info",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_perf",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "get_hold": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "run_strategy",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "task_name": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "resume_auto": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_strategy_code",
        "type": "function",
        "description": "同时也是策略的prepare; %bt_save里传入的code只能是str, 在代码中调用时也可以传入list[dict]作为code(+run_backtest) ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "code": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "name": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "description": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "is_public": {
              "type": "str",
              "default": "N",
              "description": " "
            },
            "delete_time": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "run_backtest": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "code"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "stop_strategy",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "message": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rcid",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "k": {
          "type": "any",
          "default": "10",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_neu",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "numeric_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "categorical_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "version": {
          "type": "any",
          "default": "2",
          "description": " "
        }
      },
      "required": [
        "factor_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_orth",
    "type": "function",
    "description": "X是(行业市值中性化后的)因子值矩阵(N×K)，N为股票数量，K为因子数量，orth_X是正交后因子矩阵（N×K）,s是过渡矩阵\n@author: hanjinyang\n@from: chenyt, 2019-04-22; change matrix to np.array, 2019-07-22",
    "parameters": {
      "type": "object",
      "properties": {
        "X": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "orthret": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "X"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.4*3=4.2，不是原方案（因子数据处理方法.docx）中的5.2\n    sector_fill (bool or str or float): 填补缺失值的方法，默认为'median'\n    pre_neu (str): 在中性化回归前对因子值的处理：None, 'zscore', 'rank'\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "pre_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "pre_neu",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure_v1",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.4*3=4.2，不是原方案（因子数据处理方法.docx）中的5.2\n    sector_fill (bool or str or float): 填补缺失值的方法，默认为'median'\n    pre_neu (str): UNUSED\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "pre_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "pre_neu",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "linearly_independent_cols",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "numpy_lstsq",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "y": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "y",
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "numpy_ols",
    "type": "function",
    "description": "Ordinary Least Squares regression using only NumPy.\n\n只求解及计算残差时，不必使用statsmodels.OLS，避免计算r²,summary等其他数据影响速度(如要做t检验/F检验/算P值还是选sm)。\nhttps://jianghaochu.github.io/ordinary-least-squares-regression-in-python-from-scratch.html",
    "parameters": {
      "type": "object",
      "properties": {
        "y": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "y",
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "outlier_mad",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "mad_limit": {
          "type": "any",
          "default": "1.483",
          "description": " "
        },
        "n_mul": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "sector_categorical",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sector_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "z_score",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "data_api_log_reader",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "log_fn": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "log_fn"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rtn_plot",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "bench_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "rtn_series",
        "bench_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "format_date",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "day": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fmt": {
          "type": "any",
          "default": "str-",
          "description": " "
        }
      },
      "required": [
        "day"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "HTML",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "IFrameCanvas",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "update",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "msg": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "finalize": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "msg"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Javascript",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "display",
    "type": "function",
    "description": "Display a Python object in all frontends.\n\nBy default all representations will be computed and sent to the frontends.\nFrontends can decide which representation is used and how.\n\nIn terminal IPython this will be similar to using :func:`print`, for use in richer\nfrontends see Jupyter notebook examples with rich display logic.\n\nParameters\n----------\n*objs : object\n    The Python objects to display.\nraw : bool, optional\n    Are the objects to be displayed already mimetype-keyed dicts of raw display data,\n    or Python objects that need to be formatted before display? [default: False]\ninclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to include in the\n    format data dict. If this is set *only* the format types included\n    in this list will be computed.\nexclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to exclude in the format\n    data dict. If this is set all format types will be computed,\n    except for those included in this argument.\nmetadata : dict, optional\n    A dictionary of metadata to associate with the output.\n    mime-type keys in this dictionary will be associated with the individual\n    representation formats, if they exist.\ntransient : dict, optional\n    A dictionary of transient data to associate with the output.\n    Data in this dict should not be persisted to files (e.g. notebooks).\ndisplay_id : str, bool optional\n    Set an id for the display.\n    This id can be used for updating this display area later via update_display.\n    If given as `True`, generate a new `display_id`\nclear : bool, optional\n    Should the output area be cleared before displaying anything? If True,\n    this will wait for additional output before clearing. [default: False]\n**kwargs : additional keyword-args, optional\n    Additional keyword-arguments are passed through to the display publisher.\n\nReturns\n-------\nhandle: DisplayHandle\n    Returns a handle on updatable displays for use with :func:`update_display`,\n    if `display_id` is given. Returns :any:`None` if no `display_id` is given\n    (default).\n\nExamples\n--------\n>>> class Json(object):\n...     def __init__(self, json):\n...         self.json = json\n...     def _repr_pretty_(self, pp, cycle):\n...         import json\n...         pp.text(json.dumps(self.json, indent=2))\n...     def __repr__(self):\n...         return str(self.json)\n...\n\n>>> d = Json({1:2, 3: {4:5}})\n\n>>> print(d)\n{1: 2, 3: {4: 5}}\n\n>>> display(d)\n{\n  \"1\": 2,\n  \"3\": {\n    \"4\": 5\n  }\n}\n\n>>> def int_formatter(integer, pp, cycle):\n...     pp.text('I'*integer)\n\n>>> plain = get_ipython().display_formatter.formatters['text/plain']\n>>> plain.for_type(int, int_formatter)\n<function _repr_pprint at 0x...>\n>>> display(7-5)\nII\n\n>>> del plain.type_printers[int]\n>>> display(7-5)\n2\n\nSee Also\n--------\n:func:`update_display`\n\nNotes\n-----\nIn Python, objects can declare their textual representation using the\n`__repr__` method. IPython expands on this idea and allows objects to declare\nother, rich representations including:\n\n  - HTML\n  - JSON\n  - PNG\n  - JPEG\n  - SVG\n  - LaTeX\n\nA single object can declare some or all of these representations; all are\nhandled by IPython's display system.\n\nThe main idea of the first approach is that you have to implement special\ndisplay methods when you define your class, one for each representation you\nwant to use. Here is a list of the names of the special methods and the\nvalues they must return:\n\n  - `_repr_html_`: return raw HTML as a string, or a tuple (see below).\n  - `_repr_json_`: return a JSONable dict, or a tuple (see below).\n  - `_repr_jpeg_`: return raw JPEG data, or a tuple (see below).\n  - `_repr_png_`: return raw PNG data, or a tuple (see below).\n  - `_repr_svg_`: return raw SVG data as a string, or a tuple (see below).\n  - `_repr_latex_`: return LaTeX commands in a string surrounded by \"$\",\n                    or a tuple (see below).\n  - `_repr_mimebundle_`: return a full mimebundle containing the mapping\n                         from all mimetypes to data.\n                         Use this for any mime-type not listed above.\n\nThe above functions may also return the object's metadata alonside the\ndata.  If the metadata is available, the functions will return a tuple\ncontaining the data and metadata, in that order.  If there is no metadata\navailable, then the functions will return the data only.\n\nWhen you are directly writing your own classes, you can adapt them for\ndisplay in IPython by following the above approach. But in practice, you\noften need to work with existing classes that you can't easily modify.\n\nYou can refer to the documentation on integrating with the display system in\norder to register custom formatters for already existing types\n(:ref:`integrating_rich_display`).\n\n.. versionadded:: 5.4 display available without import\n.. versionadded:: 6.1 display available without import\n\nSince IPython 5.4 and 6.1 :func:`display` is automatically made available to\nthe user without import. If you are using display in a document that might\nbe used in a pure python context or with older version of IPython, use the\nfollowing import at the top of your file::\n\n    from IPython.display import display",
    "parameters": {
      "type": "object",
      "properties": {
        "objs": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "include": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "exclude": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "metadata": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "transient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "display_id": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "raw": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "clear": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "objs",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "HTML",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Javascript",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "NotebookCanvas",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "update",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "msg": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "finalize": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "msg"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "display",
    "type": "function",
    "description": "Display a Python object in all frontends.\n\nBy default all representations will be computed and sent to the frontends.\nFrontends can decide which representation is used and how.\n\nIn terminal IPython this will be similar to using :func:`print`, for use in richer\nfrontends see Jupyter notebook examples with rich display logic.\n\nParameters\n----------\n*objs : object\n    The Python objects to display.\nraw : bool, optional\n    Are the objects to be displayed already mimetype-keyed dicts of raw display data,\n    or Python objects that need to be formatted before display? [default: False]\ninclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to include in the\n    format data dict. If this is set *only* the format types included\n    in this list will be computed.\nexclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to exclude in the format\n    data dict. If this is set all format types will be computed,\n    except for those included in this argument.\nmetadata : dict, optional\n    A dictionary of metadata to associate with the output.\n    mime-type keys in this dictionary will be associated with the individual\n    representation formats, if they exist.\ntransient : dict, optional\n    A dictionary of transient data to associate with the output.\n    Data in this dict should not be persisted to files (e.g. notebooks).\ndisplay_id : str, bool optional\n    Set an id for the display.\n    This id can be used for updating this display area later via update_display.\n    If given as `True`, generate a new `display_id`\nclear : bool, optional\n    Should the output area be cleared before displaying anything? If True,\n    this will wait for additional output before clearing. [default: False]\n**kwargs : additional keyword-args, optional\n    Additional keyword-arguments are passed through to the display publisher.\n\nReturns\n-------\nhandle: DisplayHandle\n    Returns a handle on updatable displays for use with :func:`update_display`,\n    if `display_id` is given. Returns :any:`None` if no `display_id` is given\n    (default).\n\nExamples\n--------\n>>> class Json(object):\n...     def __init__(self, json):\n...         self.json = json\n...     def _repr_pretty_(self, pp, cycle):\n...         import json\n...         pp.text(json.dumps(self.json, indent=2))\n...     def __repr__(self):\n...         return str(self.json)\n...\n\n>>> d = Json({1:2, 3: {4:5}})\n\n>>> print(d)\n{1: 2, 3: {4: 5}}\n\n>>> display(d)\n{\n  \"1\": 2,\n  \"3\": {\n    \"4\": 5\n  }\n}\n\n>>> def int_formatter(integer, pp, cycle):\n...     pp.text('I'*integer)\n\n>>> plain = get_ipython().display_formatter.formatters['text/plain']\n>>> plain.for_type(int, int_formatter)\n<function _repr_pprint at 0x...>\n>>> display(7-5)\nII\n\n>>> del plain.type_printers[int]\n>>> display(7-5)\n2\n\nSee Also\n--------\n:func:`update_display`\n\nNotes\n-----\nIn Python, objects can declare their textual representation using the\n`__repr__` method. IPython expands on this idea and allows objects to declare\nother, rich representations including:\n\n  - HTML\n  - JSON\n  - PNG\n  - JPEG\n  - SVG\n  - LaTeX\n\nA single object can declare some or all of these representations; all are\nhandled by IPython's display system.\n\nThe main idea of the first approach is that you have to implement special\ndisplay methods when you define your class, one for each representation you\nwant to use. Here is a list of the names of the special methods and the\nvalues they must return:\n\n  - `_repr_html_`: return raw HTML as a string, or a tuple (see below).\n  - `_repr_json_`: return a JSONable dict, or a tuple (see below).\n  - `_repr_jpeg_`: return raw JPEG data, or a tuple (see below).\n  - `_repr_png_`: return raw PNG data, or a tuple (see below).\n  - `_repr_svg_`: return raw SVG data as a string, or a tuple (see below).\n  - `_repr_latex_`: return LaTeX commands in a string surrounded by \"$\",\n                    or a tuple (see below).\n  - `_repr_mimebundle_`: return a full mimebundle containing the mapping\n                         from all mimetypes to data.\n                         Use this for any mime-type not listed above.\n\nThe above functions may also return the object's metadata alonside the\ndata.  If the metadata is available, the functions will return a tuple\ncontaining the data and metadata, in that order.  If there is no metadata\navailable, then the functions will return the data only.\n\nWhen you are directly writing your own classes, you can adapt them for\ndisplay in IPython by following the above approach. But in practice, you\noften need to work with existing classes that you can't easily modify.\n\nYou can refer to the documentation on integrating with the display system in\norder to register custom formatters for already existing types\n(:ref:`integrating_rich_display`).\n\n.. versionadded:: 5.4 display available without import\n.. versionadded:: 6.1 display available without import\n\nSince IPython 5.4 and 6.1 :func:`display` is automatically made available to\nthe user without import. If you are using display in a document that might\nbe used in a pure python context or with older version of IPython, use the\nfollowing import at the top of your file::\n\n    from IPython.display import display",
    "parameters": {
      "type": "object",
      "properties": {
        "objs": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "include": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "exclude": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "metadata": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "transient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "display_id": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "raw": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "clear": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "objs",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Attribution",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "brinson_multi",
        "type": "function",
        "description": "Brinson归因：多期模型",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight_df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "end_day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_SW",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "()",
              "description": " "
            },
            "full_pos": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "distri": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "weight_df",
            "end_day",
            "bench"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "brinson_single",
        "type": "function",
        "description": "Brinson归因：单期模型",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "Series",
              "default": null,
              "description": " "
            },
            "tday0": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "tday1": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_SW",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "()",
              "description": " "
            },
            "full_pos": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "portfolio_weight",
            "tday0",
            "tday1",
            "bench"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Any",
    "type": "class",
    "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BytesIO",
    "type": "class",
    "description": "Buffered I/O implementation using an in-memory bytes buffer.",
    "methods": [],
    "properties": []
  },
  {
    "name": "Client",
    "type": "class",
    "description": "Cache server's client protocol ",
    "methods": [
      {
        "name": "add_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "hit": {
              "type": "int",
              "default": null,
              "description": " "
            },
            "req_time": {
              "type": "float",
              "default": null,
              "description": " "
            },
            "tot_time": {
              "type": "float",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name",
            "hit",
            "req_time",
            "tot_time"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "api_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "call",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "data": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "data"
          ]
        },
        "return": {
          "type": "typing.Any",
          "description": " "
        }
      },
      {
        "name": "df_to_series",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cached",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "param": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "param"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_ex",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "obj": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "out": {
              "type": "str",
              "default": "df",
              "description": " "
            }
          },
          "required": [
            "obj",
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "mod_codes",
        "type": "function",
        "description": "处理改股票代码的情况，只有get series by one date时才处理，如检测到新股票代码则添加旧代码 ",
        "parameters": {
          "type": "object",
          "properties": {
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "codes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "ModCode",
    "type": "class",
    "description": "ModCode(old, new, date)",
    "methods": [],
    "properties": []
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "parse_codes",
    "type": "function",
    "description": "返回List[str]",
    "parameters": {
      "type": "object",
      "properties": {
        "codes": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "codes"
      ]
    },
    "return": {
      "type": "typing.Optional[typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "parse_dates",
    "type": "function",
    "description": "返回字符串‘20190101-20190202’表示日期范围，返回List[str]表示日期列表 ",
    "parameters": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "verify": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "max_allowed_dt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "dates"
      ]
    },
    "return": {
      "type": "typing.Union[NoneType, str, typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "Any",
    "type": "class",
    "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BytesIO",
    "type": "class",
    "description": "Buffered I/O implementation using an in-memory bytes buffer.",
    "methods": [],
    "properties": []
  },
  {
    "name": "Client",
    "type": "class",
    "description": "Cache server's client protocol ",
    "methods": [
      {
        "name": "add_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "hit": {
              "type": "int",
              "default": null,
              "description": " "
            },
            "req_time": {
              "type": "float",
              "default": null,
              "description": " "
            },
            "tot_time": {
              "type": "float",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name",
            "hit",
            "req_time",
            "tot_time"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "api_stat",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "call",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "data": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "data"
          ]
        },
        "return": {
          "type": "typing.Any",
          "description": " "
        }
      },
      {
        "name": "df_to_series",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df": {
              "type": "DataFrame",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cached",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "param": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "param"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_ex",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "obj": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "out": {
              "type": "str",
              "default": "df",
              "description": " "
            }
          },
          "required": [
            "obj",
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "mod_codes",
        "type": "function",
        "description": "处理改股票代码的情况，只有get series by one date时才处理，如检测到新股票代码则添加旧代码 ",
        "parameters": {
          "type": "object",
          "properties": {
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "codes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "ModCode",
    "type": "class",
    "description": "ModCode(old, new, date)",
    "methods": [],
    "properties": []
  },
  {
    "name": "get_factor",
    "type": "function",
    "description": "factorname = 'CLOSE'\ndates = '20231201-20231231'",
    "parameters": {
      "type": "object",
      "properties": {
        "factorname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorname",
        "dates"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "parse_codes",
    "type": "function",
    "description": "返回List[str]",
    "parameters": {
      "type": "object",
      "properties": {
        "codes": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "codes"
      ]
    },
    "return": {
      "type": "typing.Optional[typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "parse_dates",
    "type": "function",
    "description": "返回字符串‘20190101-20190202’表示日期范围，返回List[str]表示日期列表 ",
    "parameters": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "verify": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "max_allowed_dt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "dates"
      ]
    },
    "return": {
      "type": "typing.Union[NoneType, str, typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "LocalData",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "get_factor",
        "type": "function",
        "description": "必须返回copy() ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "Union",
              "default": "None",
              "description": " "
            },
            "codes": {
              "type": "List",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "int",
              "default": "0",
              "description": " "
            },
            "func_trade_days": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "factor_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "register",
        "type": "function",
        "description": "注册本地因子数据; set `factor_name = None` to list all; set `df_factor = None` to de-register ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "str",
              "default": "None",
              "description": " "
            },
            "df_factor": {
              "type": "DataFrame",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "FactorProcessParams",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_params",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_params": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_params"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_param",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_alias",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_alias": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_alias"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_defaults",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_defaults": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_defaults"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "df_table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "BackTestMagic",
    "type": "class",
    "description": "Base class for implementing magic functions.\n\nShell functions which can be reached as %function_name. All magic\nfunctions should accept a string, which they can parse for their own\nneeds. This can make some functions easier to type, eg `%cd ../`\nvs. `%cd(\"../\")`\n\nClasses providing magic functions need to subclass this class, and they\nMUST:\n\n- Use the method decorators `@line_magic` and `@cell_magic` to decorate\n  individual methods as magic functions, AND\n\n- Use the class decorator `@magics_class` to ensure that the magic\n  methods are properly registered at the instance level upon instance\n  initialization.\n\nSee :mod:`magic_functions` for examples of actual implementation classes.",
    "methods": [
      {
        "name": "arg_err",
        "type": "function",
        "description": "Print docstring if incorrect arguments were passed",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt",
        "type": "function",
        "description": "::\n\n  %bt [--out OUT]\n\n运行回测策略，详见文档“通用策略回测框架”中的说明\n\noptions:\n  --out OUT, -o OUT  指定回测报告结果的变量名，默认为\"report\"",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt_load",
        "type": "function",
        "description": "::\n\n  %bt_load [--strategy STRATEGY] [--code CODE] [--history HISTORY] [--keyword KEYWORD] [--user [USER]]\n\n从数据库加载已保存的策略代码到本单元格，也可以搜索策略代码。\n\n基本用法示例：\n    %bt_load           不带任何参数，列出可加载的策略列表\n    %bt_load -s 123    指定加载id为123的策略的最新代码\n\n扩展用法示例：\n    %bt_load -u        列出自己创建的策略列表\n    %bt_load -u lixy   列出用户lixy创建的策略列表\n    %bt_load -k 估值   列出策略名称或描述里包含\"估值\"的策略\n\n    %bt_load -h 123    列出id为123的策略的所有版本的历史代码\n    %bt_load -c 666    指定加载代码id为666的历史代码\n\noptions:\n  --strategy STRATEGY, -s STRATEGY\n                        根据策略id取策略的最新代码\n  --code CODE, -c CODE  根据代码id取代码\n  --history HISTORY, -h HISTORY\n                        取策略id的历史代码列表\n  --keyword KEYWORD, -k KEYWORD\n                        搜索策略名称或描述\n  --user <[USER]>, -u <[USER]>\n                        只列出某个用户的策略(不指定用户名则只列出自己的策略)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "bt_save",
        "type": "function",
        "description": "::\n\n  %bt_save [--name NAME] [--desc DESC] [--public PUBLIC] [--strategy STRATEGY] [--delete DELETE]\n\n将本单元格的策略代码保存到数据库中，根据参数不同可以是创建新策略或更新已存在的策略。\n\n基本用法示例(两个%号的命令为操作整个单元格的内容，只保存策略不运行，请到投研平台图形界面手动重新运行策略)：\n    %%bt_save -n 沪深300A          将本单元格的策略代码保存到一个新建策略，并将策略命名为\"沪深300A\"\n    %%bt_save -s 123               用本单元格的策略代码更新一个已存在的id为123的策略\n\n扩展用法示例(一个%号的命令是只操作一行的命令，修改策略属性也可以在投研平台用图形界面操作)：\n    %bt_save -s 123 -n 沪深300B    更新一个已存在的id为123的策略，将名称改为\"沪深300B\"\n    %bt_save -s 123 -d 策略描述B   更新一个已存在的id为123的策略，将描述改为\"策略描述B\"\n    %bt_save -s 123 -p Y           更新一个已存在的id为123的策略，将策略设为公开的(其他用户也可以访问但不能修改)\n\n    %bt_save --delete 123          删除id为123的策略\n\noptions:\n  --name NAME, -n NAME  策略名称(≤50字符)\n  --desc DESC, -d DESC  策略描述(≤1000字符)\n  --public PUBLIC, -p PUBLIC\n                        是否公开，一个字符: Y=公开，N=不公开(默认值)\n  --strategy STRATEGY, -s STRATEGY\n                        已存在的策略id(更新策略)\n  --delete DELETE       根据策略id删除策略",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "line": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "cell": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "class_config_rst_doc",
        "type": "function",
        "description": "Generate rST documentation for this class' config options.\n\nExcludes traits defined on parent classes.",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "str",
          "description": " "
        }
      },
      {
        "name": "default_option",
        "type": "function",
        "description": "Make an entry in the options_table for fn, with value optstr",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fn": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "optstr": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fn",
            "optstr"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_latex",
        "type": "function",
        "description": "Format a string for latex inclusion.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strng": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strng"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_traceback",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "bt_lines": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "bt_lines"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "hold_trait_notifications",
        "type": "function",
        "description": "Context manager for bundling trait change notifications and cross\nvalidation.\n\nUse this when doing multiple trait assignments (init, config), to avoid\nrace conditions in trait notifiers requesting other trait values.\nAll trait notifications will fire after all values have been assigned.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "t.Any",
          "description": " "
        }
      },
      {
        "name": "parse_options",
        "type": "function",
        "description": "Parse options passed to an argument string.\n\nThe interface is similar to that of :func:`getopt.getopt`, but it\nreturns a :class:`~IPython.utils.struct.Struct` with the options as keys\nand the stripped argument string still as a string.\n\narg_str is quoted as a true sys.argv vector by using shlex.split.\nThis allows us to easily expand variables, glob files, quote\narguments, etc.\n\nParameters\n----------\narg_str : str\n    The arguments to parse.\nopt_str : str\n    The options specification.\nmode : str, default 'string'\n    If given as 'list', the argument string is returned as a list (split\n    on whitespace) instead of a string.\nlist_all : bool, default False\n    Put all option values in lists. Normally only options\n    appearing more than once are put in a list.\nposix : bool, default True\n    Whether to split the input line in POSIX mode or not, as per the\n    conventions outlined in the :mod:`shlex` module from the standard\n    library.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "arg_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "opt_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "long_opts": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "arg_str",
            "opt_str",
            "long_opts",
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "section_names",
        "type": "function",
        "description": "return section names as a list",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "list[str]",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "cross_validation_lock",
        "type": "property",
        "description": "A contextmanager for running a block with our cross validation lock set\nto True.\n\nAt the end of the block, the lock's value is restored to its value\nprior to entering the block."
      }
    ]
  },
  {
    "name": "Magics",
    "type": "class",
    "description": "Base class for implementing magic functions.\n\nShell functions which can be reached as %function_name. All magic\nfunctions should accept a string, which they can parse for their own\nneeds. This can make some functions easier to type, eg `%cd ../`\nvs. `%cd(\"../\")`\n\nClasses providing magic functions need to subclass this class, and they\nMUST:\n\n- Use the method decorators `@line_magic` and `@cell_magic` to decorate\n  individual methods as magic functions, AND\n\n- Use the class decorator `@magics_class` to ensure that the magic\n  methods are properly registered at the instance level upon instance\n  initialization.\n\nSee :mod:`magic_functions` for examples of actual implementation classes.",
    "methods": [
      {
        "name": "arg_err",
        "type": "function",
        "description": "Print docstring if incorrect arguments were passed",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "class_config_rst_doc",
        "type": "function",
        "description": "Generate rST documentation for this class' config options.\n\nExcludes traits defined on parent classes.",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "str",
          "description": " "
        }
      },
      {
        "name": "default_option",
        "type": "function",
        "description": "Make an entry in the options_table for fn, with value optstr",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fn": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "optstr": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fn",
            "optstr"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "format_latex",
        "type": "function",
        "description": "Format a string for latex inclusion.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strng": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strng"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "hold_trait_notifications",
        "type": "function",
        "description": "Context manager for bundling trait change notifications and cross\nvalidation.\n\nUse this when doing multiple trait assignments (init, config), to avoid\nrace conditions in trait notifiers requesting other trait values.\nAll trait notifications will fire after all values have been assigned.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "t.Any",
          "description": " "
        }
      },
      {
        "name": "parse_options",
        "type": "function",
        "description": "Parse options passed to an argument string.\n\nThe interface is similar to that of :func:`getopt.getopt`, but it\nreturns a :class:`~IPython.utils.struct.Struct` with the options as keys\nand the stripped argument string still as a string.\n\narg_str is quoted as a true sys.argv vector by using shlex.split.\nThis allows us to easily expand variables, glob files, quote\narguments, etc.\n\nParameters\n----------\narg_str : str\n    The arguments to parse.\nopt_str : str\n    The options specification.\nmode : str, default 'string'\n    If given as 'list', the argument string is returned as a list (split\n    on whitespace) instead of a string.\nlist_all : bool, default False\n    Put all option values in lists. Normally only options\n    appearing more than once are put in a list.\nposix : bool, default True\n    Whether to split the input line in POSIX mode or not, as per the\n    conventions outlined in the :mod:`shlex` module from the standard\n    library.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "arg_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "opt_str": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "long_opts": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "arg_str",
            "opt_str",
            "long_opts",
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "section_names",
        "type": "function",
        "description": "return section names as a list",
        "parameters": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "return": {
          "type": "list[str]",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "cross_validation_lock",
        "type": "property",
        "description": "A contextmanager for running a block with our cross validation lock set\nto True.\n\nAt the end of the block, the lock's value is restored to its value\nprior to entering the block."
      }
    ]
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as cell magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a cell magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a cell magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a cell magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipython",
    "type": "function",
    "description": "Get the global InteractiveShell instance.\n\nReturns None if no InteractiveShell instance is registered.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as line_cell magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a line_cell magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a line_cell magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a line_cell magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magic_deco",
    "type": "function",
    "description": "Decorate the given method as line magic.\n\nThe decorator can be used with or without arguments, as follows.\n\ni) without arguments: it will create a line magic named as the method being\ndecorated::\n\n    @deco\n    def foo(...)\n\nwill create a line magic named `foo`.\n\nii) with one string argument: which will be used as the actual name of the\nresulting magic::\n\n    @deco('bar')\n    def foo(...)\n\nwill create a line magic named `bar`.\n\nTo register a class magic use ``Interactiveshell.register_magic(class or instance)``.",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "load_ipython_extension",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "ipython": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "ipython"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "magics_class",
    "type": "function",
    "description": "Class decorator for all subclasses of the main Magics class.\n\nAny class that subclasses Magics *must* also apply this decorator, to\nensure that all the methods that have been decorated as line/cell magics\nget correctly registered in the class instance.  This is necessary because\nwhen method decorators run, the class does not exist yet, so they\ntemporarily store their information into a module global.  Application of\nthis class decorator copies that global data to the class instance and\nclears the global.\n\nObviously, this mechanism is not thread-safe, which means that the\n*creation* of subclasses of Magic should only be done in a single-thread\ncontext.  Instantiation of the classes has no restrictions.  Given that\nthese classes are typically created at IPython startup time and before user\napplication code becomes active, in practice this should not pose any\nproblems.",
    "parameters": {
      "type": "object",
      "properties": {
        "cls": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "cls"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "needs_local_scope",
    "type": "function",
    "description": "Decorator to mark magic functions which need to local scope to run.",
    "parameters": {
      "type": "object",
      "properties": {
        "func": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "func"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "unload_ipython_extension",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "ipython": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "ipython"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "FactorProcessParams",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_params",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_params": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_params"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_param",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "fac_name": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "fac_name"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_alias",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_alias": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_alias"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_defaults",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dict_defaults": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dict_defaults"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "df_table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "FactorStore",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "add_day",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "is_temp_day": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "is_temp_day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "add_factor_value",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "rank_ic": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day",
            "factor_name",
            "factor_series",
            "rank_ic"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_values_and_ic",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "IC_Rule",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "allow_fallback",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "allow": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "allow"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "half_life_weights",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "N": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "H": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "N",
            "H"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "max_ir_weights",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "df_ic": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "df_ic"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "min_periods",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "combine_factor",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "fac_series_dict": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "df_ic": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "weighting": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sr_conf_weight": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sr_conf_direction": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "orthogonalize": {
          "type": "bool",
          "default": null,
          "description": " "
        },
        "logger": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fac_name": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "fac_series_dict",
        "df_ic",
        "weighting",
        "sr_conf_weight",
        "sr_conf_direction",
        "orthogonalize",
        "logger",
        "fac_name"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_alpha_model",
    "type": "function",
    "description": "按调仓日权重回测\n\nArgs:\n    config: 策略运行参数\n    alpha_model_config: Alpha模型的参数\n    portfolio_construct_config: 组合构建参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "alpha_model_config": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "portfolio_construct_config": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "args": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "args"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_analyze_single_factor",
    "type": "function",
    "description": "单因子分析\n\nArgs:\n    config: 策略通用配置参数\n    extra_config: 因子分析参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "extra_config": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_single_factor",
    "type": "function",
    "description": "单因子回测\n\nArgs:\n    config: 策略通用配置参数\n    factor_conf: 被测因子配置\n    portfolio_construct_config: 组合构建参数\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "factor_conf": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "portfolio_construct_config": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "BackTest",
    "type": "class",
    "description": "策略回测框架提供给策略代码的调用接口，代表本次回测的实例。可以取策略净值、持仓等信息，可以发起交易(按股数、权重的绝对值或目标值下单)。\n如策略分多个子Account，None代表全部account的合计值(此时下单必须指定account_id而不能用None)\n\n    用户不需要创建BackTest的实例对象，在init(bt), run_daily(bt)和finished(bt)等策略接口中的\n    第一个参数 :obj:`bt` 就是用户可以使用的策略对象",
    "methods": [
      {
        "name": "get_cash",
        "type": "function",
        "description": "策略当前的现金\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nExamples:\n    >>> bt.log.info(f'现金: {bt.cash:2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding",
        "type": "function",
        "description": "取策略当前的股票持仓数量\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票当前持仓数量); 如windcodes为一个股票代码，则返回该股票持仓数\n\nExamples:\n    >>> print(bt.get_holding())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value",
        "type": "function",
        "description": "取策略当前的持仓市值之和\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值之和\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_value_detail",
        "type": "function",
        "description": "取策略当前的持仓市值明细\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series: 当前持仓股票的市值明细\n\nExamples:\n    >>> bt.log.info(f'持仓市值: {bt.get_holding_value_detail():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_holding_weight",
        "type": "function",
        "description": "取策略当前的持仓权重\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取当前全部持仓\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, value为股票当前权重); 如windcodes为一个股票代码，则返回该股票权重\n\nExamples:\n    >>> print(bt.get_holding_weight())",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_price",
        "type": "function",
        "description": "取当前的股票价格(不复权)；默认情况下取到的就是收盘价，如策略指定了\"trade_price\"参数，则取该参数指定的交易价格作为当前价格。\n\nArgs:\n    windcodes (list_like or str): 股票代码列表，为None则取全市场股票价格\n\nReturns:\n    pd.Series or float: 如windcodes为列表，则返回pd.Series(index为股票代码, values为股票的价格); 如windcodes为一个股票代码，则返回该股票的价格\n\nExamples:\n    >>> print(bt.get_price(['000001.SZ', '600000.SH']))",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "windcodes": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "windcodes"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_target_weight",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "bt_date"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_tday",
        "type": "function",
        "description": "获取相对于当前回测日期的交易日\n\nArgs:\n    offset (int): 偏移的交易日数(非自然日)，负数表示取之前的日期，正数表示取将来的日期，\n        0表示取当前回测日期(即 :obj:`today` )\n\nReturns:\n    :obj:`datetime.datetime`: 交易日",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_value",
        "type": "function",
        "description": "取策略当前的市值，相当于 bt.cash + bt.get_holding_value()\n\nArgs:\n    account_id (None or int): 子账户ID，None或0为整体账户(所有子账户之和)，1~n为子账户\n\nReturns:\n    float: 当前持仓股票的市值\n\nExamples:\n    >>> bt.log.info(f'总市值: {bt.get_value():2f}')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "is_last_tday_in_backtest",
        "type": "function",
        "description": "当前回测日期是不是回测区间的最后一日\n\nReturns:\n    True/False",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "_method",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_shares",
        "type": "function",
        "description": "按整个组合的股票目标持仓数量下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 和 :obj:`order_target_shares` 的不同之处在于portfolio_shares参数是整个组合的目标持仓数量，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_shares (None or list or float): 整个组合的目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_portfolio_weight",
        "type": "function",
        "description": "按整个组合的股票目标持仓权重下单，参数order和portfolio_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 和 :obj:`order_target_weight` 的不同之处在于portfolio_weight参数是整个组合的目标持仓权重，\norder参数中不包含但当前持仓中有的股票，将会全部卖出\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    portfolio_weight (None or list or float): 整个组合的目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> ep = bt.api.get_factor_series('EP_TTM', bt.today)  # 取EP_TTM因子\n    >>> order = pd.Series(1/60, index=ep.sort_values(ascending=False)[:60].index)\n    >>> bt.order_portfolio_weight(order)  # 组合整体调仓，取当天ep值最大的60个股票等权配置",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "portfolio_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_shares",
        "type": "function",
        "description": "按股票数量下单。其中order参数和quantity参数支持以下几种形式，必须对应：\n\n    * 如果order为pd.Series(index为股票代码，value为下单数量)，则quantity必须为None\n    * 如果order为多个股票代码的list，则quantity必须为同样长度的数值list\n    * 如果order为一个股票代码，则quantity必须为一个数\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    quantity (None or list or float): 下单数量，正数为买入，负数为卖出\n    account_id (None or int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误\n\nExamples:\n    >>> bt.order_shares('600519.SH', 1000)  # 买1000股贵州茅台\n    >>> bt.order_shares(['000001.SZ', '600519.SH', '601318.SH'], [1000, 1000, 1000])  # 3个股票各买1000股\n    >>> order = pd.Series(-300, index=['000001.SZ', '600519.SH', '601318.SH'])\n    >>> bt.order_shares(order)  # 3个股票各卖300股",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "quantity": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_shares",
        "type": "function",
        "description": "按股票目标持仓数量下单，参数order和target_shares的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_shares` 的不同之处在于target_shares参数是目标持仓数量 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_shares (None or list or float): 目标持仓数量\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_shares": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_target_weight",
        "type": "function",
        "description": "按股票目标权重下单，参数order和target_weight的合法组合可参考 :obj:`order_shares`\n\n与 :obj:`order_weight` 的不同之处在于target_weight参数是目标持仓权重 (order参数中不包含但当前持仓中有的股票不会卖出)\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    target_weight (None or list or float): 目标持仓权重\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "order_weight",
        "type": "function",
        "description": "按股票权重下单，参数order和weight的合法组合可参考 :obj:`order_shares`\n\nArgs:\n    order (pd.Series or list or str): 下单股票代码\n    weight (None or list or float): 下单权重，正数为买入，负数为卖出\n    account_id (int): 子账户ID, 当策略有多个子账户时使用1~n指定子账户, 不分子账户时不需要指定(即None或0)\n\nReturns:\n    None\n\nRaises:\n    ValueError: 下单参数错误",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "order": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "order"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_target_weight",
        "type": "function",
        "description": "可以保存未来交易日的目标权重，交易需要在到日期时自行处理 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "df_weight": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "account_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "bt_date": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "df_weight"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "test_tday",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cycle": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "target",
            "cycle"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "api",
        "type": "property",
        "description": "一个 :obj:`DataApi` 的实例，策略回测可以通过该对象取因子数据、执行因子标准化和组合优化等操作\n\nRaises:\n    ValueError: 如果取数时日期参数错误(如取未来数据时)会抛出ValueError异常\n\nExamples:\n    >>> bt.api.get_factor_series('EP', '20180102, 20180201, 20180301')"
      },
      {
        "name": "cash",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "log",
        "type": "property",
        "description": "策略回测日志，为一个包装后的Python :obj:`logging.Logger` 对象，其默认日志格式包括了当前回测日期和已运行时间等信息\n\nExamples:\n    >>> bt.log.info(f'1+1={1+1}')\n    >>> bt.log.warning(f'今天日期是{bt.today}')"
      },
      {
        "name": "n_accounts",
        "type": "property",
        "description": "回测策略的子账户数\n\nReturns:\n    int: 子账户数"
      },
      {
        "name": "today",
        "type": "property",
        "description": "如果回测运行中，则可以获取当前回测日期 :obj:`datetime.datetime`\n\nExamples:\n    >>> bt.log.info(f'今天日期是{bt.today}')"
      },
      {
        "name": "user",
        "type": "property",
        "description": "一个用户可设置的 :obj:`BackTest.UserContext` 用户上下文对象，\n    可以任意设置属性，整个策略回测过程均可以在run_daily等方法中读写它的属性\n\nExamples:\n    >>> bt.user.my_dict = {'a': 100}\n    >>> bt.user.other = 'This is a test.'\n    >>> print(bt.user.my_dict['a'], bt.user.other)"
      }
    ]
  },
  {
    "name": "DataApi",
    "type": "class",
    "description": "GFQuant DataApi",
    "methods": [
      {
        "name": "get_factor_info",
        "type": "function",
        "description": "取因子信息表\n\nArgs:\n    factor_class (str): 匹配因子大类名称(估值、成长、盈利质量等)和分类(alpha, market, period等)，不区分大小写\n    keyword (str): 在因子名称、因子描述中搜索的关键词，不区分大小写\n    compact (bool): 是否只返回常用的信息列\n\nReturns:\n    :obj:`pandas.DataFrame`: 因子信息表\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_info('盈利质量')\n    >>> api.get_factor_info('alpha', keyword='YOY')\n    >>> api.get_factor_info('user')  # 用户自定义因子",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_class": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "compact": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_alpha_factor_name_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_asset_daily",
        "type": "function",
        "description": "获取资产日度数据：因子暴露、特质风险",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_barra_factor_name",
        "type": "function",
        "description": "        \n        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor",
        "type": "function",
        "description": "取因子数据。 alpha因子、行情数据、状态数据都用统一的接口取数。\n\nArgs:\n    factor_name (str): 因子名称或列表，如'Q_EPS', 'CLOSE,CLOSE_ADJ'\n    dates (str or list): 日期字符串或列表，如'20181012-20181024'、'20181008,20181013,20181024'、[20190513, 20190603]\n    codes (str or list, optional): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    fill (int): 如果当天没有因子数据，是否取更早日期的数据填充，默认为0不填充，正整数n为最多往前看n个交易日取最新值填充;\n                仅当dates时日期列表时有效，若dates是日期范围(如'20181012-20181024')则fill参数无效\n    out (str): 'df'/'series'，如果数据只有一行，可选择返回DataFrame或Series\n    batch (int): 按batch指定的交易日数量分批取数\n\nReturns:\n    :obj:`pd.DataFrame` or :obj:`pd.Series` or None: 因子数据DataFrame，其index为日期，columns为证券代码。\n    如果factor_name同时指定多个因子，则columns为2层的MultiIndex(因子名称, 证券代码)\n\nRaises:\n    ValueError: 请求参数错误\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor('EP', '20180102, 20180201, 20180301')\n    >>> api.get_factor('CLOSE,CLOSE_ADJ,AMOUNT', '20180201-20180301', '000001.SZ, 600000.SH')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "out": {
              "type": "any",
              "default": "df",
              "description": " "
            },
            "batch": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "factor_name",
            "dates",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_cov",
        "type": "function",
        "description": "因子收益率协方差：日度\n        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_info",
        "type": "function",
        "description": "取因子信息表\n\nArgs:\n    factor_class (str): 匹配因子大类名称(估值、成长、盈利质量等)和分类(alpha, market, period等)，不区分大小写\n    keyword (str): 在因子名称、因子描述中搜索的关键词，不区分大小写\n    compact (bool): 是否只返回常用的信息列\n\nReturns:\n    :obj:`pandas.DataFrame`: 因子信息表\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_info('盈利质量')\n    >>> api.get_factor_info('alpha', keyword='YOY')\n    >>> api.get_factor_info('user')  # 用户自定义因子",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor_class": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "compact": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_name_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_return",
        "type": "function",
        "description": "        ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "trade_dt": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "trade_dt"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_series",
        "type": "function",
        "description": "取一个日期的一个因子数据，返回一个pandas.Series；可选因子中性化处理。\n\n注意：当取Barra风格因子和非alpha因子时，请勿指定 `neutral=True` 。因为Barra因子的原始值已标准化过，非alpha因子标准化处理没有意义。\n\nArgs:\n    factor (str or Series): 因子名称或因子原始值的Series\n    day (datetime or str): 表示一个日期\n    codes (str or list): 股票代码列表，如'000001.SZ, 600000.SH'\n    fill (int): 如果当天没有因子数据，是否用更早的数据填充，默认为0不填充，正整数表示最多往前取多少天，同 :obj:`get_factor()` 的 `fill` 参数，仅当 `factor` 参数为因子名称时有效。\n                特殊处理：当day为一个非交易日日期，即使fill=0时也会取day前推最后一个交易日的因子值\n    universe (str or callable): 选样空间，默认值None，可选值：['ALL', 'HS300', 'ZZ500', 'ZZ800', 'ZZ1000', 'CYB', 'H50'];\n        如为函数，则其形式为 *func(date, DataApi) -> pd.Series*, 返回Series的index为股票代码, value为bool值(或value>0)表示对应的股票是否被选入股票池。\n        (参见  `自定义选股池 <doc_data_api.ipynb#自定义选股池>`_ )\n\n    exclude (bool or dict): 是否剔除新股/ST/停牌股票等，默认None(不剔除)。如为True, 则使用默认剔除条件: `dict(no_new=120, no_st=True, no_suspend=True)`;\n        也可以设置为自定义剔除参数组合，如只剔除停牌: `exclude={\"no_suspend\": True}`。dict可选参数说明：\n\n        * **no_new** (*bool or int*): 是否剔除新股，ex_new=120表示剔除上市交易日不超过120天的股票(如True,默认为120)\n        * **no_st** (*bool*): 是否剔除ST股票\n        * **no_suspend** (*bool*): 是否剔除停牌股票\n\n    neutral (bool or dict): 是否做因子中性化处理，默认False(返回因子原始值); 如为True, 则使用以下6个参数的默认值，也即最常用的中性化处理参数组合来处理因子原始值并返回处理后的值。\n        如其中某些参数不使用默认值可使用自定义参数组合，如只做log和zscore: `neutral=dict(log=True, zscore=True)`\n\n        * **log** (*bool*): 是否做log处理(自然对数)，一般在处理市值类因子时选用，默认False\n        * **outlier** (*bool*): 是否去极值(MAD处理)，默认True\n        * **sector_fill** (*bool or str or float*): 分行业填充缺失值的方式，默认为用行业中值填充('median'或True)，还可以用'min'/'max'/'mean'或直接指定一个用于填充的数值(如0); None则不填充\n        * **pre_neu** (*str*): 前置处理，默认None。可选 'zscore', 'rank'\n        * **sector_neu** (*bool or str*): 做行业中性使用的因子，默认为中信一级行业('LEVEL_1_CITIC'或True); None则不做行业中性\n        * **size_neu** (*bool or str*): 做市值中性使用的因子，默认为总市值('MV'或True); None则不做市值中性\n        * **zscore** (*bool*): 是否做Z-Score变换，默认True\n\nReturns:\n    :obj:`Series` or None: 因子数据Series，其index为证券代码，values为因子值。\n\nRaises:\n    ValueError: 请求参数错误，或结果不是一维的Series\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_series('VOLUME', '20190531')\n    >>> api.get_factor_series('Q_EP', '20190531', universe='HS300', exclude=True, neutral=True)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "factor": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            },
            "universe": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "exclude": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "factor",
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_factor_summary",
        "type": "function",
        "description": "(Experimental) 取一段时间内系统公共因子已预先计算好的分组收益表现汇总，返回一个pandas.DataFrame。\n返回结果等同于量化投研平台上的“因子分析——因子表现汇总”中的因子表现数据。\n\nArgs:\n    dates: 指定一个时间段，格式如'20210101-20210131'\n    stock_pool: 选择股票池，可选'ALL'/'HS300'/'ZZ500'/'ZZ1000'/'CYB'\n    style: 取大类因子数据：True，取细分因子数据：False\n    neutral: 是否将因子中性化处理, True/False\n\nReturns:\n    :obj:`DataFrame` or None: 返回因子表现汇总结果。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dates": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "stock_pool": {
              "type": "any",
              "default": "ALL",
              "description": " "
            },
            "style": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "dates"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_realtime_price",
        "type": "function",
        "description": "实时行情 ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_rpvalue",
        "type": "function",
        "description": "\"(Experimental) 取报告期数据(report-period value)。\n\nArgs:\n    names (str): 报告期数据的名称或列表，如'RP_CASH_EQ', 'RP_Q_PROFIT, RP_Q_OPER_REV'\n    report_periods (str or list, optional): 报告期日期的字符串或列表，如'20181231, 20190630'、['20181231', '20190331']；若report_periods=None,则取day日期能取到的最新报告期数值\n    codes (str or list, optional): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    day (str, optional): 指定本次查询的截止日期，如'20181012'，该日期之后发布的公告数据不会在返回的结果里；默认值为当前日期\n    day_back (str, optional): 查询公告发布日期的回溯日数，默认400。若report_periods=None, 则(day-day_back)日期之前发布的公告不会在返回的结果里。\n\nReturns:\n    :obj:`pd.DataFrame` or None: 报告期数据DataFrame，columns为['report_period', 'code', 'issue_date'] + names\n\nRaises:\n    ValueError: 请求参数错误\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_rpvalue('RP_CASH_EQ', '20181231, 20190630, 20191231', day='20200301')\n    >>> api.get_rpvalue('RP_Q_PROFIT, RP_Q_OPER_REV', '20190630, 20191231', '000001.SZ, 600000.SH')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "names": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "report_periods": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "day": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "day_back": {
              "type": "any",
              "default": "400",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "names",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_rpvalue_series",
        "type": "function",
        "description": "(Experimental) 取一个日期可得的一个报告期数据，返回一个pandas.Series；可选因子中性化处理。\n\nArgs:\n    name (str): 报告期数据名称，如'RP_CASH_EQ'\n    day (str or datetime): 表示当前日期，只取当前日期及之前发布的公告数据\n    codes (str or list): 股票代码列表，如'000001.SZ, 600000.SH', ['000100.SZ', '600519.SH']\n    report_period (None, str or datetime): 默认值None，返回day日期可得的最新报告期数据；如指定了一个报告期日期，则返回day日期可得的该报告期数据，此时参数fill=True无效\n    fill (bool): 未指定报告期时(report_period==None)，对于没有最新报告期数据的股票，是否用更早报告期的数据填充，默认为不填充(False)\n    universe (str or callable): 同 :obj:`get_factor_series()` 的 `universe` 参数\n    exclude (bool or dict): 同 :obj:`get_factor_series()` 的 `exclude` 参数\n    neutral (bool or dict): 同 :obj:`get_factor_series()` 的 `neutral` 参数\n\nReturns:\n    :obj:`Series` or None: 报告期数据Series，其index为证券代码，values为因子值。\n\nRaises:\n    ValueError: 请求参数错误，或结果不是一维的Series\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_rpvalue_series('RP_Q_PROFIT', '20191231')\n    >>> api.get_rpvalue_series('RP_Q_PROFIT', '20190531', fill=True, universe='HS300', exclude=True)",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "name": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "day": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "report_period": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "universe": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "exclude": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "neutral": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "name",
            "day"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_split_sector_series",
        "type": "function",
        "description": "取一个日期的一级行业因子数据，可选将部分一级行业拆分为二级行业\n\nArgs:\n    tday (datetime or str): 表示一个日期\n    sector (str): 一级行业因子名称， 如'LEVEL_1_CITIC'或'LEVEL_1_SW’\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表，如 ['非银行金融', '电子']\n    codes (str or list): 股票代码列表，为None则取全市场股票\n    fill (int): 如果当天没有因子数据，是否用更早的数据填充，默认为0，正整数表示往前取多少天\n\nReturns:\n    :obj:`pd.Series`: 行业分类序列，index为股票名称，value为行业名称\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_factor_series('20190401', 'LEVEL_1_SW').dropna()\n    >>> api.get_split_sector_series('20190401', 'LEVEL_1_SW', split_sectors=['非银金融']).dropna()",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill": {
              "type": "any",
              "default": "0",
              "description": " "
            }
          },
          "required": [
            "tday",
            "sector",
            "split_sectors"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_trade_days",
        "type": "function",
        "description": "取交易日列表。\n\nArgs:\n    start (str): 开始日期, 格式如: '20181008'\n    end (str): 结束日期, 格式如: '20181024'\n    fmt (str): 指定返回日期的格式，'dt'返回日期格式，'str'或'str-'返回字符串格式，'i'返回整数格式\n    arr (bool): False: 返回list; True: 返回np.array\n\nReturns:\n    :obj:`numpy.ndarray`: 日期数组\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_trade_days('20181009', '20181013')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fmt": {
              "type": "any",
              "default": "dt",
              "description": " "
            },
            "arr": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "portfolio_optimize",
        "type": "function",
        "description": "组合优化：控制组合相对于基准的行业/风格因子暴露、个股相对基准的权重偏离、个股的绝对权重、成分股的总权重占比、换手率和跟踪误差等。\n\nArgs:\n    expect_rtn_series (Series): 预期收益序列，index为股票代码，不存在的股票(或value为nan的股票)不可选；\n                                不可选的股票相对基准的偏离(也可能出现一个行业的所有股票都不可选)，均不会导致优化器出错：\n                                1) 不可选的股票，即使它在基准中有权重，也不会受个股权重偏离参数的约束(它在优化结果中的权重一定是0)；\n                                2) 不可选的行业，如果它在基准中有权重，即使不能满足行业暴露参数的约束，也仅会输出一条警告信息。\n    tday (datetime or str): 一个交易日日期\n    bench (str): 基准权重因子名称，目前支持 ‘WEIGHT_[H50|300|500|800|1000|CYBZ|CYB|ALL]’\n    sector (str): 一级行业因子名称，目前支持 'LEVEL_1_[CITIC|SW]'\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表\n    sect_exp_min (float): 组合相对基准的行业暴露下限\n    sect_exp_max (float): 组合相对基准的行业暴露上限\n    sect_exp_min_deviation (dict | callable): 单独设置行业暴露度在'sect_exp_min'基础上的偏离\n    sect_exp_max_deviation (dict | callable): 单独设置行业暴露度在'sect_exp_max'基础上的偏离\n    style_factors (str or list): 可选'LNMV'(自由流通市值的自然对数) 或'BARRA'(10个Barra风格因子)，也可以自定义风格因子(参见 `因子标准化处理 <doc_data_norm.ipynb#自定义标准化处理规则>`_ )\n    style_exp_min (float): 组合相对基准的风格因子暴露下限\n    style_exp_max (float): 组合相对基准的风格因子暴露上限\n    style_exp_min_deviation (dict | callable): 单独设置风格因子暴露度在'style_exp_min'基础上的偏离\n    style_exp_max_deviation (dict | callable): 单独设置风格因子暴露度在'style_exp_max'基础上的偏离\n    rel_weight_min (float): 组合内个股相对基准的的权重偏差下限，默认不限(None)\n    rel_weight_max (float): 组合内个股相对基准的的权重偏差上限\n    abs_weight_min (float): 组合内个股的绝对权重下限\n    abs_weight_max (float): 组合内个股的绝对权重上限\n    bench_pct (float): 组合内基准指数成分股的权重占比下限(上限为1，即全部在基准内选股)\n    turnover_max (float): 组合换手率上限\n    pre_weight (pd.Series): 调仓前的持仓权重，计算组合换手率使用(如无持仓可设为None)\n    trackerr_max (float): 组合跟踪误差上限\n    cov_type : 跟踪误差约束时，优化求解时，采用的方法\n    result_stock_count (int): 组合优化结果可返回的最大股票数量，个股权重按从大到小排序，超过此数量的个股的权重将被收回重新分配\n    result_weight_min (float): 组合优化结果要求的个股最低权重值，低于此值的个股的权重将被收回重新分配\n    result_weight_sum (float): 组合优化结果的总权重，为避免数值计算误差请设定为小于1的数\n    fill_barra (bool): 组合优化时，如果用到Barra因子但当日没有值，是否取前值填充\n    verify_result (bool): 组合优化后，复查结果是否符合约束条件\n    max_stk_nums: 股票数量约束\n\nReturns:\n    :obj:`Series`: 组合优化的结果Series，其index为证券代码，values为权重值。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "expect_rtn_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "bench": {
              "type": "any",
              "default": "WEIGHT_300",
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "LEVEL_1_CITIC",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sect_exp_min": {
              "type": "any",
              "default": "-0.0",
              "description": " "
            },
            "sect_exp_max": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "sect_exp_min_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sect_exp_max_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "style_factors": {
              "type": "any",
              "default": "LNMV",
              "description": " "
            },
            "style_exp_min": {
              "type": "any",
              "default": "-0.0",
              "description": " "
            },
            "style_exp_max": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "style_exp_min_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "style_exp_max_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "rel_weight_min": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "rel_weight_max": {
              "type": "any",
              "default": "0.02",
              "description": " "
            },
            "abs_weight_min": {
              "type": "any",
              "default": "0.0",
              "description": " "
            },
            "abs_weight_max": {
              "type": "any",
              "default": "0.1",
              "description": " "
            },
            "bench_pct": {
              "type": "any",
              "default": "0.8",
              "description": " "
            },
            "turnover_max": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "pre_weight": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "trackerr_max": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "cov_type": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "result_stock_count": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "result_weight_min": {
              "type": "any",
              "default": "0.001",
              "description": " "
            },
            "result_weight_sum": {
              "type": "any",
              "default": "0.9999",
              "description": " "
            },
            "max_stk_nums": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fill_barra": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "verify_result": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "expect_rtn_series",
            "tday"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "portfolio_weighting",
        "type": "function",
        "description": "组合加权构建：可选 “不考虑行业加权” 或 “先选股再分行业配权”或“先定行业权重，再行业内选股配权”。\n\nArgs:\n    expect_rtn_series (Series): 预期收益序列，index为股票代码，value为nan的股票不可选\n    tday (datetime or str): 一个交易日日期\n    weighting (str or Series or callable): 股票权重分配方式，支持'equal'(等权)、'score'(使用expect_rtn_series参数的值)\n        或一个函数(def func(score, dataApi) -> pd.Series)，也可以用另一个因子名称作为权重，如'FFMV'即为自由流通市值加权；\n        权重取值只保留非负值\n    top_n (int): 选择前n个股票；如果'sector_first'=True，则在每个行业里选择前n个股票\n    top_pct (float): 选择前(pct*100)%个股票；如果'sector_first'=True，则在每个行业里选择前(pct*100)%个股票(四舍五入)\n    per_sector_weighting (bool): 是否分行业配权重，如为False, 则由此以下的参数都不生效\n    sector_first (bool): 是否先设定行业权重再在行业内选股, False:先选股票再按行业配权重; True:先定行业权重再选股再配权重\n    bench (str): 行业基准权重因子名称，目前支持 ‘WEIGHT_[H50|300|500|800|1000|CYBZ|CYB|ALL]’，以及行业等权'equal_sector'\n    sector (str): 一级行业因子名称，目前支持 'LEVEL_1_[CITIC|SW]'\n    split_sectors (list): 需要拆分为二级行业的一级行业名称列表\n    sector_deviation (dict): 行业权重偏离，被拆分的一级行业不能配置，应指定对应二级行业的值\n    final_equal (bool): 分行业选股(也配了权重)的最后，是否最终按每个股票等权配置(如场景：组合要和等权基准比较)\n\nReturns:\n    :obj:`pd.Series`: 组合权重分配结果，其index为证券代码，values为权重值。",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "expect_rtn_series": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "tday": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "weighting": {
              "type": "Union",
              "default": "equal",
              "description": " "
            },
            "top_n": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "top_pct": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "per_sector_weighting": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "sector_first": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "bench": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sector": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "split_sectors": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "sector_deviation": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "final_equal": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "expect_rtn_series",
            "tday"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_trade_days",
        "type": "function",
        "description": "取交易日列表。\n\nArgs:\n    start (str): 开始日期, 格式如: '20181008'\n    end (str): 结束日期, 格式如: '20181024'\n    fmt (str): 指定返回日期的格式，'dt'返回日期格式，'str'或'str-'返回字符串格式，'i'返回整数格式\n    arr (bool): False: 返回list; True: 返回np.array\n\nReturns:\n    :obj:`numpy.ndarray`: 日期数组\n\nExamples:\n    >>> api = DataApi()\n    >>> api.get_trade_days('20181009', '20181013')",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "fmt": {
              "type": "any",
              "default": "dt",
              "description": " "
            },
            "arr": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "server",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "is_float_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of a float dtype.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of a float dtype.\n\nExamples\n--------\n>>> from pandas.api.types import is_float_dtype\n>>> is_float_dtype(str)\nFalse\n>>> is_float_dtype(int)\nFalse\n>>> is_float_dtype(float)\nTrue\n>>> is_float_dtype(np.array(['a', 'b']))\nFalse\n>>> is_float_dtype(pd.Series([1, 2]))\nFalse\n>>> is_float_dtype(pd.Index([1, 2.]))\nTrue",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "is_integer_dtype",
    "type": "function",
    "description": "Check whether the provided array or dtype is of an integer dtype.\n\nUnlike in `is_any_int_dtype`, timedelta64 instances will return False.\n\nThe nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\nas integer by this function.\n\nParameters\n----------\narr_or_dtype : array-like or dtype\n    The array or dtype to check.\n\nReturns\n-------\nboolean\n    Whether or not the array or dtype is of an integer dtype and\n    not an instance of timedelta64.\n\nExamples\n--------\n>>> from pandas.api.types import is_integer_dtype\n>>> is_integer_dtype(str)\nFalse\n>>> is_integer_dtype(int)\nTrue\n>>> is_integer_dtype(float)\nFalse\n>>> is_integer_dtype(np.uint64)\nTrue\n>>> is_integer_dtype('int8')\nTrue\n>>> is_integer_dtype('Int8')\nTrue\n>>> is_integer_dtype(pd.Int8Dtype)\nTrue\n>>> is_integer_dtype(np.datetime64)\nFalse\n>>> is_integer_dtype(np.timedelta64)\nFalse\n>>> is_integer_dtype(np.array(['a', 'b']))\nFalse\n>>> is_integer_dtype(pd.Series([1, 2]))\nTrue\n>>> is_integer_dtype(np.array([], dtype=np.timedelta64))\nFalse\n>>> is_integer_dtype(pd.Index([1, 2.]))  # float\nFalse",
    "parameters": {
      "type": "object",
      "properties": {
        "arr_or_dtype": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arr_or_dtype"
      ]
    },
    "return": {
      "type": "bool",
      "description": " "
    }
  },
  {
    "name": "run_backtest",
    "type": "function",
    "description": "创建一个策略并运行策略回测\n\nArgs:\n    config (dict):\n    init (function):\n    run_daily (function):\n    finished (function):\n\nReturns:\n    dict: 回测结果",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "init": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "run_daily": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "finished": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "config",
        "init",
        "run_daily",
        "finished"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run_backtest_by_weight",
    "type": "function",
    "description": "按调仓日权重回测\n\nArgs:\n    config: 策略运行参数\n    weight_df: 类似PMS调仓格式的DataFrame, 需要用到3列：调整日期 证券代码(Wind格式) 持仓权重(日权重之和<=1)，证券类型只支持股票；\n        weight_df也可以通过 config[\"holding\"] 配置(同时weight_df参数必须不指定)\n\nReturns:\n    Backtest.Report",
    "parameters": {
      "type": "object",
      "properties": {
        "config": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "weight_df": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "config"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "run",
    "type": "function",
    "description": "Every module as its globals() so can't use it as GLOBAL variables ",
    "parameters": {
      "type": "object",
      "properties": {
        "code": {
          "type": "str",
          "default": null,
          "description": " "
        },
        "stg_info": {
          "type": "dict",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "code"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Base",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "BigInteger",
    "type": "class",
    "description": "A type for bigger ``int`` integers.\n\nTypically generates a ``BIGINT`` in DDL, and otherwise acts like\na normal :class:`.Integer` on the Python side.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "Column",
    "type": "class",
    "description": "Represents a column in a database table.",
    "methods": [
      {
        "name": "all_",
        "type": "function",
        "description": "Produce an :func:`_expression.all_` clause against the\nparent object.\n\nSee the documentation for :func:`_sql.all_` for examples.\n\n.. note:: be sure to not confuse the newer\n    :meth:`_sql.ColumnOperators.all_` method with the **legacy**\n    version of this method, the :meth:`_types.ARRAY.Comparator.all`\n    method that's specific to :class:`_types.ARRAY`, which uses a\n    different calling style.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "any_",
        "type": "function",
        "description": "Produce an :func:`_expression.any_` clause against the\nparent object.\n\nSee the documentation for :func:`_sql.any_` for examples.\n\n.. note:: be sure to not confuse the newer\n    :meth:`_sql.ColumnOperators.any_` method with the **legacy**\n    version of this method, the :meth:`_types.ARRAY.Comparator.any`\n    method that's specific to :class:`_types.ARRAY`, which uses a\n    different calling style.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "asc",
        "type": "function",
        "description": "Produce a :func:`_expression.asc` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "bitwise_not",
        "type": "function",
        "description": "Produce a bitwise NOT operation, typically via the ``~``\noperator.\n\n.. versionadded:: 2.0.2\n\n.. seealso::\n\n    :ref:`operators_bitwise`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "desc",
        "type": "function",
        "description": "Produce a :func:`_expression.desc` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "distinct",
        "type": "function",
        "description": "Produce a :func:`_expression.distinct` clause against the\nparent object.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "get_children",
        "type": "function",
        "description": "Return immediate child :class:`.visitors.HasTraverseInternals`\nelements of this :class:`.visitors.HasTraverseInternals`.\n\nThis is used for visit traversal.\n\n\\**kw may contain flags that change the collection that is\nreturned, for example to return a subset of items in order to\ncut down on larger traversals, or to return child items from a\ndifferent context (such as schema-level collections instead of\nclause-level).",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "column_tables": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "kw": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kw"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "nulls_first",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_first` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_first()`` operator is\n   renamed from ``nullsfirst()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_last",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_last` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_last()`` operator is\n   renamed from ``nullslast()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_first",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_first` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_first()`` operator is\n   renamed from ``nullsfirst()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      },
      {
        "name": "nulls_last",
        "type": "function",
        "description": "Produce a :func:`_expression.nulls_last` clause against the\nparent object.\n\n.. versionchanged:: 1.4 The ``nulls_last()`` operator is\n   renamed from ``nullslast()`` in previous releases.\n   The previous name remains available for backwards compatibility.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "ColumnOperators",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "anon_key_label",
        "type": "property",
        "description": ".. deprecated:: 1.4 The :attr:`_expression.ColumnElement.anon_key_label` attribute is now private, and the public accessor is deprecated."
      },
      {
        "name": "anon_label",
        "type": "property",
        "description": ".. deprecated:: 1.4 The :attr:`_expression.ColumnElement.anon_label` attribute is now private, and the public accessor is deprecated."
      },
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "entity_namespace",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "expression",
        "type": "property",
        "description": "Return a column expression.\n\nPart of the inspection interface; returns self."
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      }
    ]
  },
  {
    "name": "Date",
    "type": "class",
    "description": "A type for ``datetime.date()`` objects.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "DateTime",
    "type": "class",
    "description": "A type for ``datetime.datetime()`` objects.\n\nDate and time types return objects from the Python ``datetime``\nmodule.  Most DBAPIs have built in support for the datetime\nmodule, with the noted exception of SQLite.  In the case of\nSQLite, date and time types are stored as strings which are then\nconverted back to datetime objects when rows are returned.\n\nFor the time representation within the datetime type, some\nbackends include additional options, such as timezone support and\nfractional seconds support.  For fractional seconds, use the\ndialect-specific datatype, such as :class:`.mysql.TIME`.  For\ntimezone support, use at least the :class:`_types.TIMESTAMP` datatype,\nif not the dialect-specific datatype object.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "Float",
    "type": "class",
    "description": "Type representing floating point types, such as ``FLOAT`` or ``REAL``.\n\nThis type returns Python ``float`` objects by default, unless the\n:paramref:`.Float.asdecimal` flag is set to ``True``, in which case they\nare coerced to ``decimal.Decimal`` objects.\n\nWhen a :paramref:`.Float.precision` is not provided in a\n:class:`_types.Float` type some backend may compile this type as\nan 8 bytes / 64 bit float datatype. To use a 4 bytes / 32 bit float\ndatatype a precision <= 24 can usually be provided or the\n:class:`_types.REAL` type can be used.\nThis is known to be the case in the PostgreSQL and MSSQL dialects\nthat render the type as ``FLOAT`` that's in both an alias of\n``DOUBLE PRECISION``. Other third party dialects may have similar\nbehavior.",
    "methods": [
      {
        "name": "bind_processor",
        "type": "function",
        "description": "Return a conversion function for processing bind values.\n\nReturns a callable which will receive a bind parameter value\nas the sole positional argument and will return a value to\nsend to the DB-API.\n\nIf processing is not necessary, the method should return ``None``.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.bind_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.bind_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_bind_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`\n\n\n:param dialect: Dialect instance in use.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "result_processor",
        "type": "function",
        "description": "Return a conversion function for processing result row values.\n\nReturns a callable which will receive a result row column\nvalue as the sole positional argument and will return a value\nto return to the user.\n\nIf processing is not necessary, the method should return ``None``.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.result_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.result_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_result_value`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`\n\n:param dialect: Dialect instance in use.\n\n:param coltype: DBAPI coltype argument received in cursor.description.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "coltype": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect",
            "coltype"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "ForeignKey",
    "type": "class",
    "description": "Defines a dependency between two columns.\n\n``ForeignKey`` is specified as an argument to a :class:`_schema.Column`\nobject,\ne.g.::\n\n    t = Table(\n        \"remote_table\",\n        metadata,\n        Column(\"remote_id\", ForeignKey(\"main_table.id\")),\n    )\n\nNote that ``ForeignKey`` is only a marker object that defines\na dependency between two columns.   The actual constraint\nis in all cases represented by the :class:`_schema.ForeignKeyConstraint`\nobject.   This object will be generated automatically when\na ``ForeignKey`` is associated with a :class:`_schema.Column` which\nin turn is associated with a :class:`_schema.Table`.   Conversely,\nwhen :class:`_schema.ForeignKeyConstraint` is applied to a\n:class:`_schema.Table`,\n``ForeignKey`` markers are automatically generated to be\npresent on each associated :class:`_schema.Column`, which are also\nassociated with the constraint object.\n\nNote that you cannot define a \"composite\" foreign key constraint,\nthat is a constraint between a grouping of multiple parent/child\ncolumns, using ``ForeignKey`` objects.   To define this grouping,\nthe :class:`_schema.ForeignKeyConstraint` object must be used, and applied\nto the :class:`_schema.Table`.   The associated ``ForeignKey`` objects\nare created automatically.\n\nThe ``ForeignKey`` objects associated with an individual\n:class:`_schema.Column`\nobject are available in the `foreign_keys` collection\nof that column.\n\nFurther examples of foreign key configuration are in\n:ref:`metadata_foreignkeys`.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "target_fullname",
        "type": "property",
        "description": "Return a string based 'column specification' for this\n:class:`_schema.ForeignKey`.\n\nThis is usually the equivalent of the string-based \"tablename.colname\"\nargument first passed to the object's constructor."
      }
    ]
  },
  {
    "name": "Index",
    "type": "class",
    "description": "A table-level INDEX.\n\nDefines a composite (one or more column) INDEX.\n\nE.g.::\n\n    sometable = Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n    )\n\n    Index(\"some_index\", sometable.c.name)\n\nFor a no-frills, single column index, adding\n:class:`_schema.Column` also supports ``index=True``::\n\n    sometable = Table(\n        \"sometable\", metadata, Column(\"name\", String(50), index=True)\n    )\n\nFor a composite index, multiple columns can be specified::\n\n    Index(\"some_index\", sometable.c.name, sometable.c.address)\n\nFunctional indexes are supported as well, typically by using the\n:data:`.func` construct in conjunction with table-bound\n:class:`_schema.Column` objects::\n\n    Index(\"some_index\", func.lower(sometable.c.name))\n\nAn :class:`.Index` can also be manually associated with a\n:class:`_schema.Table`,\neither through inline declaration or using\n:meth:`_schema.Table.append_constraint`.  When this approach is used,\nthe names\nof the indexed columns can be specified as strings::\n\n    Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n        Index(\"some_index\", \"name\", \"address\"),\n    )\n\nTo support functional or expression-based indexes in this form, the\n:func:`_expression.text` construct may be used::\n\n    from sqlalchemy import text\n\n    Table(\n        \"sometable\",\n        metadata,\n        Column(\"name\", String(50)),\n        Column(\"address\", String(100)),\n        Index(\"some_index\", text(\"lower(name)\")),\n    )\n\n.. seealso::\n\n    :ref:`schema_indexes` - General information on :class:`.Index`.\n\n    :ref:`postgresql_indexes` - PostgreSQL-specific options available for\n    the :class:`.Index` construct.\n\n    :ref:`mysql_indexes` - MySQL-specific options available for the\n    :class:`.Index` construct.\n\n    :ref:`mssql_indexes` - MSSQL-specific options available for the\n    :class:`.Index` construct.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      }
    ]
  },
  {
    "name": "Integer",
    "type": "class",
    "description": "A type for ``int`` integers.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "PickleType",
    "type": "class",
    "description": "Holds Python objects, which are serialized using pickle.\n\nPickleType builds upon the Binary type to apply Python's\n``pickle.dumps()`` to incoming objects, and ``pickle.loads()`` on\nthe way out, allowing any pickleable Python object to be stored as\na serialized binary field.\n\nTo allow ORM change events to propagate for elements associated\nwith :class:`.PickleType`, see :ref:`mutable_toplevel`.",
    "methods": [
      {
        "name": "bind_processor",
        "type": "function",
        "description": "Provide a bound value processing function for the\ngiven :class:`.Dialect`.\n\nThis is the method that fulfills the :class:`.TypeEngine`\ncontract for bound value conversion which normally occurs via\nthe :meth:`_types.TypeEngine.bind_processor` method.\n\n.. note::\n\n    User-defined subclasses of :class:`_types.TypeDecorator` should\n    **not** implement this method, and should instead implement\n    :meth:`_types.TypeDecorator.process_bind_param` so that the \"inner\"\n    processing provided by the implementing type is maintained.\n\n:param dialect: Dialect instance in use.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "compare_values",
        "type": "function",
        "description": "Given two values, compare them for equality.\n\nBy default this calls upon :meth:`.TypeEngine.compare_values`\nof the underlying \"impl\", which in turn usually\nuses the Python equals operator ``==``.\n\nThis function is used by the ORM to compare\nan original-loaded value with an intercepted\n\"changed\" value, to determine if a net change\nhas occurred.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "x": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "y": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "x",
            "y"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "result_processor",
        "type": "function",
        "description": "Provide a result value processing function for the given\n:class:`.Dialect`.\n\nThis is the method that fulfills the :class:`.TypeEngine`\ncontract for bound value conversion which normally occurs via\nthe :meth:`_types.TypeEngine.result_processor` method.\n\n.. note::\n\n    User-defined subclasses of :class:`_types.TypeDecorator` should\n    **not** implement this method, and should instead implement\n    :meth:`_types.TypeDecorator.process_result_value` so that the\n    \"inner\" processing provided by the implementing type is maintained.\n\n:param dialect: Dialect instance in use.\n:param coltype: A SQLAlchemy data type",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "coltype": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect",
            "coltype"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "comparator_factory",
        "type": "property",
        "description": "Base class for custom comparison operations defined at the\ntype level.  See :attr:`.TypeEngine.comparator_factory`."
      },
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      },
      {
        "name": "sort_key_function",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "PrimaryKeyConstraint",
    "type": "class",
    "description": "A table-level PRIMARY KEY constraint.\n\nThe :class:`.PrimaryKeyConstraint` object is present automatically\non any :class:`_schema.Table` object; it is assigned a set of\n:class:`_schema.Column` objects corresponding to those marked with\nthe :paramref:`_schema.Column.primary_key` flag::\n\n    >>> my_table = Table(\n    ...     \"mytable\",\n    ...     metadata,\n    ...     Column(\"id\", Integer, primary_key=True),\n    ...     Column(\"version_id\", Integer, primary_key=True),\n    ...     Column(\"data\", String(50)),\n    ... )\n    >>> my_table.primary_key\n    PrimaryKeyConstraint(\n        Column('id', Integer(), table=<mytable>,\n               primary_key=True, nullable=False),\n        Column('version_id', Integer(), table=<mytable>,\n               primary_key=True, nullable=False)\n    )\n\nThe primary key of a :class:`_schema.Table` can also be specified by using\na :class:`.PrimaryKeyConstraint` object explicitly; in this mode of usage,\nthe \"name\" of the constraint can also be specified, as well as other\noptions which may be recognized by dialects::\n\n    my_table = Table(\n        \"mytable\",\n        metadata,\n        Column(\"id\", Integer),\n        Column(\"version_id\", Integer),\n        Column(\"data\", String(50)),\n        PrimaryKeyConstraint(\"id\", \"version_id\", name=\"mytable_pk\"),\n    )\n\nThe two styles of column-specification should generally not be mixed.\nAn warning is emitted if the columns present in the\n:class:`.PrimaryKeyConstraint`\ndon't match the columns that were marked as ``primary_key=True``, if both\nare present; in this case, the columns are taken strictly from the\n:class:`.PrimaryKeyConstraint` declaration, and those columns otherwise\nmarked as ``primary_key=True`` are ignored.  This behavior is intended to\nbe backwards compatible with previous behavior.\n\nFor the use case where specific options are to be specified on the\n:class:`.PrimaryKeyConstraint`, but the usual style of using\n``primary_key=True`` flags is still desirable, an empty\n:class:`.PrimaryKeyConstraint` may be specified, which will take on the\nprimary key column collection from the :class:`_schema.Table` based on the\nflags::\n\n    my_table = Table(\n        \"mytable\",\n        metadata,\n        Column(\"id\", Integer, primary_key=True),\n        Column(\"version_id\", Integer, primary_key=True),\n        Column(\"data\", String(50)),\n        PrimaryKeyConstraint(name=\"mytable_pk\", mssql_clustered=True),\n    )",
    "methods": [],
    "properties": [
      {
        "name": "columns_autoinc_first",
        "type": "property",
        "description": "No description available."
      },
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "Sequence",
    "type": "class",
    "description": "Represents a named database sequence.\n\nThe :class:`.Sequence` object represents the name and configurational\nparameters of a database sequence.   It also represents\na construct that can be \"executed\" by a SQLAlchemy :class:`_engine.Engine`\nor :class:`_engine.Connection`,\nrendering the appropriate \"next value\" function\nfor the target database and returning a result.\n\nThe :class:`.Sequence` is typically associated with a primary key column::\n\n    some_table = Table(\n        \"some_table\",\n        metadata,\n        Column(\n            \"id\",\n            Integer,\n            Sequence(\"some_table_seq\", start=1),\n            primary_key=True,\n        ),\n    )\n\nWhen CREATE TABLE is emitted for the above :class:`_schema.Table`, if the\ntarget platform supports sequences, a CREATE SEQUENCE statement will\nbe emitted as well.   For platforms that don't support sequences,\nthe :class:`.Sequence` construct is ignored.\n\n.. seealso::\n\n    :ref:`defaults_sequences`\n\n    :class:`.CreateSequence`\n\n    :class:`.DropSequence`",
    "methods": [
      {
        "name": "get_execution_options",
        "type": "function",
        "description": "Get the non-SQL options which will take effect during execution.\n\n.. versionadded:: 1.3\n\n.. seealso::\n\n    :meth:`.Executable.execution_options`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "_ExecuteOptions",
          "description": " "
        }
      },
      {
        "name": "next_value",
        "type": "function",
        "description": "Return a :class:`.next_value` function element\nwhich will render the appropriate increment function\nfor this :class:`.Sequence` within any SQL expression.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Function[int]",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "StrategyCode",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyDaily",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyDividend",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyHold",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyModel",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyRun",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyTrade",
    "type": "class",
    "description": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
    "methods": [],
    "properties": []
  },
  {
    "name": "StrategyWeightTarget",
    "type": "class",
    "description": "e.g. 次日均价调仓的策略，可在此需要记录交易下单时的目标权重；本表由上层策略负责保存(而不是像其他表一样由底层策略负责) ",
    "methods": [],
    "properties": []
  },
  {
    "name": "String",
    "type": "class",
    "description": "The base for all string and character types.\n\nIn SQL, corresponds to VARCHAR.\n\nThe `length` field is usually required when the `String` type is\nused within a CREATE TABLE statement, as VARCHAR requires a length\non most databases.",
    "methods": [
      {
        "name": "evaluates_none",
        "type": "function",
        "description": "Return a copy of this type which has the\n:attr:`.should_evaluate_none` flag set to True.\n\nE.g.::\n\n        Table(\n            \"some_table\",\n            metadata,\n            Column(\n                String(50).evaluates_none(),\n                nullable=True,\n                server_default=\"no value\",\n            ),\n        )\n\nThe ORM uses this flag to indicate that a positive value of ``None``\nis passed to the column in an INSERT statement, rather than omitting\nthe column from the INSERT statement which has the effect of firing\noff column-level defaults.   It also allows for types which have\nspecial behavior associated with the Python None value to indicate\nthat the value doesn't necessarily translate into SQL NULL; a\nprime example of this is a JSON type which may wish to persist the\nJSON value ``'null'``.\n\nIn all cases, the actual NULL SQL value can be always be\npersisted in any column by using\nthe :obj:`_expression.null` SQL construct in an INSERT statement\nor associated with an ORM-mapped attribute.\n\n.. note::\n\n    The \"evaluates none\" flag does **not** apply to a value\n    of ``None`` passed to :paramref:`_schema.Column.default` or\n    :paramref:`_schema.Column.server_default`; in these cases,\n    ``None``\n    still means \"no default\".\n\n.. seealso::\n\n    :ref:`session_forcing_null` - in the ORM documentation\n\n    :paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\n    interaction with this flag.\n\n    :attr:`.TypeEngine.should_evaluate_none` - class-level flag",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "Self",
          "description": " "
        }
      },
      {
        "name": "get_dbapi_type",
        "type": "function",
        "description": "Return the corresponding type object from the underlying DB-API, if\nany.\n\nThis can be useful for calling ``setinputsizes()``, for example.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dbapi": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dbapi"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "literal_processor",
        "type": "function",
        "description": "Return a conversion function for processing literal values that are\nto be rendered directly without using binds.\n\nThis function is used when the compiler makes use of the\n\"literal_binds\" flag, typically used in DDL generation as well\nas in certain scenarios where backends don't accept bound parameters.\n\nReturns a callable which will receive a literal Python value\nas the sole positional argument and will return a string representation\nto be rendered in a SQL statement.\n\n.. tip::\n\n    This method is only called relative to a **dialect specific type\n    object**, which is often **private to a dialect in use** and is not\n    the same type object as the public facing one, which means it's not\n    feasible to subclass a :class:`.types.TypeEngine` class in order to\n    provide an alternate :meth:`_types.TypeEngine.literal_processor`\n    method, unless subclassing the :class:`_types.UserDefinedType`\n    class explicitly.\n\n    To provide alternate behavior for\n    :meth:`_types.TypeEngine.literal_processor`, implement a\n    :class:`_types.TypeDecorator` class and provide an implementation\n    of :meth:`_types.TypeDecorator.process_literal_param`.\n\n    .. seealso::\n\n        :ref:`types_typedecorator`",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "dialect": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "dialect"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "python_type",
        "type": "property",
        "description": "Return the Python type object expected to be returned\nby instances of this type, if known.\n\nBasically, for those types which enforce a return type,\nor are known across the board to do such for all common\nDBAPIs (like ``int`` for example), will return that type.\n\nIf a return type is not defined, raises\n``NotImplementedError``.\n\nNote that any type also accommodates NULL in SQL which\nmeans you can also get back ``None`` from any type\nin practice."
      }
    ]
  },
  {
    "name": "UniqueConstraint",
    "type": "class",
    "description": "A table-level UNIQUE constraint.\n\nDefines a single column or composite UNIQUE constraint. For a no-frills,\nsingle column constraint, adding ``unique=True`` to the ``Column``\ndefinition is a shorthand equivalent for an unnamed, single column\nUniqueConstraint.",
    "methods": [],
    "properties": [
      {
        "name": "dialect_kwargs",
        "type": "property",
        "description": "A collection of keyword arguments specified as dialect-specific\noptions to this construct.\n\nThe arguments are present here in their original ``<dialect>_<kwarg>``\nformat.  Only arguments that were actually passed are included;\nunlike the :attr:`.DialectKWArgs.dialect_options` collection, which\ncontains all options known by this dialect including defaults.\n\nThe collection is also writable; keys are accepted of the\nform ``<dialect>_<kwarg>`` where the value will be assembled\ninto the list of options.\n\n.. seealso::\n\n    :attr:`.DialectKWArgs.dialect_options` - nested dictionary form"
      },
      {
        "name": "kwargs",
        "type": "property",
        "description": "A synonym for :attr:`.DialectKWArgs.dialect_kwargs`."
      },
      {
        "name": "table",
        "type": "property",
        "description": "No description available."
      }
    ]
  },
  {
    "name": "declarative_base",
    "type": "function",
    "description": ".. deprecated:: 2.0 The ``declarative_base()`` function is now available as :func:`sqlalchemy.orm.declarative_base`. (Background on SQLAlchemy 2.0 at: :ref:`migration_20_toplevel`)",
    "parameters": {
      "type": "object",
      "properties": {
        "arg": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kw": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "arg",
        "kw"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "FakeReply",
    "type": "class",
    "description": "FakeReply(status_code, content)",
    "methods": [],
    "properties": []
  },
  {
    "name": "RemoteStrategyAPI",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "get_strategy_code",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "code_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_info",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_list",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "keyword": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "user": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_strategy_perf",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "get_hold": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "run_strategy",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "end_date": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "task_name": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "resume_auto": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "save_strategy_code",
        "type": "function",
        "description": "同时也是策略的prepare; %bt_save里传入的code只能是str, 在代码中调用时也可以传入list[dict]作为code(+run_backtest) ",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "code": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "name": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "description": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "is_public": {
              "type": "str",
              "default": "N",
              "description": " "
            },
            "delete_time": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "run_backtest": {
              "type": "str",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "code"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "stop_strategy",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "strategy_id": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "message": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "strategy_id"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "namedtuple",
    "type": "function",
    "description": "Returns a new subclass of tuple with named fields.\n\n>>> Point = namedtuple('Point', ['x', 'y'])\n>>> Point.__doc__                   # docstring for the new class\n'Point(x, y)'\n>>> p = Point(11, y=22)             # instantiate with positional args or keywords\n>>> p[0] + p[1]                     # indexable like a plain tuple\n33\n>>> x, y = p                        # unpack like a regular tuple\n>>> x, y\n(11, 22)\n>>> p.x + p.y                       # fields also accessible by name\n33\n>>> d = p._asdict()                 # convert to a dictionary\n>>> d['x']\n11\n>>> Point(**d)                      # convert from a dictionary\nPoint(x=11, y=22)\n>>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\nPoint(x=100, y=22)",
    "parameters": {
      "type": "object",
      "properties": {
        "typename": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "field_names": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "rename": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "defaults": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "module": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "typename",
        "field_names"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rcid",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "k": {
          "type": "any",
          "default": "10",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_neu",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "numeric_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "categorical_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "version": {
          "type": "any",
          "default": "2",
          "description": " "
        }
      },
      "required": [
        "factor_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_orth",
    "type": "function",
    "description": "X是(行业市值中性化后的)因子值矩阵(N×K)，N为股票数量，K为因子数量，orth_X是正交后因子矩阵（N×K）,s是过渡矩阵\n@author: hanjinyang\n@from: chenyt, 2019-04-22; change matrix to np.array, 2019-07-22",
    "parameters": {
      "type": "object",
      "properties": {
        "X": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "orthret": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "X"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.4*3=4.2，不是原方案（因子数据处理方法.docx）中的5.2\n    sector_fill (bool or str or float): 填补缺失值的方法，默认为'median'\n    pre_neu (str): 在中性化回归前对因子值的处理：None, 'zscore', 'rank'\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "pre_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "pre_neu",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure_v1",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.4*3=4.2，不是原方案（因子数据处理方法.docx）中的5.2\n    sector_fill (bool or str or float): 填补缺失值的方法，默认为'median'\n    pre_neu (str): UNUSED\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "pre_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "pre_neu",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "linearly_independent_cols",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "numpy_lstsq",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "y": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "y",
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "numpy_ols",
    "type": "function",
    "description": "Ordinary Least Squares regression using only NumPy.\n\n只求解及计算残差时，不必使用statsmodels.OLS，避免计算r²,summary等其他数据影响速度(如要做t检验/F检验/算P值还是选sm)。\nhttps://jianghaochu.github.io/ordinary-least-squares-regression-in-python-from-scratch.html",
    "parameters": {
      "type": "object",
      "properties": {
        "y": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "y",
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "outlier_mad",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "mad_limit": {
          "type": "any",
          "default": "1.483",
          "description": " "
        },
        "n_mul": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "sector_categorical",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sector_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "z_score",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "data_api_log_reader",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "log_fn": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "log_fn"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rtn_plot",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "bench_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "rtn_series",
        "bench_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "format_date",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "day": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fmt": {
          "type": "any",
          "default": "str-",
          "description": " "
        }
      },
      "required": [
        "day"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "HTML",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "IFrameCanvas",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "update",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "msg": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "finalize": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "msg"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Javascript",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "display",
    "type": "function",
    "description": "Display a Python object in all frontends.\n\nBy default all representations will be computed and sent to the frontends.\nFrontends can decide which representation is used and how.\n\nIn terminal IPython this will be similar to using :func:`print`, for use in richer\nfrontends see Jupyter notebook examples with rich display logic.\n\nParameters\n----------\n*objs : object\n    The Python objects to display.\nraw : bool, optional\n    Are the objects to be displayed already mimetype-keyed dicts of raw display data,\n    or Python objects that need to be formatted before display? [default: False]\ninclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to include in the\n    format data dict. If this is set *only* the format types included\n    in this list will be computed.\nexclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to exclude in the format\n    data dict. If this is set all format types will be computed,\n    except for those included in this argument.\nmetadata : dict, optional\n    A dictionary of metadata to associate with the output.\n    mime-type keys in this dictionary will be associated with the individual\n    representation formats, if they exist.\ntransient : dict, optional\n    A dictionary of transient data to associate with the output.\n    Data in this dict should not be persisted to files (e.g. notebooks).\ndisplay_id : str, bool optional\n    Set an id for the display.\n    This id can be used for updating this display area later via update_display.\n    If given as `True`, generate a new `display_id`\nclear : bool, optional\n    Should the output area be cleared before displaying anything? If True,\n    this will wait for additional output before clearing. [default: False]\n**kwargs : additional keyword-args, optional\n    Additional keyword-arguments are passed through to the display publisher.\n\nReturns\n-------\nhandle: DisplayHandle\n    Returns a handle on updatable displays for use with :func:`update_display`,\n    if `display_id` is given. Returns :any:`None` if no `display_id` is given\n    (default).\n\nExamples\n--------\n>>> class Json(object):\n...     def __init__(self, json):\n...         self.json = json\n...     def _repr_pretty_(self, pp, cycle):\n...         import json\n...         pp.text(json.dumps(self.json, indent=2))\n...     def __repr__(self):\n...         return str(self.json)\n...\n\n>>> d = Json({1:2, 3: {4:5}})\n\n>>> print(d)\n{1: 2, 3: {4: 5}}\n\n>>> display(d)\n{\n  \"1\": 2,\n  \"3\": {\n    \"4\": 5\n  }\n}\n\n>>> def int_formatter(integer, pp, cycle):\n...     pp.text('I'*integer)\n\n>>> plain = get_ipython().display_formatter.formatters['text/plain']\n>>> plain.for_type(int, int_formatter)\n<function _repr_pprint at 0x...>\n>>> display(7-5)\nII\n\n>>> del plain.type_printers[int]\n>>> display(7-5)\n2\n\nSee Also\n--------\n:func:`update_display`\n\nNotes\n-----\nIn Python, objects can declare their textual representation using the\n`__repr__` method. IPython expands on this idea and allows objects to declare\nother, rich representations including:\n\n  - HTML\n  - JSON\n  - PNG\n  - JPEG\n  - SVG\n  - LaTeX\n\nA single object can declare some or all of these representations; all are\nhandled by IPython's display system.\n\nThe main idea of the first approach is that you have to implement special\ndisplay methods when you define your class, one for each representation you\nwant to use. Here is a list of the names of the special methods and the\nvalues they must return:\n\n  - `_repr_html_`: return raw HTML as a string, or a tuple (see below).\n  - `_repr_json_`: return a JSONable dict, or a tuple (see below).\n  - `_repr_jpeg_`: return raw JPEG data, or a tuple (see below).\n  - `_repr_png_`: return raw PNG data, or a tuple (see below).\n  - `_repr_svg_`: return raw SVG data as a string, or a tuple (see below).\n  - `_repr_latex_`: return LaTeX commands in a string surrounded by \"$\",\n                    or a tuple (see below).\n  - `_repr_mimebundle_`: return a full mimebundle containing the mapping\n                         from all mimetypes to data.\n                         Use this for any mime-type not listed above.\n\nThe above functions may also return the object's metadata alonside the\ndata.  If the metadata is available, the functions will return a tuple\ncontaining the data and metadata, in that order.  If there is no metadata\navailable, then the functions will return the data only.\n\nWhen you are directly writing your own classes, you can adapt them for\ndisplay in IPython by following the above approach. But in practice, you\noften need to work with existing classes that you can't easily modify.\n\nYou can refer to the documentation on integrating with the display system in\norder to register custom formatters for already existing types\n(:ref:`integrating_rich_display`).\n\n.. versionadded:: 5.4 display available without import\n.. versionadded:: 6.1 display available without import\n\nSince IPython 5.4 and 6.1 :func:`display` is automatically made available to\nthe user without import. If you are using display in a document that might\nbe used in a pure python context or with older version of IPython, use the\nfollowing import at the top of your file::\n\n    from IPython.display import display",
    "parameters": {
      "type": "object",
      "properties": {
        "objs": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "include": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "exclude": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "metadata": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "transient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "display_id": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "raw": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "clear": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "objs",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "HTML",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Javascript",
    "type": "class",
    "description": "Create a text display object given raw data.\n\nParameters\n----------\ndata : str or unicode\n    The raw data or a URL or file to load the data from.\nurl : unicode\n    A URL to download the data from.\nfilename : unicode\n    Path to a local file to load the data from.\nmetadata : dict\n    Dict of metadata associated to be the object when displayed",
    "methods": [
      {
        "name": "reload",
        "type": "function",
        "description": "Reload the raw data from file or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "NotebookCanvas",
    "type": "class",
    "description": "No description available.",
    "methods": [
      {
        "name": "update",
        "type": "function",
        "description": "No description available.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "msg": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "finalize": {
              "type": "any",
              "default": "False",
              "description": " "
            }
          },
          "required": [
            "msg"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "display",
    "type": "function",
    "description": "Display a Python object in all frontends.\n\nBy default all representations will be computed and sent to the frontends.\nFrontends can decide which representation is used and how.\n\nIn terminal IPython this will be similar to using :func:`print`, for use in richer\nfrontends see Jupyter notebook examples with rich display logic.\n\nParameters\n----------\n*objs : object\n    The Python objects to display.\nraw : bool, optional\n    Are the objects to be displayed already mimetype-keyed dicts of raw display data,\n    or Python objects that need to be formatted before display? [default: False]\ninclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to include in the\n    format data dict. If this is set *only* the format types included\n    in this list will be computed.\nexclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to exclude in the format\n    data dict. If this is set all format types will be computed,\n    except for those included in this argument.\nmetadata : dict, optional\n    A dictionary of metadata to associate with the output.\n    mime-type keys in this dictionary will be associated with the individual\n    representation formats, if they exist.\ntransient : dict, optional\n    A dictionary of transient data to associate with the output.\n    Data in this dict should not be persisted to files (e.g. notebooks).\ndisplay_id : str, bool optional\n    Set an id for the display.\n    This id can be used for updating this display area later via update_display.\n    If given as `True`, generate a new `display_id`\nclear : bool, optional\n    Should the output area be cleared before displaying anything? If True,\n    this will wait for additional output before clearing. [default: False]\n**kwargs : additional keyword-args, optional\n    Additional keyword-arguments are passed through to the display publisher.\n\nReturns\n-------\nhandle: DisplayHandle\n    Returns a handle on updatable displays for use with :func:`update_display`,\n    if `display_id` is given. Returns :any:`None` if no `display_id` is given\n    (default).\n\nExamples\n--------\n>>> class Json(object):\n...     def __init__(self, json):\n...         self.json = json\n...     def _repr_pretty_(self, pp, cycle):\n...         import json\n...         pp.text(json.dumps(self.json, indent=2))\n...     def __repr__(self):\n...         return str(self.json)\n...\n\n>>> d = Json({1:2, 3: {4:5}})\n\n>>> print(d)\n{1: 2, 3: {4: 5}}\n\n>>> display(d)\n{\n  \"1\": 2,\n  \"3\": {\n    \"4\": 5\n  }\n}\n\n>>> def int_formatter(integer, pp, cycle):\n...     pp.text('I'*integer)\n\n>>> plain = get_ipython().display_formatter.formatters['text/plain']\n>>> plain.for_type(int, int_formatter)\n<function _repr_pprint at 0x...>\n>>> display(7-5)\nII\n\n>>> del plain.type_printers[int]\n>>> display(7-5)\n2\n\nSee Also\n--------\n:func:`update_display`\n\nNotes\n-----\nIn Python, objects can declare their textual representation using the\n`__repr__` method. IPython expands on this idea and allows objects to declare\nother, rich representations including:\n\n  - HTML\n  - JSON\n  - PNG\n  - JPEG\n  - SVG\n  - LaTeX\n\nA single object can declare some or all of these representations; all are\nhandled by IPython's display system.\n\nThe main idea of the first approach is that you have to implement special\ndisplay methods when you define your class, one for each representation you\nwant to use. Here is a list of the names of the special methods and the\nvalues they must return:\n\n  - `_repr_html_`: return raw HTML as a string, or a tuple (see below).\n  - `_repr_json_`: return a JSONable dict, or a tuple (see below).\n  - `_repr_jpeg_`: return raw JPEG data, or a tuple (see below).\n  - `_repr_png_`: return raw PNG data, or a tuple (see below).\n  - `_repr_svg_`: return raw SVG data as a string, or a tuple (see below).\n  - `_repr_latex_`: return LaTeX commands in a string surrounded by \"$\",\n                    or a tuple (see below).\n  - `_repr_mimebundle_`: return a full mimebundle containing the mapping\n                         from all mimetypes to data.\n                         Use this for any mime-type not listed above.\n\nThe above functions may also return the object's metadata alonside the\ndata.  If the metadata is available, the functions will return a tuple\ncontaining the data and metadata, in that order.  If there is no metadata\navailable, then the functions will return the data only.\n\nWhen you are directly writing your own classes, you can adapt them for\ndisplay in IPython by following the above approach. But in practice, you\noften need to work with existing classes that you can't easily modify.\n\nYou can refer to the documentation on integrating with the display system in\norder to register custom formatters for already existing types\n(:ref:`integrating_rich_display`).\n\n.. versionadded:: 5.4 display available without import\n.. versionadded:: 6.1 display available without import\n\nSince IPython 5.4 and 6.1 :func:`display` is automatically made available to\nthe user without import. If you are using display in a document that might\nbe used in a pure python context or with older version of IPython, use the\nfollowing import at the top of your file::\n\n    from IPython.display import display",
    "parameters": {
      "type": "object",
      "properties": {
        "objs": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "include": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "exclude": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "metadata": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "transient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "display_id": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "raw": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "clear": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "objs",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "Any",
    "type": "class",
    "description": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
    "methods": [],
    "properties": []
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_trade_days",
    "type": "function",
    "description": "获取交易日历\n参数：fmt:'str',返回字符串序列\n    'i'，返回整数序列\n    'dt'，返回datetime序列\n经典用法：\nstart = '20220101'\nend = '20221101'\ntradedays = pd.Series(api.getTradeCal(start, end, fmt='dt')).sort_values()\nweek_ends = tradedays.groupby(tradedays.dt.strftime('%Y%W')).max()\nmonth_ends = tradedays.groupby(tradedays.dt.strftime('%Y%m')).max()\n#month_ends = tradedays.groupby([tradedays.dt.year,tradedays.dt.month]).max()\nquarter_ends = month_ends.groupby([month_ends.dt.year,(month_ends.dt.month-1)//3]).max()",
    "parameters": {
      "type": "object",
      "properties": {
        "start": {
          "type": "any",
          "default": "20041231",
          "description": " "
        },
        "end": {
          "type": "any",
          "default": "20040101",
          "description": " "
        },
        "fmt": {
          "type": "any",
          "default": "dt",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "parse_codes",
    "type": "function",
    "description": "返回List[str]",
    "parameters": {
      "type": "object",
      "properties": {
        "codes": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "codes"
      ]
    },
    "return": {
      "type": "typing.Optional[typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "parse_dates",
    "type": "function",
    "description": "返回字符串‘20190101-20190202’表示日期范围，返回List[str]表示日期列表 ",
    "parameters": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "verify": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "max_allowed_dt": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "dates"
      ]
    },
    "return": {
      "type": "typing.Union[NoneType, str, typing.List[str]]",
      "description": " "
    }
  },
  {
    "name": "run_scripts",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "scripts": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "scripts"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "deprecated",
    "type": "function",
    "description": "Used to mark a function as deprecated.\nParameters\n----------\nmsg : str\n    The message to display in the deprecation warning.\nstacklevel : int\n    How far up the stack the warning needs to go, before\n    showing the relevant calling lines.\nUsage\n-----\n@deprecated(msg='function_a is deprecated! Use function_b instead.')\ndef function_a(*args, **kwargs):",
    "parameters": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "stacklevel": {
          "type": "any",
          "default": "2",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "wraps",
    "type": "function",
    "description": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
    "parameters": {
      "type": "object",
      "properties": {
        "wrapped": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "assigned": {
          "type": "any",
          "default": "('__module__', '__name__', '__qualname__', '__doc__', '__annotations__', '__type_params__')",
          "description": " "
        },
        "updated": {
          "type": "any",
          "default": "('__dict__',)",
          "description": " "
        }
      },
      "required": [
        "wrapped"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "read",
    "type": "function",
    "description": "Read a notebook from a file as a NotebookNode of the given version.\n\nThe string can contain a notebook of any version.\nThe notebook will be returned `as_version`, converting, if necessary.\n\nNotebook format errors will be logged.\n\nParameters\n----------\nfp : file or str\n    A file-like object with a read method that returns unicode (use\n    ``io.open()`` in Python 2), or a path to a file.\nas_version : int\n    The version of the notebook format to return.\n    The notebook will be converted, if necessary.\n    Pass nbformat.NO_CONVERT to prevent conversion.\ncapture_validation_error : dict, optional\n    If provided, a key of \"ValidationError\" with a\n    value of the ValidationError instance will be added\n    to the dictionary.\n\nReturns\n-------\nnb : NotebookNode\n    The notebook that was read.",
    "parameters": {
      "type": "object",
      "properties": {
        "fp": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "as_version": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "capture_validation_error": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "fp",
        "as_version",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "extract_pos",
    "type": "function",
    "description": "Extract position values from backtest object as returned by\nget_backtest() on the Quantopian research platform.\n\nParameters\n----------\npositions : pd.DataFrame\n    timeseries containing one row per symbol (and potentially\n    duplicate datetime indices) and columns for amount and\n    last_sale_price.\ncash : pd.Series\n    timeseries containing cash in the portfolio.\n\nReturns\n-------\npd.DataFrame\n    Daily net position values.\n     - See full explanation in tears.create_full_tear_sheet.",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "cash": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions",
        "cash"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_long_short_pos",
    "type": "function",
    "description": "Determines the long and short allocations in a portfolio.\n\nParameters\n----------\npositions : pd.DataFrame\n    The positions that the strategy takes over time.\n\nReturns\n-------\ndf_long_short : pd.DataFrame\n    Long and short allocations as a decimal\n    percentage of the total net liquidation",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_max_median_position_concentration",
    "type": "function",
    "description": "Finds the max and median long and short position concentrations\nin each time period specified by the index of positions.\n\nParameters\n----------\npositions : pd.DataFrame\n    The positions that the strategy takes over time.\n\nReturns\n-------\npd.DataFrame\n    Columns are max long, max short, median long, and median short\n    position concentrations. Rows are timeperiods.",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_percent_alloc",
    "type": "function",
    "description": "Determines a portfolio's allocations.\n\nParameters\n----------\nvalues : pd.DataFrame\n    Contains position values or amounts.\n\nReturns\n-------\nallocations : pd.DataFrame\n    Positions and their allocations.",
    "parameters": {
      "type": "object",
      "properties": {
        "values": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "values"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_sector_exposures",
    "type": "function",
    "description": "Sum position exposures by sector.\n\nParameters\n----------\npositions : pd.DataFrame\n    Contains position values or amounts.\n    - Example\n        index         'AAPL'         'MSFT'        'CHK'        cash\n        2004-01-09    13939.380     -15012.993    -403.870      1477.483\n        2004-01-12    14492.630     -18624.870    142.630       3989.610\n        2004-01-13    -13853.280    13653.640     -100.980      100.000\nsymbol_sector_map : dict or pd.Series\n    Security identifier to sector mapping.\n    Security ids as keys/index, sectors as values.\n    - Example:\n        {'AAPL' : 'Technology'\n         'MSFT' : 'Technology'\n         'CHK' : 'Natural Resources'}\n\nReturns\n-------\nsector_exp : pd.DataFrame\n    Sectors and their allocations.\n    - Example:\n        index         'Technology'    'Natural Resources' cash\n        2004-01-09    -1073.613       -403.870            1477.4830\n        2004-01-12    -4132.240       142.630             3989.6100\n        2004-01-13    -199.640        -100.980            100.0000",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "symbol_sector_map": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions",
        "symbol_sector_map"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_top_long_short_abs",
    "type": "function",
    "description": "Finds the top long, short, and absolute positions.\n\nParameters\n----------\npositions : pd.DataFrame\n    The positions that the strategy takes over time.\ntop : int, optional\n    How many of each to find (default 10).\n\nReturns\n-------\ndf_top_long : pd.DataFrame\n    Top long positions.\ndf_top_short : pd.DataFrame\n    Top short positions.\ndf_top_abs : pd.DataFrame\n    Top absolute positions.",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "top": {
          "type": "any",
          "default": "10",
          "description": " "
        }
      },
      "required": [
        "positions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "OrderedDict",
    "type": "class",
    "description": "Dictionary that remembers insertion order",
    "methods": [],
    "properties": []
  },
  {
    "name": "compute_cap_exposures",
    "type": "function",
    "description": "Returns arrays of long, short and gross market cap exposures of an\nalgorithm's positions\n\nParameters\n----------\npositions : pd.DataFrame\n    Daily equity positions of algorithm, in dollars.\n    - See full explanation in compute_style_factor_exposures.\n\ncaps : pd.DataFrame\n    Daily Morningstar sector code per asset\n    - See full explanation in create_risk_tear_sheet",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "caps": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions",
        "caps"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "compute_sector_exposures",
    "type": "function",
    "description": "Returns arrays of long, short and gross sector exposures of an algorithm's\npositions\n\nParameters\n----------\npositions : pd.DataFrame\n    Daily equity positions of algorithm, in dollars.\n    - See full explanation in compute_style_factor_exposures.\n\nsectors : pd.DataFrame\n    Daily Morningstar sector code per asset\n    - See full explanation in create_risk_tear_sheet\n\nsector_dict : dict or OrderedDict\n    Dictionary of all sectors\n    - Keys are sector codes (e.g. ints or strings) and values are sector\n      names (which must be strings)\n    - Defaults to Morningstar sectors",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sectors": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_dict": {
          "type": "any",
          "default": "OrderedDict({101: 'Basic Materials', 102: 'Consumer Cyclical', 103: 'Financial Services', 104: 'Real Estate', 205: 'Consumer Defensive', 206: 'Healthcare', 207: 'Utilities', 308: 'Communication Services', 309: 'Energy', 310: 'Industrials', 311: 'Technology'})",
          "description": " "
        }
      },
      "required": [
        "positions",
        "sectors"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "compute_style_factor_exposures",
    "type": "function",
    "description": "Returns style factor exposure of an algorithm's positions\n\nParameters\n----------\npositions : pd.DataFrame\n    Daily equity positions of algorithm, in dollars.\n    - See full explanation in create_risk_tear_sheet\n\nrisk_factor : pd.DataFrame\n    Daily risk factor per asset.\n    - DataFrame with dates as index and equities as columns\n    - Example:\n                     Equity(24   Equity(62\n                       [AAPL])      [ABT])\n    2017-04-03        -0.51284     1.39173\n    2017-04-04        -0.73381     0.98149\n    2017-04-05        -0.90132     1.13981",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "risk_factor": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "positions",
        "risk_factor"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "compute_volume_exposures",
    "type": "function",
    "description": "Returns arrays of pth percentile of long, short and gross volume exposures\nof an algorithm's held shares\n\nParameters\n----------\nshares_held : pd.DataFrame\n    Daily number of shares held by an algorithm.\n    - See full explanation in create_risk_tear_sheet\n\nvolume : pd.DataFrame\n    Daily volume per asset\n    - See full explanation in create_risk_tear_sheet\n\npercentile : float\n    Percentile to use when computing and plotting volume exposures\n    - See full explanation in create_risk_tear_sheet",
    "parameters": {
      "type": "object",
      "properties": {
        "shares_held": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "volumes": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "percentile": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "shares_held",
        "volumes",
        "percentile"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "partial",
    "type": "class",
    "description": "partial(func, *args, **keywords) - new function with partial application\nof the given arguments and keywords.",
    "methods": [],
    "properties": []
  },
  {
    "name": "plot_cap_exposures_gross",
    "type": "function",
    "description": "Plots outputs of compute_cap_exposures as area charts\n\nParameters\n----------\ngross_exposures : array\n    Arrays of gross market cap exposures (output of compute_cap_exposures).",
    "parameters": {
      "type": "object",
      "properties": {
        "gross_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "gross_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_cap_exposures_longshort",
    "type": "function",
    "description": "Plots outputs of compute_cap_exposures as area charts\n\nParameters\n----------\nlong_exposures, short_exposures : arrays\n    Arrays of long and short market cap exposures (output of\n    compute_cap_exposures).",
    "parameters": {
      "type": "object",
      "properties": {
        "long_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "short_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "long_exposures",
        "short_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_cap_exposures_net",
    "type": "function",
    "description": "Plots outputs of compute_cap_exposures as line graphs\n\nParameters\n----------\nnet_exposures : array\n    Arrays of gross market cap exposures (output of compute_cap_exposures).",
    "parameters": {
      "type": "object",
      "properties": {
        "net_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "net_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_sector_exposures_gross",
    "type": "function",
    "description": "Plots output of compute_sector_exposures as area charts\n\nParameters\n----------\ngross_exposures : arrays\n    Arrays of gross sector exposures (output of compute_sector_exposures).\n\nsector_dict : dict or OrderedDict\n    Dictionary of all sectors\n    - See full description in compute_sector_exposures",
    "parameters": {
      "type": "object",
      "properties": {
        "gross_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_dict": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "gross_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_sector_exposures_longshort",
    "type": "function",
    "description": "Plots outputs of compute_sector_exposures as area charts\n\nParameters\n----------\nlong_exposures, short_exposures : arrays\n    Arrays of long and short sector exposures (output of\n    compute_sector_exposures).\n\nsector_dict : dict or OrderedDict\n    Dictionary of all sectors\n    - See full description in compute_sector_exposures",
    "parameters": {
      "type": "object",
      "properties": {
        "long_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "short_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_dict": {
          "type": "any",
          "default": "OrderedDict({101: 'Basic Materials', 102: 'Consumer Cyclical', 103: 'Financial Services', 104: 'Real Estate', 205: 'Consumer Defensive', 206: 'Healthcare', 207: 'Utilities', 308: 'Communication Services', 309: 'Energy', 310: 'Industrials', 311: 'Technology'})",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "long_exposures",
        "short_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_sector_exposures_net",
    "type": "function",
    "description": "Plots output of compute_sector_exposures as line graphs\n\nParameters\n----------\nnet_exposures : arrays\n    Arrays of net sector exposures (output of compute_sector_exposures).\n\nsector_dict : dict or OrderedDict\n    Dictionary of all sectors\n    - See full description in compute_sector_exposures",
    "parameters": {
      "type": "object",
      "properties": {
        "net_exposures": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_dict": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "net_exposures"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_style_factor_exposures",
    "type": "function",
    "description": "Plots DataFrame output of compute_style_factor_exposures as a line graph\n\nParameters\n----------\ntot_style_factor_exposure : pd.Series\n    Daily style factor exposures (output of compute_style_factor_exposures)\n    - Time series with decimal style factor exposures\n    - Example:\n        2017-04-24    0.037820\n        2017-04-25    0.016413\n        2017-04-26   -0.021472\n        2017-04-27   -0.024859\n\nfactor_name : string\n    Name of style factor, for use in graph title\n    - Defaults to tot_style_factor_exposure.name",
    "parameters": {
      "type": "object",
      "properties": {
        "tot_style_factor_exposure": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "factor_name": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "tot_style_factor_exposure"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_volume_exposures_gross",
    "type": "function",
    "description": "Plots outputs of compute_volume_exposures as line graphs\n\nParameters\n----------\ngrossed_threshold : pd.Series\n    Series of grossed volume exposures (output of\n    compute_volume_exposures).\n\npercentile : float\n    Percentile to use when computing and plotting volume exposures\n    - See full explanation in create_risk_tear_sheet",
    "parameters": {
      "type": "object",
      "properties": {
        "grossed_threshold": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "percentile": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "grossed_threshold",
        "percentile"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_volume_exposures_longshort",
    "type": "function",
    "description": "Plots outputs of compute_volume_exposures as line graphs\n\nParameters\n----------\nlonged_threshold, shorted_threshold : pd.Series\n    Series of longed and shorted volume exposures (output of\n    compute_volume_exposures).\n\npercentile : float\n    Percentile to use when computing and plotting volume exposures.\n    - See full explanation in create_risk_tear_sheet",
    "parameters": {
      "type": "object",
      "properties": {
        "longed_threshold": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "shorted_threshold": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "percentile": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "longed_threshold",
        "shorted_threshold",
        "percentile"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "adjust_returns_for_slippage",
    "type": "function",
    "description": "Apply a slippage penalty for every dollar traded.\n\nParameters\n----------\nreturns : pd.Series\n    Daily returns of the strategy, noncumulative.\n     - See full explanation in create_full_tear_sheet.\npositions : pd.DataFrame\n    Daily net position values.\n     - See full explanation in create_full_tear_sheet.\ntransactions : pd.DataFrame\n    Prices and amounts of executed trades. One row per trade.\n     - See full explanation in create_full_tear_sheet.\nslippage_bps: int/float\n    Basis points of slippage to apply.\n\nReturns\n-------\npd.Series\n    Time series of daily returns, adjusted for slippage.",
    "parameters": {
      "type": "object",
      "properties": {
        "returns": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "transactions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "slippage_bps": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "returns",
        "positions",
        "transactions",
        "slippage_bps"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_turnover",
    "type": "function",
    "description": " - Value of purchases and sales divided\nby either the actual gross book or the portfolio value\nfor the time step.\n\nParameters\n----------\npositions : pd.DataFrame\n    Contains daily position values including cash.\n    - See full explanation in tears.create_full_tear_sheet\ntransactions : pd.DataFrame\n    Prices and amounts of executed trades. One row per trade.\n    - See full explanation in tears.create_full_tear_sheet\ndenominator : str, optional\n    Either 'AGB' or 'portfolio_value', default AGB.\n    - AGB (Actual gross book) is the gross market\n    value (GMV) of the specific algo being analyzed.\n    Swapping out an entire portfolio of stocks for\n    another will yield 200% turnover, not 100%, since\n    transactions are being made for both sides.\n    - We use average of the previous and the current end-of-period\n    AGB to avoid singularities when trading only into or\n    out of an entire book in one trading period.\n    - portfolio_value is the total value of the algo's\n    positions end-of-period, including cash.\n\nReturns\n-------\nturnover_rate : pd.Series\n    timeseries of portfolio turnover rates.",
    "parameters": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "transactions": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "denominator": {
          "type": "any",
          "default": "AGB",
          "description": " "
        }
      },
      "required": [
        "positions",
        "transactions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_txn_vol",
    "type": "function",
    "description": "Extract daily transaction data from set of transaction objects.\n\nParameters\n----------\ntransactions : pd.DataFrame\n    Time series containing one row per symbol (and potentially\n    duplicate datetime indices) and columns for amount and\n    price.\n\nReturns\n-------\npd.DataFrame\n    Daily transaction volume and number of shares.\n     - See full explanation in tears.create_full_tear_sheet.",
    "parameters": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "transactions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "make_transaction_frame",
    "type": "function",
    "description": "Formats a transaction DataFrame.\n\nParameters\n----------\ntransactions : pd.DataFrame\n    Contains improperly formatted transactional data.\n\nReturns\n-------\ndf : pd.DataFrame\n    Daily transaction volume and dollar ammount.\n     - See full explanation in tears.create_full_tear_sheet.",
    "parameters": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "transactions"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "map_transaction",
    "type": "function",
    "description": "Maps a single transaction row to a dictionary.\n\nParameters\n----------\ntxn : pd.DataFrame\n    A single transaction object to convert to a dictionary.\n\nReturns\n-------\ndict\n    Mapped transaction.",
    "parameters": {
      "type": "object",
      "properties": {
        "txn": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "txn"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "FacetGrid",
    "type": "class",
    "description": "Multi-plot grid for plotting conditional relationships.",
    "methods": [
      {
        "name": "add_legend",
        "type": "function",
        "description": "Draw a legend, maybe placing it outside axes and resizing the figure.\n\nParameters\n----------\nlegend_data : dict\n    Dictionary mapping label names (or two-element tuples where the\n    second element is a label name) to matplotlib artist handles. The\n    default reads from ``self._legend_data``.\ntitle : string\n    Title for the legend. The default reads from ``self._hue_var``.\nlabel_order : list of labels\n    The order that the legend entries should appear in. The default\n    reads from ``self.hue_names``.\nadjust_subtitles : bool\n    If True, modify entries with invisible artists to left-align\n    the labels and set the font size to that of a title.\nkwargs : key, value pairings\n    Other keyword arguments are passed to the underlying legend methods\n    on the Figure or Axes object.\n\nReturns\n-------\nself : Grid instance\n    Returns self for easy chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "legend_data": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "title": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "label_order": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "adjust_subtitles": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "apply",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return self.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "despine",
        "type": "function",
        "description": "Remove axis spines from the facets.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "facet_axis",
        "type": "function",
        "description": "Make the axis identified by these indices active and return it.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "row_i": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "col_j": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "modify_state": {
              "type": "any",
              "default": "True",
              "description": " "
            }
          },
          "required": [
            "row_i",
            "col_j"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "facet_data",
        "type": "function",
        "description": "Generator for name indices and data subsets for each facet.\n\nYields\n------\n(i, j, k), data_ijk : tuple of ints, DataFrame\n    The ints provide an index into the {row, col, hue}_names attribute,\n    and the dataframe contains a subset of the full data corresponding\n    to each facet. The generator yields subsets that correspond with\n    the self.axes.flat iterator, or self.axes[i, j] when `col_wrap`\n    is None.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map",
        "type": "function",
        "description": "Apply a plotting function to each facet's subset of the data.\n\nParameters\n----------\nfunc : callable\n    A plotting function that takes data and keyword arguments. It\n    must plot to the currently active matplotlib Axes and take a\n    `color` keyword argument. If faceting on the `hue` dimension,\n    it must also take a `label` keyword argument.\nargs : strings\n    Column names in self.data that identify variables with data to\n    plot. The data for each variable is passed to `func` in the\n    order the variables are specified in the call.\nkwargs : keyword arguments\n    All keyword arguments are passed to the plotting function.\n\nReturns\n-------\nself : object\n    Returns self.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map_dataframe",
        "type": "function",
        "description": "Like ``.map`` but passes args as strings and inserts data in kwargs.\n\nThis method is suitable for plotting with functions that accept a\nlong-form DataFrame as a `data` keyword argument and access the\ndata in that DataFrame using string variable names.\n\nParameters\n----------\nfunc : callable\n    A plotting function that takes data and keyword arguments. Unlike\n    the `map` method, a function used here must \"understand\" Pandas\n    objects. It also must plot to the currently active matplotlib Axes\n    and take a `color` keyword argument. If faceting on the `hue`\n    dimension, it must also take a `label` keyword argument.\nargs : strings\n    Column names in self.data that identify variables with data to\n    plot. The data for each variable is passed to `func` in the\n    order the variables are specified in the call.\nkwargs : keyword arguments\n    All keyword arguments are passed to the plotting function.\n\nReturns\n-------\nself : object\n    Returns self.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "pipe",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return its value.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "refline",
        "type": "function",
        "description": "Add a reference line(s) to each facet.\n\nParameters\n----------\nx, y : numeric\n    Value(s) to draw the line(s) at.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Specifies the color of the reference line(s). Pass ``color=None`` to\n    use ``hue`` mapping.\nlinestyle : str\n    Specifies the style of the reference line(s).\nline_kws : key, value mappings\n    Other keyword arguments are passed to :meth:`matplotlib.axes.Axes.axvline`\n    when ``x`` is not None and :meth:`matplotlib.axes.Axes.axhline` when ``y``\n    is not None.\n\nReturns\n-------\n:class:`FacetGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "x": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "y": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "color": {
              "type": "any",
              "default": ".5",
              "description": " "
            },
            "linestyle": {
              "type": "any",
              "default": "--",
              "description": " "
            },
            "line_kws": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "line_kws"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "savefig",
        "type": "function",
        "description": "Save an image of the plot.\n\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set",
        "type": "function",
        "description": "Set attributes on each subplot Axes.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_axis_labels",
        "type": "function",
        "description": "Set axis labels on the left column and bottom row of the grid.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "x_var": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "y_var": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "clear_inner": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_titles",
        "type": "function",
        "description": "Draw titles either above each facet or on the grid margins.\n\nParameters\n----------\ntemplate : string\n    Template for all titles with the formatting keys {col_var} and\n    {col_name} (if using a `col` faceting variable) and/or {row_var}\n    and {row_name} (if using a `row` faceting variable).\nrow_template:\n    Template for the row variable when titles are drawn on the grid\n    margins. Must have {row_var} and {row_name} formatting keys.\ncol_template:\n    Template for the column variable when titles are drawn on the grid\n    margins. Must have {col_var} and {col_name} formatting keys.\n\nReturns\n-------\nself: object\n    Returns self.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "template": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "row_template": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "col_template": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_xlabels",
        "type": "function",
        "description": "Label the x axis on the bottom row of the grid.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "label": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "clear_inner": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_xticklabels",
        "type": "function",
        "description": "Set x axis tick labels of the grid.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "labels": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "step": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_ylabels",
        "type": "function",
        "description": "Label the y axis on the left column of the grid.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "label": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "clear_inner": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_yticklabels",
        "type": "function",
        "description": "Set y axis tick labels on the left column of the grid.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "labels": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "tick_params",
        "type": "function",
        "description": "Modify the ticks, tick labels, and gridlines.\n\nParameters\n----------\naxis : {'x', 'y', 'both'}\n    The axis on which to apply the formatting.\nkwargs : keyword arguments\n    Additional keyword arguments to pass to\n    :meth:`matplotlib.axes.Axes.tick_params`.\n\nReturns\n-------\nself : Grid instance\n    Returns self for easy chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "axis": {
              "type": "any",
              "default": "both",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "tight_layout",
        "type": "function",
        "description": "Call fig.tight_layout within rect that exclude the legend.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "ax",
        "type": "property",
        "description": "The :class:`matplotlib.axes.Axes` when no faceting variables are assigned."
      },
      {
        "name": "axes",
        "type": "property",
        "description": "An array of the :class:`matplotlib.axes.Axes` objects in the grid."
      },
      {
        "name": "axes_dict",
        "type": "property",
        "description": "A mapping of facet names to corresponding :class:`matplotlib.axes.Axes`.\n\nIf only one of ``row`` or ``col`` is assigned, each key is a string\nrepresenting a level of that variable. If both facet dimensions are\nassigned, each key is a ``({row_level}, {col_level})`` tuple."
      },
      {
        "name": "fig",
        "type": "property",
        "description": "DEPRECATED: prefer the `figure` property."
      },
      {
        "name": "figure",
        "type": "property",
        "description": "Access the :class:`matplotlib.figure.Figure` object underlying the grid."
      },
      {
        "name": "legend",
        "type": "property",
        "description": "The :class:`matplotlib.legend.Legend` object, if present."
      }
    ]
  },
  {
    "name": "JointGrid",
    "type": "class",
    "description": "Grid for drawing a bivariate plot with marginal univariate plots.\n\nMany plots can be drawn by using the figure-level interface :func:`jointplot`.\nUse this class directly when you need more flexibility.",
    "methods": [
      {
        "name": "apply",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return self.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "pipe",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return its value.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "plot",
        "type": "function",
        "description": "Draw the plot by passing functions for joint and marginal axes.\n\nThis method passes the ``kwargs`` dictionary to both functions. If you\nneed more control, call :meth:`JointGrid.plot_joint` and\n:meth:`JointGrid.plot_marginals` directly with specific parameters.\n\nParameters\n----------\njoint_func, marginal_func : callables\n    Functions to draw the bivariate and univariate plots. See methods\n    referenced above for information about the required characteristics\n    of these functions.\nkwargs\n    Additional keyword arguments are passed to both functions.\n\nReturns\n-------\n:class:`JointGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "joint_func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "marginal_func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "joint_func",
            "marginal_func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "plot_joint",
        "type": "function",
        "description": "Draw a bivariate plot on the joint axes of the grid.\n\nParameters\n----------\nfunc : plotting callable\n    If a seaborn function, it should accept ``x`` and ``y``. Otherwise,\n    it must accept ``x`` and ``y`` vectors of data as the first two\n    positional arguments, and it must plot on the \"current\" axes.\n    If ``hue`` was defined in the class constructor, the function must\n    accept ``hue`` as a parameter.\nkwargs\n    Keyword argument are passed to the plotting function.\n\nReturns\n-------\n:class:`JointGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "plot_marginals",
        "type": "function",
        "description": "Draw univariate plots on each marginal axes.\n\nParameters\n----------\nfunc : plotting callable\n    If a seaborn function, it should  accept ``x`` and ``y`` and plot\n    when only one of them is defined. Otherwise, it must accept a vector\n    of data as the first positional argument and determine its orientation\n    using the ``vertical`` parameter, and it must plot on the \"current\" axes.\n    If ``hue`` was defined in the class constructor, it must accept ``hue``\n    as a parameter.\nkwargs\n    Keyword argument are passed to the plotting function.\n\nReturns\n-------\n:class:`JointGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "refline",
        "type": "function",
        "description": "Add a reference line(s) to joint and/or marginal axes.\n\nParameters\n----------\nx, y : numeric\n    Value(s) to draw the line(s) at.\njoint, marginal : bools\n    Whether to add the reference line(s) to the joint/marginal axes.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Specifies the color of the reference line(s).\nlinestyle : str\n    Specifies the style of the reference line(s).\nline_kws : key, value mappings\n    Other keyword arguments are passed to :meth:`matplotlib.axes.Axes.axvline`\n    when ``x`` is not None and :meth:`matplotlib.axes.Axes.axhline` when ``y``\n    is not None.\n\nReturns\n-------\n:class:`JointGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "x": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "y": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "joint": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "marginal": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "color": {
              "type": "any",
              "default": ".5",
              "description": " "
            },
            "linestyle": {
              "type": "any",
              "default": "--",
              "description": " "
            },
            "line_kws": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "line_kws"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "savefig",
        "type": "function",
        "description": "Save an image of the plot.\n\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set",
        "type": "function",
        "description": "Set attributes on each subplot Axes.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set_axis_labels",
        "type": "function",
        "description": "Set axis labels on the bivariate axes.\n\nParameters\n----------\nxlabel, ylabel : strings\n    Label names for the x and y variables.\nkwargs : key, value mappings\n    Other keyword arguments are passed to the following functions:\n\n    - :meth:`matplotlib.axes.Axes.set_xlabel`\n    - :meth:`matplotlib.axes.Axes.set_ylabel`\n\nReturns\n-------\n:class:`JointGrid` instance\n    Returns ``self`` for easy method chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "xlabel": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "ylabel": {
              "type": "any",
              "default": "",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "fig",
        "type": "property",
        "description": "DEPRECATED: prefer the `figure` property."
      },
      {
        "name": "figure",
        "type": "property",
        "description": "Access the :class:`matplotlib.figure.Figure` object underlying the grid."
      }
    ]
  },
  {
    "name": "PairGrid",
    "type": "class",
    "description": "Subplot grid for plotting pairwise relationships in a dataset.\n\nThis object maps each variable in a dataset onto a column and row in a\ngrid of multiple axes. Different axes-level plotting functions can be\nused to draw bivariate plots in the upper and lower triangles, and the\nmarginal distribution of each variable can be shown on the diagonal.\n\nSeveral different common plots can be generated in a single line using\n:func:`pairplot`. Use :class:`PairGrid` when you need more flexibility.\n\nSee the :ref:`tutorial <grid_tutorial>` for more information.",
    "methods": [
      {
        "name": "add_legend",
        "type": "function",
        "description": "Draw a legend, maybe placing it outside axes and resizing the figure.\n\nParameters\n----------\nlegend_data : dict\n    Dictionary mapping label names (or two-element tuples where the\n    second element is a label name) to matplotlib artist handles. The\n    default reads from ``self._legend_data``.\ntitle : string\n    Title for the legend. The default reads from ``self._hue_var``.\nlabel_order : list of labels\n    The order that the legend entries should appear in. The default\n    reads from ``self.hue_names``.\nadjust_subtitles : bool\n    If True, modify entries with invisible artists to left-align\n    the labels and set the font size to that of a title.\nkwargs : key, value pairings\n    Other keyword arguments are passed to the underlying legend methods\n    on the Figure or Axes object.\n\nReturns\n-------\nself : Grid instance\n    Returns self for easy chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "legend_data": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "title": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "label_order": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "adjust_subtitles": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "apply",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return self.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map",
        "type": "function",
        "description": "Plot with the same function in every subplot.\n\nParameters\n----------\nfunc : callable plotting function\n    Must take x, y arrays as positional arguments and draw onto the\n    \"currently active\" matplotlib Axes. Also needs to accept kwargs\n    called ``color`` and  ``label``.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map_diag",
        "type": "function",
        "description": "Plot with a univariate function on each diagonal subplot.\n\nParameters\n----------\nfunc : callable plotting function\n    Must take an x array as a positional argument and draw onto the\n    \"currently active\" matplotlib Axes. Also needs to accept kwargs\n    called ``color`` and  ``label``.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map_lower",
        "type": "function",
        "description": "Plot with a bivariate function on the lower diagonal subplots.\n\nParameters\n----------\nfunc : callable plotting function\n    Must take x, y arrays as positional arguments and draw onto the\n    \"currently active\" matplotlib Axes. Also needs to accept kwargs\n    called ``color`` and  ``label``.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map_offdiag",
        "type": "function",
        "description": "Plot with a bivariate function on the off-diagonal subplots.\n\nParameters\n----------\nfunc : callable plotting function\n    Must take x, y arrays as positional arguments and draw onto the\n    \"currently active\" matplotlib Axes. Also needs to accept kwargs\n    called ``color`` and  ``label``.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "map_upper",
        "type": "function",
        "description": "Plot with a bivariate function on the upper diagonal subplots.\n\nParameters\n----------\nfunc : callable plotting function\n    Must take x, y arrays as positional arguments and draw onto the\n    \"currently active\" matplotlib Axes. Also needs to accept kwargs\n    called ``color`` and  ``label``.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "pipe",
        "type": "function",
        "description": "Pass the grid to a user-supplied function and return its value.\n\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\n\nAdded in v0.12.0.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "func": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "func",
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "savefig",
        "type": "function",
        "description": "Save an image of the plot.\n\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "set",
        "type": "function",
        "description": "Set attributes on each subplot Axes.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "tick_params",
        "type": "function",
        "description": "Modify the ticks, tick labels, and gridlines.\n\nParameters\n----------\naxis : {'x', 'y', 'both'}\n    The axis on which to apply the formatting.\nkwargs : keyword arguments\n    Additional keyword arguments to pass to\n    :meth:`matplotlib.axes.Axes.tick_params`.\n\nReturns\n-------\nself : Grid instance\n    Returns self for easy chaining.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "axis": {
              "type": "any",
              "default": "both",
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "tight_layout",
        "type": "function",
        "description": "Call fig.tight_layout within rect that exclude the legend.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "args": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "args",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": [
      {
        "name": "fig",
        "type": "property",
        "description": "DEPRECATED: prefer the `figure` property."
      },
      {
        "name": "figure",
        "type": "property",
        "description": "Access the :class:`matplotlib.figure.Figure` object underlying the grid."
      },
      {
        "name": "legend",
        "type": "property",
        "description": "The :class:`matplotlib.legend.Legend` object, if present."
      }
    ]
  },
  {
    "name": "axes_style",
    "type": "function",
    "description": "Get the parameters that control the general style of the plots.\n\nThe style parameters control properties like the color of the background and\nwhether a grid is enabled by default. This is accomplished using the\nmatplotlib rcParams system.\n\nThe options are illustrated in the\n:doc:`aesthetics tutorial <../tutorial/aesthetics>`.\n\nThis function can also be used as a context manager to temporarily\nalter the global defaults. See :func:`set_theme` or :func:`set_style`\nto modify the global defaults for all plots.\n\nParameters\n----------\nstyle : None, dict, or one of {darkgrid, whitegrid, dark, white, ticks}\n    A dictionary of parameters or the name of a preconfigured style.\nrc : dict, optional\n    Parameter mappings to override the values in the preset seaborn\n    style dictionaries. This only updates parameters that are\n    considered part of the style definition.\n\nExamples\n--------\n\n.. include:: ../docstrings/axes_style.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "style": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "barplot",
    "type": "function",
    "description": "Show point estimates and errors as rectangular bars.\n\nA bar plot represents an aggregate or statistical estimate for a numeric\nvariable with the height of each rectangle and indicates the uncertainty\naround that estimate using an error bar. Bar plots include 0 in the\naxis range, and they are a good choice when 0 is a meaningful value\nfor the variable to take.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \nestimator : string or callable that maps vector -> scalar\n    Statistical function to estimate within each categorical bin.\nerrorbar : string, (string, number) tuple, callable or None\n    Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n    with a method name and a level parameter, or a function that maps from a\n    vector to a (min, max) interval, or None to hide errorbar. See the\n    :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\n\n    .. versionadded:: v0.12.0\nn_boot : int\n    Number of bootstrap samples used to compute confidence intervals.\nseed : int, `numpy.random.Generator`, or `numpy.random.RandomState`\n    Seed or random number generator for reproducible bootstrapping.\nunits : name of variable in `data` or vector data\n    Identifier of sampling units; used by the errorbar function to\n    perform a multilevel bootstrap and account for repeated measures\nweights : name of variable in `data` or vector data\n    Data values or column used to compute weighted statistics.\n    Note that the use of weights may limit other statistical options.\n\n    .. versionadded:: v0.13.1    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsaturation : float\n    Proportion of the original saturation to draw fill colors in. Large\n    patches often look better with desaturated colors, but set this to\n    `1` if you want the colors to perfectly match the input values.    \nfill : bool\n    If True, use a solid patch. Otherwise, draw as line art.\n\n    .. versionadded:: v0.13.0    \nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nwidth : float\n    Width allotted to each element on the orient axis. When `native_scale=True`,\n    it is relative to the minimum distance between two values in the native scale.    \ndodge : \"auto\" or bool\n    When hue mapping is used, whether elements should be narrowed and shifted along\n    the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n    orient variable is crossed with the categorical variable or `False` otherwise.\n\n    .. versionchanged:: 0.13.0\n\n        Added `\"auto\"` mode as a new default.    \ngap : float\n    Shrink on the orient axis by this factor to add a gap between dodged elements.\n\n    .. versionadded:: 0.13.0    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \ncapsize : float\n    Width of the \"caps\" on error bars, relative to bar spacing.    \nerr_kws : dict\n    Parameters of :class:`matplotlib.lines.Line2D`, for the error bar artists.\n\n    .. versionadded:: v0.13.0    \nci : float\n    Level of the confidence interval to show, in [0, 100].\n\n    .. deprecated:: v0.12.0\n        Use `errorbar=(\"ci\", ...)`.    \nerrcolor : matplotlib color\n    Color used for the error bar lines.\n\n    .. deprecated:: 0.13.0\n        Use `err_kws={'color': ...}`.    \nerrwidth : float\n    Thickness of error bar lines (and caps), in points.\n\n    .. deprecated:: 0.13.0\n        Use `err_kws={'linewidth': ...}`.    \nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other parameters are passed through to :class:`matplotlib.patches.Rectangle`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\ncountplot : Show the counts of observations in each categorical bin.    \npointplot : Show point estimates and confidence intervals using dots.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nNotes\n-----\n\nFor datasets where 0 is not a meaningful value, a :func:`pointplot` will\nallow you to focus on differences between levels of one or more categorical\nvariables.\n\nIt is also important to keep in mind that a bar plot shows only the mean (or\nother aggregate) value, but it is often more informative to show the\ndistribution of values at each level of the categorical variables. In those\ncases, approaches such as a :func:`boxplot` or :func:`violinplot` may be\nmore appropriate.\n\nExamples\n--------\n.. include:: ../docstrings/barplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "estimator": {
          "type": "any",
          "default": "mean",
          "description": " "
        },
        "errorbar": {
          "type": "any",
          "default": "('ci', 95)",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "saturation": {
          "type": "any",
          "default": "0.75",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "width": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "gap": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "capsize": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "err_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "errcolor": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "errwidth": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "blend_palette",
    "type": "function",
    "description": "Make a palette that blends between a list of colors.\n\nParameters\n----------\ncolors : sequence of colors in various formats interpreted by `input`\n    hex code, html color name, or tuple in `input` space.\nn_colors : int, optional\n    Number of colors in the palette.\nas_cmap : bool, optional\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nExamples\n--------\n.. include: ../docstrings/blend_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "input": {
          "type": "any",
          "default": "rgb",
          "description": " "
        }
      },
      "required": [
        "colors"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "boxenplot",
    "type": "function",
    "description": "Draw an enhanced box plot for larger datasets.\n\nThis style of plot was originally named a \"letter value\" plot because it\nshows a large number of quantiles that are defined as \"letter values\".  It\nis similar to a box plot in plotting a nonparametric representation of a\ndistribution in which all features correspond to actual observations. By\nplotting more quantiles, it provides more information about the shape of\nthe distribution, particularly in the tails.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsaturation : float\n    Proportion of the original saturation to draw fill colors in. Large\n    patches often look better with desaturated colors, but set this to\n    `1` if you want the colors to perfectly match the input values.    \nfill : bool\n    If True, use a solid patch. Otherwise, draw as line art.\n\n    .. versionadded:: v0.13.0    \ndodge : \"auto\" or bool\n    When hue mapping is used, whether elements should be narrowed and shifted along\n    the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n    orient variable is crossed with the categorical variable or `False` otherwise.\n\n    .. versionchanged:: 0.13.0\n\n        Added `\"auto\"` mode as a new default.    \nwidth : float\n    Width allotted to each element on the orient axis. When `native_scale=True`,\n    it is relative to the minimum distance between two values in the native scale.    \ngap : float\n    Shrink on the orient axis by this factor to add a gap between dodged elements.\n\n    .. versionadded:: 0.13.0    \nlinewidth : float\n    Width of the lines that frame the plot elements.    \nlinecolor : color\n    Color to use for line elements, when `fill` is True.\n\n    .. versionadded:: v0.13.0    \nwidth_method : {\"exponential\", \"linear\", \"area\"}\n    Method to use for the width of the letter value boxes:\n\n    - `\"exponential\"`: Represent the corresponding percentile\n    - `\"linear\"`: Decrease by a constant amount for each box\n    - `\"area\"`: Represent the density of data points in that box\nk_depth : {\"tukey\", \"proportion\", \"trustworthy\", \"full\"} or int\n    The number of levels to compute and draw in each tail:\n\n    - `\"tukey\"`: Use log2(n) - 3 levels, covering similar range as boxplot whiskers\n    - `\"proportion\"`: Leave approximately `outlier_prop` fliers\n    - `\"trusthworthy\"`: Extend to level with confidence of at least `trust_alpha`\n    - `\"full\"`: Use log2(n) + 1 levels and extend to most extreme points\noutlier_prop : float\n    Proportion of data expected to be outliers; used when `k_depth=\"proportion\"`.\ntrust_alpha : float\n    Confidence threshold for most extreme level; used when `k_depth=\"trustworthy\"`.\nshowfliers : bool\n    If False, suppress the plotting of outliers.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nbox_kws: dict\n    Keyword arguments for the box artists; passed to\n    :class:`matplotlib.patches.Rectangle`.\n\n    .. versionadded:: v0.12.0\nline_kws: dict\n    Keyword arguments for the line denoting the median; passed to\n    :meth:`matplotlib.axes.Axes.plot`.\n\n    .. versionadded:: v0.12.0\nflier_kws: dict\n    Keyword arguments for the scatter denoting the outlier observations;\n    passed to :meth:`matplotlib.axes.Axes.scatter`.\n\n    .. versionadded:: v0.12.0\nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other keyword arguments are passed to :class:`matplotlib.patches.Rectangle`,\n    superceded by those in `box_kws`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nviolinplot : A combination of boxplot and kernel density estimation.    \nboxplot : A traditional box-and-whisker plot with a similar API.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nNotes\n-----\n\nFor a more extensive explanation, you can read the paper that introduced the plot:\nhttps://vita.had.co.nz/papers/letter-value-plot.html\n\nExamples\n--------\n.. include:: ../docstrings/boxenplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "saturation": {
          "type": "any",
          "default": "0.75",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "width": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "gap": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "linewidth": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "linecolor": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "width_method": {
          "type": "any",
          "default": "exponential",
          "description": " "
        },
        "k_depth": {
          "type": "any",
          "default": "tukey",
          "description": " "
        },
        "outlier_prop": {
          "type": "any",
          "default": "0.007",
          "description": " "
        },
        "trust_alpha": {
          "type": "any",
          "default": "0.05",
          "description": " "
        },
        "showfliers": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "scale": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "box_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "flier_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "line_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "boxplot",
    "type": "function",
    "description": "Draw a box plot to show distributions with respect to categories.\n\nA box plot (or box-and-whisker plot) shows the distribution of quantitative\ndata in a way that facilitates comparisons between variables or across\nlevels of a categorical variable. The box shows the quartiles of the\ndataset while the whiskers extend to show the rest of the distribution,\nexcept for points that are determined to be \"outliers\" using a method\nthat is a function of the inter-quartile range.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsaturation : float\n    Proportion of the original saturation to draw fill colors in. Large\n    patches often look better with desaturated colors, but set this to\n    `1` if you want the colors to perfectly match the input values.    \nfill : bool\n    If True, use a solid patch. Otherwise, draw as line art.\n\n    .. versionadded:: v0.13.0    \ndodge : \"auto\" or bool\n    When hue mapping is used, whether elements should be narrowed and shifted along\n    the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n    orient variable is crossed with the categorical variable or `False` otherwise.\n\n    .. versionchanged:: 0.13.0\n\n        Added `\"auto\"` mode as a new default.    \nwidth : float\n    Width allotted to each element on the orient axis. When `native_scale=True`,\n    it is relative to the minimum distance between two values in the native scale.    \ngap : float\n    Shrink on the orient axis by this factor to add a gap between dodged elements.\n\n    .. versionadded:: 0.13.0    \nwhis : float or pair of floats\n    Paramater that controls whisker length. If scalar, whiskers are drawn\n    to the farthest datapoint within *whis * IQR* from the nearest hinge.\n    If a tuple, it is interpreted as percentiles that whiskers represent.\nlinecolor : color\n    Color to use for line elements, when `fill` is True.\n\n    .. versionadded:: v0.13.0    \nlinewidth : float\n    Width of the lines that frame the plot elements.    \nfliersize : float\n    Size of the markers used to indicate outlier observations.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other keyword arguments are passed through to\n    :meth:`matplotlib.axes.Axes.boxplot`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nviolinplot : A combination of boxplot and kernel density estimation.    \nstripplot : A scatterplot where one variable is categorical. Can be used\n            in conjunction with other plots to show each observation.    \nswarmplot : A categorical scatterplot where the points do not overlap. Can\n            be used with other plots to show each observation.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nExamples\n--------\n.. include:: ../docstrings/boxplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "saturation": {
          "type": "any",
          "default": "0.75",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "width": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "gap": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "whis": {
          "type": "any",
          "default": "1.5",
          "description": " "
        },
        "linecolor": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "linewidth": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "fliersize": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "catplot",
    "type": "function",
    "description": "Figure-level interface for drawing categorical plots onto a FacetGrid.\n\nThis function provides access to several axes-level functions that\nshow the relationship between a numerical and one or more categorical\nvariables using one of several visual representations. The `kind`\nparameter selects the underlying axes-level function to use.\n\nCategorical scatterplots:\n\n- :func:`stripplot` (with `kind=\"strip\"`; the default)\n- :func:`swarmplot` (with `kind=\"swarm\"`)\n\nCategorical distribution plots:\n\n- :func:`boxplot` (with `kind=\"box\"`)\n- :func:`violinplot` (with `kind=\"violin\"`)\n- :func:`boxenplot` (with `kind=\"boxen\"`)\n\nCategorical estimate plots:\n\n- :func:`pointplot` (with `kind=\"point\"`)\n- :func:`barplot` (with `kind=\"bar\"`)\n- :func:`countplot` (with `kind=\"count\"`)\n\nExtra keyword arguments are passed to the underlying function, so you\nshould refer to the documentation for each to see kind-specific options.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nAfter plotting, the :class:`FacetGrid` with the plot is returned and can\nbe used directly to tweak supporting plot details or add other layers.\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \nrow, col : names of variables in `data` or vector data\n    Categorical variables that will determine the faceting of the grid.\nkind : str\n    The kind of plot to draw, corresponds to the name of a categorical\n    axes-level plotting function. Options are: \"strip\", \"swarm\", \"box\", \"violin\",\n    \"boxen\", \"point\", \"bar\", or \"count\".\nestimator : string or callable that maps vector -> scalar\n    Statistical function to estimate within each categorical bin.\nerrorbar : string, (string, number) tuple, callable or None\n    Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n    with a method name and a level parameter, or a function that maps from a\n    vector to a (min, max) interval, or None to hide errorbar. See the\n    :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\n\n    .. versionadded:: v0.12.0\nn_boot : int\n    Number of bootstrap samples used to compute confidence intervals.\nseed : int, `numpy.random.Generator`, or `numpy.random.RandomState`\n    Seed or random number generator for reproducible bootstrapping.\nunits : name of variable in `data` or vector data\n    Identifier of sampling units; used by the errorbar function to\n    perform a multilevel bootstrap and account for repeated measures\nweights : name of variable in `data` or vector data\n    Data values or column used to compute weighted statistics.\n    Note that the use of weights may limit other statistical options.\n\n    .. versionadded:: v0.13.1    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \nrow_order, col_order : lists of strings\n    Order to organize the rows and/or columns of the grid in; otherwise the\n    orders are inferred from the data objects.\ncol_wrap : int\n    \"Wrap\" the column variable at this width, so that the column facets\n    span multiple rows. Incompatible with a ``row`` facet.    \nheight : scalar\n    Height (in inches) of each facet. See also: ``aspect``.    \naspect : scalar\n    Aspect ratio of each facet, so that ``aspect * height`` gives the width\n    of each facet in inches.    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nlegend_out : bool\n    If ``True``, the figure size will be extended, and the legend will be\n    drawn outside the plot on the center right.    \nshare{x,y} : bool, 'col', or 'row' optional\n    If true, the facets will share y axes across columns and/or x axes\n    across rows.    \nmargin_titles : bool\n    If ``True``, the titles for the row variable are drawn to the right of\n    the last column. This option is experimental and may not work in all\n    cases.    \nfacet_kws : dict\n    Dictionary of other keyword arguments to pass to :class:`FacetGrid`.\nkwargs : key, value pairings\n    Other keyword arguments are passed through to the underlying plotting\n    function.\n\nReturns\n-------\n:class:`FacetGrid`\n    Returns the :class:`FacetGrid` object with the plot on it for further\n    tweaking.\n\nExamples\n--------\n.. include:: ../docstrings/catplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kind": {
          "type": "any",
          "default": "strip",
          "description": " "
        },
        "estimator": {
          "type": "any",
          "default": "mean",
          "description": " "
        },
        "errorbar": {
          "type": "any",
          "default": "('ci', 95)",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_wrap": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "aspect": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "legend_out": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "sharex": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "sharey": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "margin_titles": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "facet_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "choose_colorbrewer_palette",
    "type": "function",
    "description": "Select a palette from the ColorBrewer set.\n\nThese palettes are built into matplotlib and can be used by name in\nmany seaborn functions, or by passing the object returned by this function.\n\nParameters\n----------\ndata_type : {'sequential', 'diverging', 'qualitative'}\n    This describes the kind of data you want to visualize. See the seaborn\n    color palette docs for more information about how to choose this value.\n    Note that you can pass substrings (e.g. 'q' for 'qualitative.\n\nas_cmap : bool\n    If True, the return value is a matplotlib colormap rather than a\n    list of discrete colors.\n\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\n    Object that can be passed to plotting functions.\n\nSee Also\n--------\ndark_palette : Create a sequential palette with dark low values.\nlight_palette : Create a sequential palette with bright low values.\ndiverging_palette : Create a diverging palette from selected colors.\ncubehelix_palette : Create a sequential palette or colormap using the\n                    cubehelix system.",
    "parameters": {
      "type": "object",
      "properties": {
        "data_type": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "data_type"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "choose_cubehelix_palette",
    "type": "function",
    "description": "Launch an interactive widget to create a sequential cubehelix palette.\n\nThis corresponds with the :func:`cubehelix_palette` function. This kind\nof palette is good for data that range between relatively uninteresting\nlow values and interesting high values. The cubehelix system allows the\npalette to have more hue variance across the range, which can be helpful\nfor distinguishing a wider range of values.\n\nRequires IPython 2+ and must be used in the notebook.\n\nParameters\n----------\nas_cmap : bool\n    If True, the return value is a matplotlib colormap rather than a\n    list of discrete colors.\n\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\n    Object that can be passed to plotting functions.\n\nSee Also\n--------\ncubehelix_palette : Create a sequential palette or colormap using the\n                    cubehelix system.",
    "parameters": {
      "type": "object",
      "properties": {
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "choose_dark_palette",
    "type": "function",
    "description": "Launch an interactive widget to create a dark sequential palette.\n\nThis corresponds with the :func:`dark_palette` function. This kind\nof palette is good for data that range between relatively uninteresting\nlow values and interesting high values.\n\nRequires IPython 2+ and must be used in the notebook.\n\nParameters\n----------\ninput : {'husl', 'hls', 'rgb'}\n    Color space for defining the seed value. Note that the default is\n    different than the default input for :func:`dark_palette`.\nas_cmap : bool\n    If True, the return value is a matplotlib colormap rather than a\n    list of discrete colors.\n\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\n    Object that can be passed to plotting functions.\n\nSee Also\n--------\ndark_palette : Create a sequential palette with dark low values.\nlight_palette : Create a sequential palette with bright low values.\ncubehelix_palette : Create a sequential palette or colormap using the\n                    cubehelix system.",
    "parameters": {
      "type": "object",
      "properties": {
        "input": {
          "type": "any",
          "default": "husl",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "choose_diverging_palette",
    "type": "function",
    "description": "Launch an interactive widget to choose a diverging color palette.\n\nThis corresponds with the :func:`diverging_palette` function. This kind\nof palette is good for data that range between interesting low values\nand interesting high values with a meaningful midpoint. (For example,\nchange scores relative to some baseline value).\n\nRequires IPython 2+ and must be used in the notebook.\n\nParameters\n----------\nas_cmap : bool\n    If True, the return value is a matplotlib colormap rather than a\n    list of discrete colors.\n\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\n    Object that can be passed to plotting functions.\n\nSee Also\n--------\ndiverging_palette : Create a diverging color palette or colormap.\nchoose_colorbrewer_palette : Interactively choose palettes from the\n                             colorbrewer set, including diverging palettes.",
    "parameters": {
      "type": "object",
      "properties": {
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "choose_light_palette",
    "type": "function",
    "description": "Launch an interactive widget to create a light sequential palette.\n\nThis corresponds with the :func:`light_palette` function. This kind\nof palette is good for data that range between relatively uninteresting\nlow values and interesting high values.\n\nRequires IPython 2+ and must be used in the notebook.\n\nParameters\n----------\ninput : {'husl', 'hls', 'rgb'}\n    Color space for defining the seed value. Note that the default is\n    different than the default input for :func:`light_palette`.\nas_cmap : bool\n    If True, the return value is a matplotlib colormap rather than a\n    list of discrete colors.\n\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\n    Object that can be passed to plotting functions.\n\nSee Also\n--------\nlight_palette : Create a sequential palette with bright low values.\ndark_palette : Create a sequential palette with dark low values.\ncubehelix_palette : Create a sequential palette or colormap using the\n                    cubehelix system.",
    "parameters": {
      "type": "object",
      "properties": {
        "input": {
          "type": "any",
          "default": "husl",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "clustermap",
    "type": "function",
    "description": "Plot a matrix dataset as a hierarchically-clustered heatmap.\n\nThis function requires scipy to be available.\n\nParameters\n----------\ndata : 2D array-like\n    Rectangular data for clustering. Cannot contain NAs.\npivot_kws : dict, optional\n    If `data` is a tidy dataframe, can provide keyword arguments for\n    pivot to create a rectangular dataframe.\nmethod : str, optional\n    Linkage method to use for calculating clusters. See\n    :func:`scipy.cluster.hierarchy.linkage` documentation for more\n    information.\nmetric : str, optional\n    Distance metric to use for the data. See\n    :func:`scipy.spatial.distance.pdist` documentation for more options.\n    To use different metrics (or methods) for rows and columns, you may\n    construct each linkage matrix yourself and provide them as\n    `{row,col}_linkage`.\nz_score : int or None, optional\n    Either 0 (rows) or 1 (columns). Whether or not to calculate z-scores\n    for the rows or the columns. Z scores are: z = (x - mean)/std, so\n    values in each row (column) will get the mean of the row (column)\n    subtracted, then divided by the standard deviation of the row (column).\n    This ensures that each row (column) has mean of 0 and variance of 1.\nstandard_scale : int or None, optional\n    Either 0 (rows) or 1 (columns). Whether or not to standardize that\n    dimension, meaning for each row or column, subtract the minimum and\n    divide each by its maximum.\nfigsize : tuple of (width, height), optional\n    Overall size of the figure.\ncbar_kws : dict, optional\n    Keyword arguments to pass to `cbar_kws` in :func:`heatmap`, e.g. to\n    add a label to the colorbar.\n{row,col}_cluster : bool, optional\n    If ``True``, cluster the {rows, columns}.\n{row,col}_linkage : :class:`numpy.ndarray`, optional\n    Precomputed linkage matrix for the rows or columns. See\n    :func:`scipy.cluster.hierarchy.linkage` for specific formats.\n{row,col}_colors : list-like or pandas DataFrame/Series, optional\n    List of colors to label for either the rows or columns. Useful to evaluate\n    whether samples within a group are clustered together. Can use nested lists or\n    DataFrame for multiple color levels of labeling. If given as a\n    :class:`pandas.DataFrame` or :class:`pandas.Series`, labels for the colors are\n    extracted from the DataFrames column names or from the name of the Series.\n    DataFrame/Series colors are also matched to the data by their index, ensuring\n    colors are drawn in the correct order.\nmask : bool array or DataFrame, optional\n    If passed, data will not be shown in cells where `mask` is True.\n    Cells with missing values are automatically masked. Only used for\n    visualizing, not for calculating.\n{dendrogram,colors}_ratio : float, or pair of floats, optional\n    Proportion of the figure size devoted to the two marginal elements. If\n    a pair is given, they correspond to (row, col) ratios.\ncbar_pos : tuple of (left, bottom, width, height), optional\n    Position of the colorbar axes in the figure. Setting to ``None`` will\n    disable the colorbar.\ntree_kws : dict, optional\n    Parameters for the :class:`matplotlib.collections.LineCollection`\n    that is used to plot the lines of the dendrogram tree.\nkwargs : other keyword arguments\n    All other keyword arguments are passed to :func:`heatmap`.\n\nReturns\n-------\n:class:`ClusterGrid`\n    A :class:`ClusterGrid` instance.\n\nSee Also\n--------\nheatmap : Plot rectangular data as a color-encoded matrix.\n\nNotes\n-----\nThe returned object has a ``savefig`` method that should be used if you\nwant to save the figure object without clipping the dendrograms.\n\nTo access the reordered row indices, use:\n``clustergrid.dendrogram_row.reordered_ind``\n\nColumn indices, use:\n``clustergrid.dendrogram_col.reordered_ind``\n\nExamples\n--------\n\n.. include:: ../docstrings/clustermap.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "pivot_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "method": {
          "type": "any",
          "default": "average",
          "description": " "
        },
        "metric": {
          "type": "any",
          "default": "euclidean",
          "description": " "
        },
        "z_score": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "standard_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "figsize": {
          "type": "any",
          "default": "(10, 10)",
          "description": " "
        },
        "cbar_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_cluster": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "col_cluster": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "row_linkage": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_linkage": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_colors": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_colors": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "mask": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "dendrogram_ratio": {
          "type": "any",
          "default": "0.2",
          "description": " "
        },
        "colors_ratio": {
          "type": "any",
          "default": "0.03",
          "description": " "
        },
        "cbar_pos": {
          "type": "any",
          "default": "(0.02, 0.8, 0.05, 0.18)",
          "description": " "
        },
        "tree_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "data",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "color_palette",
    "type": "function",
    "description": "Return a list of colors or continuous colormap defining a palette.\n\nPossible ``palette`` values include:\n    - Name of a seaborn palette (deep, muted, bright, pastel, dark, colorblind)\n    - Name of matplotlib colormap\n    - 'husl' or 'hls'\n    - 'ch:<cubehelix arguments>'\n    - 'light:<color>', 'dark:<color>', 'blend:<color>,<color>',\n    - A sequence of colors in any format matplotlib accepts\n\nCalling this function with ``palette=None`` will return the current\nmatplotlib color cycle.\n\nThis function can also be used in a ``with`` statement to temporarily\nset the color cycle for a plot or set of plots.\n\nSee the :ref:`tutorial <palette_tutorial>` for more information.\n\nParameters\n----------\npalette : None, string, or sequence, optional\n    Name of palette or None to return current palette. If a sequence, input\n    colors are used but possibly cycled and desaturated.\nn_colors : int, optional\n    Number of colors in the palette. If ``None``, the default will depend\n    on how ``palette`` is specified. Named palettes default to 6 colors,\n    but grabbing the current palette or passing in a list of colors will\n    not change the number of colors unless this is specified. Asking for\n    more colors than exist in the palette will cause it to cycle. Ignored\n    when ``as_cmap`` is True.\ndesat : float, optional\n    Proportion to desaturate each color by.\nas_cmap : bool\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\n\nReturns\n-------\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\nset_palette : Set the default color cycle for all plots.\nset_color_codes : Reassign color codes like ``\"b\"``, ``\"g\"``, etc. to\n                  colors from one of the seaborn palettes.\n\nExamples\n--------\n\n.. include:: ../docstrings/color_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "desat": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "countplot",
    "type": "function",
    "description": "Show the counts of observations in each categorical bin using bars.\n\nA count plot can be thought of as a histogram across a categorical, instead\nof quantitative, variable. The basic API and options are identical to those\nfor :func:`barplot`, so you can compare counts across nested variables.\n\nNote that :func:`histplot` function offers similar functionality with additional\nfeatures (e.g. bar stacking), although its default behavior is somewhat different.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsaturation : float\n    Proportion of the original saturation to draw fill colors in. Large\n    patches often look better with desaturated colors, but set this to\n    `1` if you want the colors to perfectly match the input values.    \nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nstat : {'count', 'percent', 'proportion', 'probability'}\n    Statistic to compute; when not `'count'`, bar heights will be normalized so that\n    they sum to 100 (for `'percent'`) or 1 (otherwise) across the plot.\n\n    .. versionadded:: v0.13.0\nwidth : float\n    Width allotted to each element on the orient axis. When `native_scale=True`,\n    it is relative to the minimum distance between two values in the native scale.    \ndodge : \"auto\" or bool\n    When hue mapping is used, whether elements should be narrowed and shifted along\n    the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n    orient variable is crossed with the categorical variable or `False` otherwise.\n\n    .. versionchanged:: 0.13.0\n\n        Added `\"auto\"` mode as a new default.    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other parameters are passed through to :class:`matplotlib.patches.Rectangle`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nhistplot : Bin and count observations with additional options.\nbarplot : Show point estimates and confidence intervals using bars.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nExamples\n--------\n.. include:: ../docstrings/countplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "saturation": {
          "type": "any",
          "default": "0.75",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "stat": {
          "type": "any",
          "default": "count",
          "description": " "
        },
        "width": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "gap": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "crayon_palette",
    "type": "function",
    "description": "Make a palette with color names from Crayola crayons.\n\nColors are taken from here:\nhttps://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors\n\nThis is just a simple wrapper around the `seaborn.crayons` dictionary.\n\nParameters\n----------\ncolors : list of strings\n    List of keys in the `seaborn.crayons` dictionary.\n\nReturns\n-------\npalette\n    A list of colors as RGB tuples.\n\nSee Also\n--------\nxkcd_palette : Make a palette with named colors from the XKCD color survey.",
    "parameters": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "colors"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "cubehelix_palette",
    "type": "function",
    "description": "Make a sequential palette from the cubehelix system.\n\nThis produces a colormap with linearly-decreasing (or increasing)\nbrightness. That means that information will be preserved if printed to\nblack and white or viewed by someone who is colorblind.  \"cubehelix\" is\nalso available as a matplotlib-based palette, but this function gives the\nuser more control over the look of the palette and has a different set of\ndefaults.\n\nIn addition to using this function, it is also possible to generate a\ncubehelix palette generally in seaborn using a string starting with\n`ch:` and containing other parameters (e.g. `\"ch:s=.25,r=-.5\"`).\n\nParameters\n----------\nn_colors : int\n    Number of colors in the palette.\nstart : float, 0 <= start <= 3\n    The hue value at the start of the helix.\nrot : float\n    Rotations around the hue wheel over the range of the palette.\ngamma : float 0 <= gamma\n    Nonlinearity to emphasize dark (gamma < 1) or light (gamma > 1) colors.\nhue : float, 0 <= hue <= 1\n    Saturation of the colors.\ndark : float 0 <= dark <= 1\n    Intensity of the darkest color in the palette.\nlight : float 0 <= light <= 1\n    Intensity of the lightest color in the palette.\nreverse : bool\n    If True, the palette will go from dark to light.\nas_cmap : bool\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\nchoose_cubehelix_palette : Launch an interactive widget to select cubehelix\n                           palette parameters.\ndark_palette : Create a sequential palette with dark low values.\nlight_palette : Create a sequential palette with bright low values.\n\nReferences\n----------\nGreen, D. A. (2011). \"A colour scheme for the display of astronomical\nintensity images\". Bulletin of the Astromical Society of India, Vol. 39,\np. 289-295.\n\nExamples\n--------\n.. include:: ../docstrings/cubehelix_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "start": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "rot": {
          "type": "any",
          "default": "0.4",
          "description": " "
        },
        "gamma": {
          "type": "any",
          "default": "1.0",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "light": {
          "type": "any",
          "default": "0.85",
          "description": " "
        },
        "dark": {
          "type": "any",
          "default": "0.15",
          "description": " "
        },
        "reverse": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "dark_palette",
    "type": "function",
    "description": "Make a sequential palette that blends from dark to ``color``.\n\nThis kind of palette is good for data that range between relatively\nuninteresting low values and interesting high values.\n\nThe ``color`` parameter can be specified in a number of ways, including\nall options for defining a color in matplotlib and several additional\ncolor spaces that are handled by seaborn. You can also use the database\nof named colors from the XKCD color survey.\n\nIf you are using the IPython notebook, you can also choose this palette\ninteractively with the :func:`choose_dark_palette` function.\n\nParameters\n----------\ncolor : base color for high values\n    hex, rgb-tuple, or html color name\nn_colors : int, optional\n    number of colors in the palette\nreverse : bool, optional\n    if True, reverse the direction of the blend\nas_cmap : bool, optional\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\ninput : {'rgb', 'hls', 'husl', xkcd'}\n    Color space to interpret the input color. The first three options\n    apply to tuple inputs and the latter applies to string inputs.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\nlight_palette : Create a sequential palette with bright low values.\ndiverging_palette : Create a diverging palette with two colors.\n\nExamples\n--------\n.. include:: ../docstrings/dark_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "reverse": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "input": {
          "type": "any",
          "default": "rgb",
          "description": " "
        }
      },
      "required": [
        "color"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "desaturate",
    "type": "function",
    "description": "Decrease the saturation channel of a color by some percent.\n\nParameters\n----------\ncolor : matplotlib color\n    hex, rgb-tuple, or html color name\nprop : float\n    saturation channel of color will be multiplied by this value\n\nReturns\n-------\nnew_color : rgb tuple\n    desaturated color code in RGB tuple representation",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "prop": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "color",
        "prop"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "despine",
    "type": "function",
    "description": "Remove the top and right spines from plot(s).\n\nfig : matplotlib figure, optional\n    Figure to despine all axes of, defaults to the current figure.\nax : matplotlib axes, optional\n    Specific axes object to despine. Ignored if fig is provided.\ntop, right, left, bottom : boolean, optional\n    If True, remove that spine.\noffset : int or dict, optional\n    Absolute distance, in points, spines should be moved away\n    from the axes (negative values move spines inward). A single value\n    applies to all spines; a dict can be used to set offset values per\n    side.\ntrim : bool, optional\n    If True, limit spines to the smallest and largest major tick\n    on each non-despined axis.\n\nReturns\n-------\nNone",
    "parameters": {
      "type": "object",
      "properties": {
        "fig": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "top": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "right": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "left": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "bottom": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "offset": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "trim": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "displot",
    "type": "function",
    "description": "Figure-level interface for drawing distribution plots onto a FacetGrid.\n\nThis function provides access to several approaches for visualizing the\nunivariate or bivariate distribution of data, including subsets of data\ndefined by semantic mapping and faceting across multiple subplots. The\n``kind`` parameter selects the approach to use:\n\n- :func:`histplot` (with ``kind=\"hist\"``; the default)\n- :func:`kdeplot` (with ``kind=\"kde\"``)\n- :func:`ecdfplot` (with ``kind=\"ecdf\"``; univariate-only)\n\nAdditionally, a :func:`rugplot` can be added to any kind of plot to show\nindividual observations.\n\nExtra keyword arguments are passed to the underlying function, so you should\nrefer to the documentation for each to understand the complete set of options\nfor making plots with this interface.\n\nSee the :doc:`distribution plots tutorial <../tutorial/distributions>` for a more\nin-depth discussion of the relative strengths and weaknesses of each approach.\nThe distinction between figure-level and axes-level functions is explained\nfurther in the :doc:`user guide <../tutorial/function_overview>`.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nrow, col : vectors or keys in ``data``\n    Variables that define subsets to plot on different facets.    \nweights : vector or key in ``data``\n    Observation weights used for computing the distribution function.\nkind : {\"hist\", \"kde\", \"ecdf\"}\n    Approach for visualizing the data. Selects the underlying plotting function\n    and determines the additional set of valid parameters.\nrug : bool\n    If True, show each observation with marginal ticks (as in :func:`rugplot`).\nrug_kws : dict\n    Parameters to control the appearance of the rug plot.\nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\nlegend : bool\n    If False, suppress the legend for semantic variables.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Single color specification for when hue mapping is not used. Otherwise, the\n    plot will try to hook into the matplotlib property cycle.\ncol_wrap : int\n    \"Wrap\" the column variable at this width, so that the column facets\n    span multiple rows. Incompatible with a ``row`` facet.    \n{row,col}_order : vector of strings\n    Specify the order in which levels of the ``row`` and/or ``col`` variables\n    appear in the grid of subplots.    \nheight : scalar\n    Height (in inches) of each facet. See also: ``aspect``.    \naspect : scalar\n    Aspect ratio of each facet, so that ``aspect * height`` gives the width\n    of each facet in inches.    \nfacet_kws : dict\n    Additional parameters passed to :class:`FacetGrid`.\n\nkwargs\n    Other keyword arguments are documented with the relevant axes-level function:\n\n    - :func:`histplot` (with ``kind=\"hist\"``)\n    - :func:`kdeplot` (with ``kind=\"kde\"``)\n    - :func:`ecdfplot` (with ``kind=\"ecdf\"``)\n\nReturns\n-------\n:class:`FacetGrid`\n    An object managing one or more subplots that correspond to conditional data\n    subsets with convenient methods for batch-setting of axes attributes.\n\nSee Also\n--------\nhistplot : Plot a histogram of binned counts with optional normalization or smoothing.\nkdeplot : Plot univariate or bivariate distributions using kernel density estimation.\nrugplot : Plot a tick at each observation value along the x and/or y axes.\necdfplot : Plot empirical cumulative distribution functions.\njointplot : Draw a bivariate plot with univariate marginal distributions.\n\nExamples\n--------\n\nSee the API documentation for the axes-level functions for more details\nabout the breadth of options available for each plot kind.\n\n.. include:: ../docstrings/displot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kind": {
          "type": "any",
          "default": "hist",
          "description": " "
        },
        "rug": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "rug_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_wrap": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "aspect": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "facet_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "distplot",
    "type": "function",
    "description": "DEPRECATED\n\nThis function has been deprecated and will be removed in seaborn v0.14.0.\nIt has been replaced by :func:`histplot` and :func:`displot`, two functions\nwith a modern API and many more capabilities.\n\nFor a guide to updating, please see this notebook:\n\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751",
    "parameters": {
      "type": "object",
      "properties": {
        "a": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "bins": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hist": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "kde": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "rug": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "fit": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hist_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kde_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "rug_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "fit_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "vertical": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "norm_hist": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "axlabel": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "label": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "diverging_palette",
    "type": "function",
    "description": "Make a diverging palette between two HUSL colors.\n\nIf you are using the IPython notebook, you can also choose this palette\ninteractively with the :func:`choose_diverging_palette` function.\n\nParameters\n----------\nh_neg, h_pos : float in [0, 359]\n    Anchor hues for negative and positive extents of the map.\ns : float in [0, 100], optional\n    Anchor saturation for both extents of the map.\nl : float in [0, 100], optional\n    Anchor lightness for both extents of the map.\nsep : int, optional\n    Size of the intermediate region.\nn : int, optional\n    Number of colors in the palette (if not returning a cmap)\ncenter : {\"light\", \"dark\"}, optional\n    Whether the center of the palette is light or dark\nas_cmap : bool, optional\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\ndark_palette : Create a sequential palette with dark values.\nlight_palette : Create a sequential palette with light values.\n\nExamples\n--------\n.. include: ../docstrings/diverging_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "h_neg": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "h_pos": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "s": {
          "type": "any",
          "default": "75",
          "description": " "
        },
        "l": {
          "type": "any",
          "default": "50",
          "description": " "
        },
        "sep": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "n": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "center": {
          "type": "any",
          "default": "light",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "h_neg",
        "h_pos"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "dogplot",
    "type": "function",
    "description": "Who's a good boy?",
    "parameters": {
      "type": "object",
      "properties": {
        "_": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "__": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "_",
        "__"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "ecdfplot",
    "type": "function",
    "description": "Plot empirical cumulative distribution functions.\n\nAn ECDF represents the proportion or count of observations falling below each\nunique value in a dataset. Compared to a histogram or density plot, it has the\nadvantage that each observation is visualized directly, meaning that there are\nno binning or smoothing parameters that need to be adjusted. It also aids direct\ncomparisons between multiple distributions. A downside is that the relationship\nbetween the appearance of the plot and the basic properties of the distribution\n(such as its central tendency, variance, and the presence of any bimodality)\nmay not be as intuitive.\n\nMore information is provided in the :ref:`user guide <tutorial_ecdf>`.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nweights : vector or key in ``data``\n    If provided, weight the contribution of the corresponding data points\n    towards the cumulative distribution using these values.\nstat : {{\"proportion\", \"percent\", \"count\"}}\n    Distribution statistic to compute.\ncomplementary : bool\n    If True, use the complementary CDF (1 - CDF)\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\nlegend : bool\n    If False, suppress the legend for semantic variables.\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs\n    Other keyword arguments are passed to :meth:`matplotlib.axes.Axes.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nSee Also\n--------\ndisplot : Figure-level interface to distribution plot functions.\nhistplot : Plot a histogram of binned counts with optional normalization or smoothing.\nkdeplot : Plot univariate or bivariate distributions using kernel density estimation.\nrugplot : Plot a tick at each observation value along the x and/or y axes.\n\nExamples\n--------\n\n.. include:: ../docstrings/ecdfplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "stat": {
          "type": "any",
          "default": "proportion",
          "description": " "
        },
        "complementary": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_data_home",
    "type": "function",
    "description": "Return a path to the cache directory for example datasets.\n\nThis directory is used by :func:`load_dataset`.\n\nIf the ``data_home`` argument is not provided, it will use a directory\nspecified by the `SEABORN_DATA` environment variable (if it exists)\nor otherwise default to an OS-appropriate user cache location.",
    "parameters": {
      "type": "object",
      "properties": {
        "data_home": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_dataset_names",
    "type": "function",
    "description": "Report available example datasets, useful for reporting issues.\n\nRequires an internet connection.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "heatmap",
    "type": "function",
    "description": "Plot rectangular data as a color-encoded matrix.\n\nThis is an Axes-level function and will draw the heatmap into the\ncurrently-active Axes if none is provided to the ``ax`` argument.  Part of\nthis Axes space will be taken and used to plot a colormap, unless ``cbar``\nis False or a separate Axes is provided to ``cbar_ax``.\n\nParameters\n----------\ndata : rectangular dataset\n    2D dataset that can be coerced into an ndarray. If a Pandas DataFrame\n    is provided, the index/column information will be used to label the\n    columns and rows.\nvmin, vmax : floats, optional\n    Values to anchor the colormap, otherwise they are inferred from the\n    data and other keyword arguments.\ncmap : matplotlib colormap name or object, or list of colors, optional\n    The mapping from data values to color space. If not provided, the\n    default will depend on whether ``center`` is set.\ncenter : float, optional\n    The value at which to center the colormap when plotting divergent data.\n    Using this parameter will change the default ``cmap`` if none is\n    specified.\nrobust : bool, optional\n    If True and ``vmin`` or ``vmax`` are absent, the colormap range is\n    computed with robust quantiles instead of the extreme values.\nannot : bool or rectangular dataset, optional\n    If True, write the data value in each cell. If an array-like with the\n    same shape as ``data``, then use this to annotate the heatmap instead\n    of the data. Note that DataFrames will match on position, not index.\nfmt : str, optional\n    String formatting code to use when adding annotations.\nannot_kws : dict of key, value mappings, optional\n    Keyword arguments for :meth:`matplotlib.axes.Axes.text` when ``annot``\n    is True.\nlinewidths : float, optional\n    Width of the lines that will divide each cell.\nlinecolor : color, optional\n    Color of the lines that will divide each cell.\ncbar : bool, optional\n    Whether to draw a colorbar.\ncbar_kws : dict of key, value mappings, optional\n    Keyword arguments for :meth:`matplotlib.figure.Figure.colorbar`.\ncbar_ax : matplotlib Axes, optional\n    Axes in which to draw the colorbar, otherwise take space from the\n    main Axes.\nsquare : bool, optional\n    If True, set the Axes aspect to \"equal\" so each cell will be\n    square-shaped.\nxticklabels, yticklabels : \"auto\", bool, list-like, or int, optional\n    If True, plot the column names of the dataframe. If False, don't plot\n    the column names. If list-like, plot these alternate labels as the\n    xticklabels. If an integer, use the column names but plot only every\n    n label. If \"auto\", try to densely plot non-overlapping labels.\nmask : bool array or DataFrame, optional\n    If passed, data will not be shown in cells where ``mask`` is True.\n    Cells with missing values are automatically masked.\nax : matplotlib Axes, optional\n    Axes in which to draw the plot, otherwise use the currently-active\n    Axes.\nkwargs : other keyword arguments\n    All other keyword arguments are passed to\n    :meth:`matplotlib.axes.Axes.pcolormesh`.\n\nReturns\n-------\nax : matplotlib Axes\n    Axes object with the heatmap.\n\nSee Also\n--------\nclustermap : Plot a matrix using hierarchical clustering to arrange the\n             rows and columns.\n\nExamples\n--------\n\n.. include:: ../docstrings/heatmap.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "vmin": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "vmax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cmap": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "center": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "robust": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "annot": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "fmt": {
          "type": "any",
          "default": ".2g",
          "description": " "
        },
        "annot_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "linewidths": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "linecolor": {
          "type": "any",
          "default": "white",
          "description": " "
        },
        "cbar": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "cbar_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cbar_ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "square": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "xticklabels": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "yticklabels": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "mask": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "data",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "histplot",
    "type": "function",
    "description": "Plot univariate or bivariate histograms to show distributions of datasets.\n\nA histogram is a classic visualization tool that represents the distribution\nof one or more variables by counting the number of observations that fall within\ndiscrete bins.\n\nThis function can normalize the statistic computed within each bin to estimate\nfrequency, density or probability mass, and it can add a smooth curve obtained\nusing a kernel density estimate, similar to :func:`kdeplot`.\n\nMore information is provided in the :ref:`user guide <tutorial_hist>`.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nweights : vector or key in ``data``\n    If provided, weight the contribution of the corresponding data points\n    towards the count in each bin by these factors.\nstat : str\n    Aggregate statistic to compute in each bin.\n    \n    - `count`: show the number of observations in each bin\n    - `frequency`: show the number of observations divided by the bin width\n    - `probability` or `proportion`: normalize such that bar heights sum to 1\n    - `percent`: normalize such that bar heights sum to 100\n    - `density`: normalize such that the total area of the histogram equals 1\nbins : str, number, vector, or a pair of such values\n    Generic bin parameter that can be the name of a reference rule,\n    the number of bins, or the breaks of the bins.\n    Passed to :func:`numpy.histogram_bin_edges`.\nbinwidth : number or pair of numbers\n    Width of each bin, overrides ``bins`` but can be used with\n    ``binrange``.\nbinrange : pair of numbers or a pair of pairs\n    Lowest and highest value for bin edges; can be used either\n    with ``bins`` or ``binwidth``. Defaults to data extremes.\ndiscrete : bool\n    If True, default to ``binwidth=1`` and draw the bars so that they are\n    centered on their corresponding data points. This avoids \"gaps\" that may\n    otherwise appear when using discrete (integer) data.\ncumulative : bool\n    If True, plot the cumulative counts as bins increase.\ncommon_bins : bool\n    If True, use the same bins when semantic variables produce multiple\n    plots. If using a reference rule to determine the bins, it will be computed\n    with the full dataset.\ncommon_norm : bool\n    If True and using a normalized statistic, the normalization will apply over\n    the full dataset. Otherwise, normalize each histogram independently.\nmultiple : {\"layer\", \"dodge\", \"stack\", \"fill\"}\n    Approach to resolving multiple elements when semantic mapping creates subsets.\n    Only relevant with univariate data.\nelement : {\"bars\", \"step\", \"poly\"}\n    Visual representation of the histogram statistic.\n    Only relevant with univariate data.\nfill : bool\n    If True, fill in the space under the histogram.\n    Only relevant with univariate data.\nshrink : number\n    Scale the width of each bar relative to the binwidth by this factor.\n    Only relevant with univariate data.\nkde : bool\n    If True, compute a kernel density estimate to smooth the distribution\n    and show on the plot as (one or more) line(s).\n    Only relevant with univariate data.\nkde_kws : dict\n    Parameters that control the KDE computation, as in :func:`kdeplot`.\nline_kws : dict\n    Parameters that control the KDE visualization, passed to\n    :meth:`matplotlib.axes.Axes.plot`.\nthresh : number or None\n    Cells with a statistic less than or equal to this value will be transparent.\n    Only relevant with bivariate data.\npthresh : number or None\n    Like ``thresh``, but a value in [0, 1] such that cells with aggregate counts\n    (or other statistics, when used) up to this proportion of the total will be\n    transparent.\npmax : number or None\n    A value in [0, 1] that sets that saturation point for the colormap at a value\n    such that cells below constitute this proportion of the total count (or\n    other statistic, when used).\ncbar : bool\n    If True, add a colorbar to annotate the color mapping in a bivariate plot.\n    Note: Does not currently support plots with a ``hue`` variable well.\ncbar_ax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the colorbar.\ncbar_kws : dict\n    Additional parameters passed to :meth:`matplotlib.figure.Figure.colorbar`.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Single color specification for when hue mapping is not used. Otherwise, the\n    plot will try to hook into the matplotlib property cycle.\nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\nlegend : bool\n    If False, suppress the legend for semantic variables.\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs\n    Other keyword arguments are passed to one of the following matplotlib\n    functions:\n\n    - :meth:`matplotlib.axes.Axes.bar` (univariate, element=\"bars\")\n    - :meth:`matplotlib.axes.Axes.fill_between` (univariate, other element, fill=True)\n    - :meth:`matplotlib.axes.Axes.plot` (univariate, other element, fill=False)\n    - :meth:`matplotlib.axes.Axes.pcolormesh` (bivariate)\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nSee Also\n--------\ndisplot : Figure-level interface to distribution plot functions.\nkdeplot : Plot univariate or bivariate distributions using kernel density estimation.\nrugplot : Plot a tick at each observation value along the x and/or y axes.\necdfplot : Plot empirical cumulative distribution functions.\njointplot : Draw a bivariate plot with univariate marginal distributions.\n\nNotes\n-----\n\nThe choice of bins for computing and plotting a histogram can exert\nsubstantial influence on the insights that one is able to draw from the\nvisualization. If the bins are too large, they may erase important features.\nOn the other hand, bins that are too small may be dominated by random\nvariability, obscuring the shape of the true underlying distribution. The\ndefault bin size is determined using a reference rule that depends on the\nsample size and variance. This works well in many cases, (i.e., with\n\"well-behaved\" data) but it fails in others. It is always a good to try\ndifferent bin sizes to be sure that you are not missing something important.\nThis function allows you to specify bins in several different ways, such as\nby setting the total number of bins to use, the width of each bin, or the\nspecific locations where the bins should break.\n\nExamples\n--------\n\n.. include:: ../docstrings/histplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "stat": {
          "type": "any",
          "default": "count",
          "description": " "
        },
        "bins": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "binwidth": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "binrange": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "discrete": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cumulative": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "common_bins": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "common_norm": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "multiple": {
          "type": "any",
          "default": "layer",
          "description": " "
        },
        "element": {
          "type": "any",
          "default": "bars",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "shrink": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "kde": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kde_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "line_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "thresh": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "pthresh": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "pmax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cbar": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "cbar_ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cbar_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "hls_palette",
    "type": "function",
    "description": "Return hues with constant lightness and saturation in the HLS system.\n\nThe hues are evenly sampled along a circular path. The resulting palette will be\nappropriate for categorical or cyclical data.\n\nThe `h`, `l`, and `s` values should be between 0 and 1.\n\n.. note::\n    While the separation of the resulting colors will be mathematically\n    constant, the HLS system does not construct a perceptually-uniform space,\n    so their apparent intensity will vary.\n\nParameters\n----------\nn_colors : int\n    Number of colors in the palette.\nh : float\n    The value of the first hue.\nl : float\n    The lightness value.\ns : float\n    The saturation intensity.\nas_cmap : bool\n    If True, return a matplotlib colormap object.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\nhusl_palette : Make a palette using evenly spaced hues in the HUSL system.\n\nExamples\n--------\n.. include:: ../docstrings/hls_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "h": {
          "type": "any",
          "default": "0.01",
          "description": " "
        },
        "l": {
          "type": "any",
          "default": "0.6",
          "description": " "
        },
        "s": {
          "type": "any",
          "default": "0.65",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "husl_palette",
    "type": "function",
    "description": "Return hues with constant lightness and saturation in the HUSL system.\n\nThe hues are evenly sampled along a circular path. The resulting palette will be\nappropriate for categorical or cyclical data.\n\nThe `h`, `l`, and `s` values should be between 0 and 1.\n\nThis function is similar to :func:`hls_palette`, but it uses a nonlinear color\nspace that is more perceptually uniform.\n\nParameters\n----------\nn_colors : int\n    Number of colors in the palette.\nh : float\n    The value of the first hue.\nl : float\n    The lightness value.\ns : float\n    The saturation intensity.\nas_cmap : bool\n    If True, return a matplotlib colormap object.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\nhls_palette : Make a palette using evenly spaced hues in the HSL system.\n\nExamples\n--------\n.. include:: ../docstrings/husl_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "h": {
          "type": "any",
          "default": "0.01",
          "description": " "
        },
        "s": {
          "type": "any",
          "default": "0.9",
          "description": " "
        },
        "l": {
          "type": "any",
          "default": "0.65",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "jointplot",
    "type": "function",
    "description": "Draw a plot of two variables with bivariate and univariate graphs.\n\nThis function provides a convenient interface to the :class:`JointGrid`\nclass, with several canned plot kinds. This is intended to be a fairly\nlightweight wrapper; if you need more flexibility, you should use\n:class:`JointGrid` directly.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nkind : { \"scatter\" | \"kde\" | \"hist\" | \"hex\" | \"reg\" | \"resid\" }\n    Kind of plot to draw. See the examples for references to the underlying functions.\nheight : numeric\n    Size of the figure (it will be square).\nratio : numeric\n    Ratio of joint axes height to marginal axes height.\nspace : numeric\n    Space between the joint and marginal axes\ndropna : bool\n    If True, remove observations that are missing from ``x`` and ``y``.\n{x, y}lim : pairs of numbers\n    Axis limits to set before plotting.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Single color specification for when hue mapping is not used. Otherwise, the\n    plot will try to hook into the matplotlib property cycle.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nmarginal_ticks : bool\n    If False, suppress ticks on the count/density axis of the marginal plots.\n{joint, marginal}_kws : dicts\n    Additional keyword arguments for the plot components.\nkwargs\n    Additional keyword arguments are passed to the function used to\n    draw the plot on the joint Axes, superseding items in the\n    ``joint_kws`` dictionary.\n\nReturns\n-------\n:class:`JointGrid`\n    An object managing multiple subplots that correspond to joint and marginal axes\n    for plotting a bivariate relationship or distribution.\n\nSee Also\n--------\nJointGrid : Set up a figure with joint and marginal views on bivariate data.\nPairGrid : Set up a figure with joint and marginal views on multiple variables.\njointplot : Draw multiple bivariate plots with univariate marginal distributions.\n\nExamples\n--------\n\n.. include:: ../docstrings/jointplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kind": {
          "type": "any",
          "default": "scatter",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "ratio": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "space": {
          "type": "any",
          "default": "0.2",
          "description": " "
        },
        "dropna": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "xlim": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ylim": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "marginal_ticks": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "joint_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "marginal_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "kdeplot",
    "type": "function",
    "description": "Plot univariate or bivariate distributions using kernel density estimation.\n\nA kernel density estimate (KDE) plot is a method for visualizing the\ndistribution of observations in a dataset, analogous to a histogram. KDE\nrepresents the data using a continuous probability density curve in one or\nmore dimensions.\n\nThe approach is explained further in the :ref:`user guide <tutorial_kde>`.\n\nRelative to a histogram, KDE can produce a plot that is less cluttered and\nmore interpretable, especially when drawing multiple distributions. But it\nhas the potential to introduce distortions if the underlying distribution is\nbounded or not smooth. Like a histogram, the quality of the representation\nalso depends on the selection of good smoothing parameters.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nweights : vector or key in ``data``\n    If provided, weight the kernel density estimation using these values.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\n    Single color specification for when hue mapping is not used. Otherwise, the\n    plot will try to hook into the matplotlib property cycle.\nfill : bool or None\n    If True, fill in the area under univariate density curves or between\n    bivariate contours. If None, the default depends on ``multiple``.\nmultiple : {{\"layer\", \"stack\", \"fill\"}}\n    Method for drawing multiple elements when semantic mapping creates subsets.\n    Only relevant with univariate data.\ncommon_norm : bool\n    If True, scale each conditional density by the number of observations\n    such that the total area under all densities sums to 1. Otherwise,\n    normalize each density independently.\ncommon_grid : bool\n    If True, use the same evaluation grid for each kernel density estimate.\n    Only relevant with univariate data.\ncumulative : bool, optional\n    If True, estimate a cumulative distribution function. Requires scipy.\nbw_method : string, scalar, or callable, optional\n    Method for determining the smoothing bandwidth to use; passed to\n    :class:`scipy.stats.gaussian_kde`.\nbw_adjust : number, optional\n    Factor that multiplicatively scales the value chosen using\n    ``bw_method``. Increasing will make the curve smoother. See Notes.\nwarn_singular : bool\n    If True, issue a warning when trying to estimate the density of data\n    with zero variance.\nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\nlevels : int or vector\n    Number of contour levels or values to draw contours at. A vector argument\n    must have increasing values in [0, 1]. Levels correspond to iso-proportions\n    of the density: e.g., 20% of the probability mass will lie below the\n    contour drawn for 0.2. Only relevant with bivariate data.\nthresh : number in [0, 1]\n    Lowest iso-proportion level at which to draw a contour line. Ignored when\n    ``levels`` is a vector. Only relevant with bivariate data.\ngridsize : int\n    Number of points on each dimension of the evaluation grid.\ncut : number, optional\n    Factor, multiplied by the smoothing bandwidth, that determines how\n    far the evaluation grid extends past the extreme datapoints. When\n    set to 0, truncate the curve at the data limits.\nclip : pair of numbers or None, or a pair of such pairs\n    Do not evaluate the density outside of these limits.\nlegend : bool\n    If False, suppress the legend for semantic variables.\ncbar : bool\n    If True, add a colorbar to annotate the color mapping in a bivariate plot.\n    Note: Does not currently support plots with a ``hue`` variable well.\ncbar_ax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the colorbar.\ncbar_kws : dict\n    Additional parameters passed to :meth:`matplotlib.figure.Figure.colorbar`.\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs\n    Other keyword arguments are passed to one of the following matplotlib\n    functions:\n\n    - :meth:`matplotlib.axes.Axes.plot` (univariate, ``fill=False``),\n    - :meth:`matplotlib.axes.Axes.fill_between` (univariate, ``fill=True``),\n    - :meth:`matplotlib.axes.Axes.contour` (bivariate, ``fill=False``),\n    - :meth:`matplotlib.axes.contourf` (bivariate, ``fill=True``).\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nSee Also\n--------\ndisplot : Figure-level interface to distribution plot functions.\nhistplot : Plot a histogram of binned counts with optional normalization or smoothing.\necdfplot : Plot empirical cumulative distribution functions.\njointplot : Draw a bivariate plot with univariate marginal distributions.\nviolinplot : Draw an enhanced boxplot using kernel density estimation.\n\nNotes\n-----\n\nThe *bandwidth*, or standard deviation of the smoothing kernel, is an\nimportant parameter. Misspecification of the bandwidth can produce a\ndistorted representation of the data. Much like the choice of bin width in a\nhistogram, an over-smoothed curve can erase true features of a\ndistribution, while an under-smoothed curve can create false features out of\nrandom variability. The rule-of-thumb that sets the default bandwidth works\nbest when the true distribution is smooth, unimodal, and roughly bell-shaped.\nIt is always a good idea to check the default behavior by using ``bw_adjust``\nto increase or decrease the amount of smoothing.\n\nBecause the smoothing algorithm uses a Gaussian kernel, the estimated density\ncurve can extend to values that do not make sense for a particular dataset.\nFor example, the curve may be drawn over negative values when smoothing data\nthat are naturally positive. The ``cut`` and ``clip`` parameters can be used\nto control the extent of the curve, but datasets that have many observations\nclose to a natural boundary may be better served by a different visualization\nmethod.\n\nSimilar considerations apply when a dataset is naturally discrete or \"spiky\"\n(containing many repeated observations of the same value). Kernel density\nestimation will always produce a smooth curve, which would be misleading\nin these situations.\n\nThe units on the density axis are a common source of confusion. While kernel\ndensity estimation produces a probability distribution, the height of the curve\nat each point gives a density, not a probability. A probability can be obtained\nonly by integrating the density across a range. The curve is normalized so\nthat the integral over all possible values is 1, meaning that the scale of\nthe density axis depends on the data values.\n\nExamples\n--------\n\n.. include:: ../docstrings/kdeplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "multiple": {
          "type": "any",
          "default": "layer",
          "description": " "
        },
        "common_norm": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "common_grid": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "cumulative": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "bw_method": {
          "type": "any",
          "default": "scott",
          "description": " "
        },
        "bw_adjust": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "warn_singular": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "levels": {
          "type": "any",
          "default": "10",
          "description": " "
        },
        "thresh": {
          "type": "any",
          "default": "0.05",
          "description": " "
        },
        "gridsize": {
          "type": "any",
          "default": "200",
          "description": " "
        },
        "cut": {
          "type": "any",
          "default": "3",
          "description": " "
        },
        "clip": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "cbar": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "cbar_ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "cbar_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "light_palette",
    "type": "function",
    "description": "Make a sequential palette that blends from light to ``color``.\n\nThe ``color`` parameter can be specified in a number of ways, including\nall options for defining a color in matplotlib and several additional\ncolor spaces that are handled by seaborn. You can also use the database\nof named colors from the XKCD color survey.\n\nIf you are using a Jupyter notebook, you can also choose this palette\ninteractively with the :func:`choose_light_palette` function.\n\nParameters\n----------\ncolor : base color for high values\n    hex code, html color name, or tuple in `input` space.\nn_colors : int, optional\n    number of colors in the palette\nreverse : bool, optional\n    if True, reverse the direction of the blend\nas_cmap : bool, optional\n    If True, return a :class:`matplotlib.colors.ListedColormap`.\ninput : {'rgb', 'hls', 'husl', xkcd'}\n    Color space to interpret the input color. The first three options\n    apply to tuple inputs and the latter applies to string inputs.\n\nReturns\n-------\npalette\n    list of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nSee Also\n--------\ndark_palette : Create a sequential palette with dark low values.\ndiverging_palette : Create a diverging palette with two colors.\n\nExamples\n--------\n.. include:: ../docstrings/light_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "reverse": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "input": {
          "type": "any",
          "default": "rgb",
          "description": " "
        }
      },
      "required": [
        "color"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "lineplot",
    "type": "function",
    "description": "Draw a line plot with possibility of several semantic groupings.\n\nThe relationship between `x` and `y` can be shown for different subsets\nof the data using the `hue`, `size`, and `style` parameters. These\nparameters control what visual semantics are used to identify the different\nsubsets. It is possible to show up to three dimensions independently by\nusing all three semantic types, but this style of plot can be hard to\ninterpret and is often ineffective. Using redundant semantics (i.e. both\n`hue` and `style` for the same variable) can be helpful for making\ngraphics more accessible.\n\nSee the :ref:`tutorial <relational_tutorial>` for more information.\n\nThe default treatment of the `hue` (and to a lesser extent, `size`)\nsemantic, if present, depends on whether the variable is inferred to\nrepresent \"numeric\" or \"categorical\" data. In particular, numeric variables\nare represented with a sequential colormap by default, and the legend\nentries show regular \"ticks\" with values that may or may not exist in the\ndata. This behavior can be controlled through various parameters, as\ndescribed and illustrated below.\n\nBy default, the plot aggregates over multiple `y` values at each value of\n`x` and shows an estimate of the central tendency and a confidence\ninterval for that estimate.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in `data`\n    Grouping variable that will produce lines with different colors.\n    Can be either categorical or numeric, although color mapping will\n    behave differently in latter case.\nsize : vector or key in `data`\n    Grouping variable that will produce lines with different widths.\n    Can be either categorical or numeric, although size mapping will\n    behave differently in latter case.\nstyle : vector or key in `data`\n    Grouping variable that will produce lines with different dashes\n    and/or markers. Can have a numeric dtype but will always be treated\n    as categorical.\nunits : vector or key in `data`\n    Grouping variable identifying sampling units. When used, a separate\n    line will be drawn for each unit with appropriate semantics, but no\n    legend entry will be added. Useful for showing distribution of\n    experimental replicates when exact identities are not needed.\nweights : vector or key in `data`\n    Data values or column used to compute weighted estimation.\n    Note that use of weights currently limits the choice of statistics\n    to a 'mean' estimator and 'ci' errorbar.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nsizes : list, dict, or tuple\n    An object that determines how sizes are chosen when `size` is used.\n    List or dict arguments should provide a size for each unique data value,\n    which forces a categorical interpretation. The argument may also be a\n    min, max tuple.\nsize_order : list\n    Specified order for appearance of the `size` variable levels,\n    otherwise they are determined from the data. Not relevant when the\n    `size` variable is numeric.\nsize_norm : tuple or Normalize object\n    Normalization in data units for scaling plot objects when the\n    `size` variable is numeric.\ndashes : boolean, list, or dictionary\n    Object determining how to draw the lines for different levels of the\n    `style` variable. Setting to `True` will use default dash codes, or\n    you can pass a list of dash codes or a dictionary mapping levels of the\n    `style` variable to dash codes. Setting to `False` will use solid\n    lines for all subsets. Dashes are specified as in matplotlib: a tuple\n    of `(segment, gap)` lengths, or an empty string to draw a solid line.\nmarkers : boolean, list, or dictionary\n    Object determining how to draw the markers for different levels of the\n    `style` variable. Setting to `True` will use default markers, or\n    you can pass a list of markers or a dictionary mapping levels of the\n    `style` variable to markers. Setting to `False` will draw\n    marker-less lines.  Markers are specified as in matplotlib.\nstyle_order : list\n    Specified order for appearance of the `style` variable levels\n    otherwise they are determined from the data. Not relevant when the\n    `style` variable is numeric.\nestimator : name of pandas method or callable or None\n    Method for aggregating across multiple observations of the `y`\n    variable at the same `x` level. If `None`, all observations will\n    be drawn.\nerrorbar : string, (string, number) tuple, or callable\n    Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n    with a method name and a level parameter, or a function that maps from a\n    vector to a (min, max) interval, or None to hide errorbar. See the\n    :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\nn_boot : int\n    Number of bootstraps to use for computing the confidence interval.\nseed : int, numpy.random.Generator, or numpy.random.RandomState\n    Seed or random number generator for reproducible bootstrapping.\norient : \"x\" or \"y\"\n    Dimension along which the data are sorted / aggregated. Equivalently,\n    the \"independent variable\" of the resulting function.\nsort : boolean\n    If True, the data will be sorted by the x and y variables, otherwise\n    lines will connect points in the order they appear in the dataset.\nerr_style : \"band\" or \"bars\"\n    Whether to draw the confidence intervals with translucent error bands\n    or discrete error bars.\nerr_kws : dict of keyword arguments\n    Additional parameters to control the aesthetics of the error bars. The\n    kwargs are passed either to :meth:`matplotlib.axes.Axes.fill_between`\n    or :meth:`matplotlib.axes.Axes.errorbar`, depending on `err_style`.\nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\nci : int or \"sd\" or None\n    Size of the confidence interval to draw when aggregating.\n\n    .. deprecated:: 0.12.0\n        Use the new `errorbar` parameter for more flexibility.\n\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs : key, value mappings\n    Other keyword arguments are passed down to\n    :meth:`matplotlib.axes.Axes.plot`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nSee Also\n--------\nscatterplot : Plot data using points.\npointplot : Plot point estimates and CIs using markers and lines.\n\nExamples\n--------\n\n.. include:: ../docstrings/lineplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "style": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "sizes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "dashes": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "style_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "estimator": {
          "type": "any",
          "default": "mean",
          "description": " "
        },
        "errorbar": {
          "type": "any",
          "default": "('ci', 95)",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "x",
          "description": " "
        },
        "sort": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "err_style": {
          "type": "any",
          "default": "band",
          "description": " "
        },
        "err_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "deprecated",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "lmplot",
    "type": "function",
    "description": "Plot data and regression model fits across a FacetGrid.\n\nThis function combines :func:`regplot` and :class:`FacetGrid`. It is\nintended as a convenient interface to fit regression models across\nconditional subsets of a dataset.\n\nWhen thinking about how to assign variables to different facets, a general\nrule is that it makes sense to use ``hue`` for the most important\ncomparison, followed by ``col`` and ``row``. However, always think about\nyour particular dataset and the goals of the visualization you are\ncreating.\n\nThere are a number of mutually exclusive options for estimating the\nregression model. See the :ref:`tutorial <regression_tutorial>` for more\ninformation.    \n\nThe parameters to this function span most of the options in\n:class:`FacetGrid`, although there may be occasional cases where you will\nwant to use that class and :func:`regplot` directly.\n\nParameters\n----------\ndata : DataFrame\n    Tidy (\"long-form\") dataframe where each column is a variable and each\n    row is an observation.    \nx, y : strings, optional\n    Input variables; these should be column names in ``data``.\nhue, col, row : strings\n    Variables that define subsets of the data, which will be drawn on\n    separate facets in the grid. See the ``*_order`` parameters to control\n    the order of levels of this variable.\npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \ncol_wrap : int\n    \"Wrap\" the column variable at this width, so that the column facets\n    span multiple rows. Incompatible with a ``row`` facet.    \nheight : scalar\n    Height (in inches) of each facet. See also: ``aspect``.    \naspect : scalar\n    Aspect ratio of each facet, so that ``aspect * height`` gives the width\n    of each facet in inches.    \nmarkers : matplotlib marker code or list of marker codes, optional\n    Markers for the scatterplot. If a list, each marker in the list will be\n    used for each level of the ``hue`` variable.\nshare{x,y} : bool, 'col', or 'row' optional\n    If true, the facets will share y axes across columns and/or x axes\n    across rows.    \n\n    .. deprecated:: 0.12.0\n        Pass using the `facet_kws` dictionary.\n\n{hue,col,row}_order : lists, optional\n    Order for the levels of the faceting variables. By default, this will\n    be the order that the levels appear in ``data`` or, if the variables\n    are pandas categoricals, the category order.\nlegend : bool, optional\n    If ``True`` and there is a ``hue`` variable, add a legend.\nlegend_out : bool\n    If ``True``, the figure size will be extended, and the legend will be\n    drawn outside the plot on the center right.    \n\n    .. deprecated:: 0.12.0\n        Pass using the `facet_kws` dictionary.\n\nx_estimator : callable that maps vector -> scalar, optional\n    Apply this function to each unique value of ``x`` and plot the\n    resulting estimate. This is useful when ``x`` is a discrete variable.\n    If ``x_ci`` is given, this estimate will be bootstrapped and a\n    confidence interval will be drawn.    \nx_bins : int or vector, optional\n    Bin the ``x`` variable into discrete bins and then estimate the central\n    tendency and a confidence interval. This binning only influences how\n    the scatterplot is drawn; the regression is still fit to the original\n    data.  This parameter is interpreted either as the number of\n    evenly-sized (not necessary spaced) bins or the positions of the bin\n    centers. When this parameter is used, it implies that the default of\n    ``x_estimator`` is ``numpy.mean``.    \nx_ci : \"ci\", \"sd\", int in [0, 100] or None, optional\n    Size of the confidence interval used when plotting a central tendency\n    for discrete values of ``x``. If ``\"ci\"``, defer to the value of the\n    ``ci`` parameter. If ``\"sd\"``, skip bootstrapping and show the\n    standard deviation of the observations in each bin.    \nscatter : bool, optional\n    If ``True``, draw a scatterplot with the underlying observations (or\n    the ``x_estimator`` values).    \nfit_reg : bool, optional\n    If ``True``, estimate and plot a regression model relating the ``x``\n    and ``y`` variables.    \nci : int in [0, 100] or None, optional\n    Size of the confidence interval for the regression estimate. This will\n    be drawn using translucent bands around the regression line. The\n    confidence interval is estimated using a bootstrap; for large\n    datasets, it may be advisable to avoid that computation by setting\n    this parameter to None.    \nn_boot : int, optional\n    Number of bootstrap resamples used to estimate the ``ci``. The default\n    value attempts to balance time and stability; you may want to increase\n    this value for \"final\" versions of plots.    \nunits : variable name in ``data``, optional\n    If the ``x`` and ``y`` observations are nested within sampling units,\n    those can be specified here. This will be taken into account when\n    computing the confidence intervals by performing a multilevel bootstrap\n    that resamples both units and observations (within unit). This does not\n    otherwise influence how the regression is estimated or drawn.    \nseed : int, numpy.random.Generator, or numpy.random.RandomState, optional\n    Seed or random number generator for reproducible bootstrapping.    \norder : int, optional\n    If ``order`` is greater than 1, use ``numpy.polyfit`` to estimate a\n    polynomial regression.    \nlogistic : bool, optional\n    If ``True``, assume that ``y`` is a binary variable and use\n    ``statsmodels`` to estimate a logistic regression model. Note that this\n    is substantially more computationally intensive than linear regression,\n    so you may wish to decrease the number of bootstrap resamples\n    (``n_boot``) or set ``ci`` to None.    \nlowess : bool, optional\n    If ``True``, use ``statsmodels`` to estimate a nonparametric lowess\n    model (locally weighted linear regression). Note that confidence\n    intervals cannot currently be drawn for this kind of model.    \nrobust : bool, optional\n    If ``True``, use ``statsmodels`` to estimate a robust regression. This\n    will de-weight outliers. Note that this is substantially more\n    computationally intensive than standard linear regression, so you may\n    wish to decrease the number of bootstrap resamples (``n_boot``) or set\n    ``ci`` to None.    \nlogx : bool, optional\n    If ``True``, estimate a linear regression of the form y ~ log(x), but\n    plot the scatterplot and regression model in the input space. Note that\n    ``x`` must be positive for this to work.    \n{x,y}_partial : strings in ``data`` or matrices\n    Confounding variables to regress out of the ``x`` or ``y`` variables\n    before plotting.    \ntruncate : bool, optional\n    If ``True``, the regression line is bounded by the data limits. If\n    ``False``, it extends to the ``x`` axis limits.\n\n{x,y}_jitter : floats, optional\n    Add uniform random noise of this size to either the ``x`` or ``y``\n    variables. The noise is added to a copy of the data after fitting the\n    regression, and only influences the look of the scatterplot. This can\n    be helpful when plotting variables that take discrete values.    \n{scatter,line}_kws : dictionaries\n    Additional keyword arguments to pass to ``plt.scatter`` and\n    ``plt.plot``.    \nfacet_kws : dict\n    Dictionary of keyword arguments for :class:`FacetGrid`.\n\nSee Also\n--------\nregplot : Plot data and a conditional model fit.\nFacetGrid : Subplot grid for plotting conditional relationships.\npairplot : Combine :func:`regplot` and :class:`PairGrid` (when used with\n           ``kind=\"reg\"``).\n\nNotes\n-----\n\nThe :func:`regplot` and :func:`lmplot` functions are closely related, but\nthe former is an axes-level function while the latter is a figure-level\nfunction that combines :func:`regplot` and :class:`FacetGrid`.    \n\nExamples\n--------\n\n.. include:: ../docstrings/lmplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_wrap": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "aspect": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "o",
          "description": " "
        },
        "sharex": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "sharey": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "legend_out": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_estimator": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_bins": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_ci": {
          "type": "any",
          "default": "ci",
          "description": " "
        },
        "scatter": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "fit_reg": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "95",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "logistic": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "lowess": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "robust": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "logx": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "x_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "truncate": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "x_jitter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_jitter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "scatter_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "line_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "facet_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "data"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "load_dataset",
    "type": "function",
    "description": "Load an example dataset from the online repository (requires internet).\n\nThis function provides quick access to a small number of example datasets\nthat are useful for documenting seaborn or generating reproducible examples\nfor bug reports. It is not necessary for normal usage.\n\nNote that some of the datasets have a small amount of preprocessing applied\nto define a proper ordering for categorical variables.\n\nUse :func:`get_dataset_names` to see a list of available datasets.\n\nParameters\n----------\nname : str\n    Name of the dataset (``{name}.csv`` on\n    https://github.com/mwaskom/seaborn-data).\ncache : boolean, optional\n    If True, try to load from the local cache first, and save to the cache\n    if a download is required.\ndata_home : string, optional\n    The directory in which to cache data; see :func:`get_data_home`.\nkws : keys and values, optional\n    Additional keyword arguments are passed to passed through to\n    :func:`pandas.read_csv`.\n\nReturns\n-------\ndf : :class:`pandas.DataFrame`\n    Tabular data, possibly with some preprocessing applied.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "cache": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "data_home": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kws": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "name",
        "kws"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "move_legend",
    "type": "function",
    "description": "Recreate a plot's legend at a new location.\n\nThe name is a slight misnomer. Matplotlib legends do not expose public\ncontrol over their position parameters. So this function creates a new legend,\ncopying over the data from the original object, which is then removed.\n\nParameters\n----------\nobj : the object with the plot\n    This argument can be either a seaborn or matplotlib object:\n\n    - :class:`seaborn.FacetGrid` or :class:`seaborn.PairGrid`\n    - :class:`matplotlib.axes.Axes` or :class:`matplotlib.figure.Figure`\n\nloc : str or int\n    Location argument, as in :meth:`matplotlib.axes.Axes.legend`.\n\nkwargs\n    Other keyword arguments are passed to :meth:`matplotlib.axes.Axes.legend`.\n\nExamples\n--------\n\n.. include:: ../docstrings/move_legend.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "obj": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "loc": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "obj",
        "loc",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "mpl_palette",
    "type": "function",
    "description": "Return a palette or colormap from the matplotlib registry.\n\nFor continuous palettes, evenly-spaced discrete samples are chosen while\nexcluding the minimum and maximum value in the colormap to provide better\ncontrast at the extremes.\n\nFor qualitative palettes (e.g. those from colorbrewer), exact values are\nindexed (rather than interpolated), but fewer than `n_colors` can be returned\nif the palette does not define that many.\n\nParameters\n----------\nname : string\n    Name of the palette. This should be a named matplotlib colormap.\nn_colors : int\n    Number of discrete colors in the palette.\n\nReturns\n-------\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\n\nExamples\n--------\n.. include:: ../docstrings/mpl_palette.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "6",
          "description": " "
        },
        "as_cmap": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "name"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "pairplot",
    "type": "function",
    "description": "Plot pairwise relationships in a dataset.\n\nBy default, this function will create a grid of Axes such that each numeric\nvariable in ``data`` will by shared across the y-axes across a single row and\nthe x-axes across a single column. The diagonal plots are treated\ndifferently: a univariate distribution plot is drawn to show the marginal\ndistribution of the data in each column.\n\nIt is also possible to show a subset of variables or plot different\nvariables on the rows and columns.\n\nThis is a high-level interface for :class:`PairGrid` that is intended to\nmake it easy to draw a few common styles. You should use :class:`PairGrid`\ndirectly if you need more flexibility.\n\nParameters\n----------\ndata : `pandas.DataFrame`\n    Tidy (long-form) dataframe where each column is a variable and\n    each row is an observation.\nhue : name of variable in ``data``\n    Variable in ``data`` to map plot aspects to different colors.\nhue_order : list of strings\n    Order for the levels of the hue variable in the palette\npalette : dict or seaborn color palette\n    Set of colors for mapping the ``hue`` variable. If a dict, keys\n    should be values  in the ``hue`` variable.\nvars : list of variable names\n    Variables within ``data`` to use, otherwise use every column with\n    a numeric datatype.\n{x, y}_vars : lists of variable names\n    Variables within ``data`` to use separately for the rows and\n    columns of the figure; i.e. to make a non-square plot.\nkind : {'scatter', 'kde', 'hist', 'reg'}\n    Kind of plot to make.\ndiag_kind : {'auto', 'hist', 'kde', None}\n    Kind of plot for the diagonal subplots. If 'auto', choose based on\n    whether or not ``hue`` is used.\nmarkers : single matplotlib marker code or list\n    Either the marker to use for all scatterplot points or a list of markers\n    with a length the same as the number of levels in the hue variable so that\n    differently colored points will also have different scatterplot\n    markers.\nheight : scalar\n    Height (in inches) of each facet.\naspect : scalar\n    Aspect * height gives the width (in inches) of each facet.\ncorner : bool\n    If True, don't add axes to the upper (off-diagonal) triangle of the\n    grid, making this a \"corner\" plot.\ndropna : boolean\n    Drop missing values from the data before plotting.\n{plot, diag, grid}_kws : dicts\n    Dictionaries of keyword arguments. ``plot_kws`` are passed to the\n    bivariate plotting function, ``diag_kws`` are passed to the univariate\n    plotting function, and ``grid_kws`` are passed to the :class:`PairGrid`\n    constructor.\n\nReturns\n-------\ngrid : :class:`PairGrid`\n    Returns the underlying :class:`PairGrid` instance for further tweaking.\n\nSee Also\n--------\nPairGrid : Subplot grid for more flexible plotting of pairwise relationships.\nJointGrid : Grid for plotting joint and marginal distributions of two variables.\n\nExamples\n--------\n\n.. include:: ../docstrings/pairplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "vars": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_vars": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_vars": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kind": {
          "type": "any",
          "default": "scatter",
          "description": " "
        },
        "diag_kind": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "2.5",
          "description": " "
        },
        "aspect": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "corner": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "dropna": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "plot_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "diag_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "grid_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "data"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "palplot",
    "type": "function",
    "description": "Plot the values in a color palette as a horizontal array.\n\nParameters\n----------\npal : sequence of matplotlib colors\n    colors, i.e. as returned by seaborn.color_palette()\nsize :\n    scaling factor for size of plot",
    "parameters": {
      "type": "object",
      "properties": {
        "pal": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "1",
          "description": " "
        }
      },
      "required": [
        "pal"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotting_context",
    "type": "function",
    "description": "Get the parameters that control the scaling of plot elements.\n\nThese parameters correspond to label size, line thickness, etc. For more\ninformation, see the :doc:`aesthetics tutorial <../tutorial/aesthetics>`.\n\nThe base context is \"notebook\", and the other contexts are \"paper\", \"talk\",\nand \"poster\", which are version of the notebook parameters scaled by different\nvalues. Font elements can also be scaled independently of (but relative to)\nthe other values.\n\nThis function can also be used as a context manager to temporarily\nalter the global defaults. See :func:`set_theme` or :func:`set_context`\nto modify the global defaults for all plots.\n\nParameters\n----------\ncontext : None, dict, or one of {paper, notebook, talk, poster}\n    A dictionary of parameters or the name of a preconfigured set.\nfont_scale : float, optional\n    Separate scaling factor to independently scale the size of the\n    font elements.\nrc : dict, optional\n    Parameter mappings to override the values in the preset seaborn\n    context dictionaries. This only updates parameters that are\n    considered part of the context definition.\n\nExamples\n--------\n\n.. include:: ../docstrings/plotting_context.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "context": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "font_scale": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "pointplot",
    "type": "function",
    "description": "Show point estimates and errors using lines with markers.\n\nA point plot represents an estimate of central tendency for a numeric\nvariable by the position of the dot and provides some indication of the\nuncertainty around that estimate using error bars.\n\nPoint plots can be more useful than bar plots for focusing comparisons\nbetween different levels of one or more categorical variables. They are\nparticularly adept at showing interactions: how the relationship between\nlevels of one categorical variable changes across levels of a second\ncategorical variable. The lines that join each point from the same `hue`\nlevel allow interactions to be judged by differences in slope, which is\neasier for the eyes than comparing the heights of several groups of points\nor bars.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \nestimator : string or callable that maps vector -> scalar\n    Statistical function to estimate within each categorical bin.\nerrorbar : string, (string, number) tuple, callable or None\n    Name of errorbar method (either \"ci\", \"pi\", \"se\", or \"sd\"), or a tuple\n    with a method name and a level parameter, or a function that maps from a\n    vector to a (min, max) interval, or None to hide errorbar. See the\n    :doc:`errorbar tutorial </tutorial/error_bars>` for more information.\n\n    .. versionadded:: v0.12.0\nn_boot : int\n    Number of bootstrap samples used to compute confidence intervals.\nseed : int, `numpy.random.Generator`, or `numpy.random.RandomState`\n    Seed or random number generator for reproducible bootstrapping.\nunits : name of variable in `data` or vector data\n    Identifier of sampling units; used by the errorbar function to\n    perform a multilevel bootstrap and account for repeated measures\nweights : name of variable in `data` or vector data\n    Data values or column used to compute weighted statistics.\n    Note that the use of weights may limit other statistical options.\n\n    .. versionadded:: v0.13.1    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nmarkers : string or list of strings\n    Markers to use for each of the `hue` levels.\nlinestyles : string or list of strings\n    Line styles to use for each of the `hue` levels.\ndodge : bool or float\n    Amount to separate the points for each level of the `hue` variable along\n    the categorical axis. Setting to `True` will apply a small default.\nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncapsize : float\n    Width of the \"caps\" on error bars, relative to bar spacing.    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nerr_kws : dict\n    Parameters of :class:`matplotlib.lines.Line2D`, for the error bar artists.\n\n    .. versionadded:: v0.13.0    \nci : float\n    Level of the confidence interval to show, in [0, 100].\n\n    .. deprecated:: v0.12.0\n        Use `errorbar=(\"ci\", ...)`.    \nerrwidth : float\n    Thickness of error bar lines (and caps), in points.\n\n    .. deprecated:: 0.13.0\n        Use `err_kws={'linewidth': ...}`.    \njoin : bool\n    If `True`, connect point estimates with a line.\n\n    .. deprecated:: v0.13.0\n        Set `linestyle=\"none\"` to remove the lines between the points.\nscale : float\n    Scale factor for the plot elements.\n\n    .. deprecated:: v0.13.0\n        Control element sizes with :class:`matplotlib.lines.Line2D` parameters.\nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other parameters are passed through to :class:`matplotlib.lines.Line2D`.\n\n    .. versionadded:: v0.13.0\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nbarplot : Show point estimates and confidence intervals using bars.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nNotes\n-----\nIt is important to keep in mind that a point plot shows only the mean (or\nother estimator) value, but in many cases it may be more informative to\nshow the distribution of values at each level of the categorical variables.\nIn that case, other approaches such as a box or violin plot may be more\nappropriate.\n\nExamples\n--------\n.. include:: ../docstrings/pointplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "estimator": {
          "type": "any",
          "default": "mean",
          "description": " "
        },
        "errorbar": {
          "type": "any",
          "default": "('ci', 95)",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "<default>",
          "description": " "
        },
        "linestyles": {
          "type": "any",
          "default": "<default>",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "capsize": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "err_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "errwidth": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "join": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "scale": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "regplot",
    "type": "function",
    "description": "Plot data and a linear regression model fit.\n\nThere are a number of mutually exclusive options for estimating the\nregression model. See the :ref:`tutorial <regression_tutorial>` for more\ninformation.    \n\nParameters\n----------\nx, y: string, series, or vector array\n    Input variables. If strings, these should correspond with column names\n    in ``data``. When pandas objects are used, axes will be labeled with\n    the series name.\ndata : DataFrame\n    Tidy (\"long-form\") dataframe where each column is a variable and each\n    row is an observation.    \nx_estimator : callable that maps vector -> scalar, optional\n    Apply this function to each unique value of ``x`` and plot the\n    resulting estimate. This is useful when ``x`` is a discrete variable.\n    If ``x_ci`` is given, this estimate will be bootstrapped and a\n    confidence interval will be drawn.    \nx_bins : int or vector, optional\n    Bin the ``x`` variable into discrete bins and then estimate the central\n    tendency and a confidence interval. This binning only influences how\n    the scatterplot is drawn; the regression is still fit to the original\n    data.  This parameter is interpreted either as the number of\n    evenly-sized (not necessary spaced) bins or the positions of the bin\n    centers. When this parameter is used, it implies that the default of\n    ``x_estimator`` is ``numpy.mean``.    \nx_ci : \"ci\", \"sd\", int in [0, 100] or None, optional\n    Size of the confidence interval used when plotting a central tendency\n    for discrete values of ``x``. If ``\"ci\"``, defer to the value of the\n    ``ci`` parameter. If ``\"sd\"``, skip bootstrapping and show the\n    standard deviation of the observations in each bin.    \nscatter : bool, optional\n    If ``True``, draw a scatterplot with the underlying observations (or\n    the ``x_estimator`` values).    \nfit_reg : bool, optional\n    If ``True``, estimate and plot a regression model relating the ``x``\n    and ``y`` variables.    \nci : int in [0, 100] or None, optional\n    Size of the confidence interval for the regression estimate. This will\n    be drawn using translucent bands around the regression line. The\n    confidence interval is estimated using a bootstrap; for large\n    datasets, it may be advisable to avoid that computation by setting\n    this parameter to None.    \nn_boot : int, optional\n    Number of bootstrap resamples used to estimate the ``ci``. The default\n    value attempts to balance time and stability; you may want to increase\n    this value for \"final\" versions of plots.    \nunits : variable name in ``data``, optional\n    If the ``x`` and ``y`` observations are nested within sampling units,\n    those can be specified here. This will be taken into account when\n    computing the confidence intervals by performing a multilevel bootstrap\n    that resamples both units and observations (within unit). This does not\n    otherwise influence how the regression is estimated or drawn.    \nseed : int, numpy.random.Generator, or numpy.random.RandomState, optional\n    Seed or random number generator for reproducible bootstrapping.    \norder : int, optional\n    If ``order`` is greater than 1, use ``numpy.polyfit`` to estimate a\n    polynomial regression.    \nlogistic : bool, optional\n    If ``True``, assume that ``y`` is a binary variable and use\n    ``statsmodels`` to estimate a logistic regression model. Note that this\n    is substantially more computationally intensive than linear regression,\n    so you may wish to decrease the number of bootstrap resamples\n    (``n_boot``) or set ``ci`` to None.    \nlowess : bool, optional\n    If ``True``, use ``statsmodels`` to estimate a nonparametric lowess\n    model (locally weighted linear regression). Note that confidence\n    intervals cannot currently be drawn for this kind of model.    \nrobust : bool, optional\n    If ``True``, use ``statsmodels`` to estimate a robust regression. This\n    will de-weight outliers. Note that this is substantially more\n    computationally intensive than standard linear regression, so you may\n    wish to decrease the number of bootstrap resamples (``n_boot``) or set\n    ``ci`` to None.    \nlogx : bool, optional\n    If ``True``, estimate a linear regression of the form y ~ log(x), but\n    plot the scatterplot and regression model in the input space. Note that\n    ``x`` must be positive for this to work.    \n{x,y}_partial : strings in ``data`` or matrices\n    Confounding variables to regress out of the ``x`` or ``y`` variables\n    before plotting.    \ntruncate : bool, optional\n    If ``True``, the regression line is bounded by the data limits. If\n    ``False``, it extends to the ``x`` axis limits.\n\n{x,y}_jitter : floats, optional\n    Add uniform random noise of this size to either the ``x`` or ``y``\n    variables. The noise is added to a copy of the data after fitting the\n    regression, and only influences the look of the scatterplot. This can\n    be helpful when plotting variables that take discrete values.    \nlabel : string\n    Label to apply to either the scatterplot or regression line (if\n    ``scatter`` is ``False``) for use in a legend.\ncolor : matplotlib color\n    Color to apply to all plot elements; will be superseded by colors\n    passed in ``scatter_kws`` or ``line_kws``.\nmarker : matplotlib marker code\n    Marker to use for the scatterplot glyphs.\n{scatter,line}_kws : dictionaries\n    Additional keyword arguments to pass to ``plt.scatter`` and\n    ``plt.plot``.    \nax : matplotlib Axes, optional\n    Axes object to draw the plot onto, otherwise uses the current Axes.\n\nReturns\n-------\nax : matplotlib Axes\n    The Axes object containing the plot.\n\nSee Also\n--------\nlmplot : Combine :func:`regplot` and :class:`FacetGrid` to plot multiple\n         linear relationships in a dataset.\njointplot : Combine :func:`regplot` and :class:`JointGrid` (when used with\n            ``kind=\"reg\"``).\npairplot : Combine :func:`regplot` and :class:`PairGrid` (when used with\n           ``kind=\"reg\"``).\nresidplot : Plot the residuals of a linear regression model.\n\nNotes\n-----\n\nThe :func:`regplot` and :func:`lmplot` functions are closely related, but\nthe former is an axes-level function while the latter is a figure-level\nfunction that combines :func:`regplot` and :class:`FacetGrid`.    \n\n\nIt's also easy to combine :func:`regplot` and :class:`JointGrid` or\n:class:`PairGrid` through the :func:`jointplot` and :func:`pairplot`\nfunctions, although these do not directly accept all of :func:`regplot`'s\nparameters.\n\nExamples\n--------\n\n.. include:: ../docstrings/regplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_estimator": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_bins": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_ci": {
          "type": "any",
          "default": "ci",
          "description": " "
        },
        "scatter": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "fit_reg": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "ci": {
          "type": "any",
          "default": "95",
          "description": " "
        },
        "n_boot": {
          "type": "any",
          "default": "1000",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "seed": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "logistic": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "lowess": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "robust": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "logx": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "x_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "truncate": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "dropna": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "x_jitter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_jitter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "label": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "marker": {
          "type": "any",
          "default": "o",
          "description": " "
        },
        "scatter_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "line_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "relplot",
    "type": "function",
    "description": "Figure-level interface for drawing relational plots onto a FacetGrid.\n\nThis function provides access to several different axes-level functions\nthat show the relationship between two variables with semantic mappings\nof subsets. The `kind` parameter selects the underlying axes-level\nfunction to use:\n\n- :func:`scatterplot` (with `kind=\"scatter\"`; the default)\n- :func:`lineplot` (with `kind=\"line\"`)\n\nExtra keyword arguments are passed to the underlying function, so you\nshould refer to the documentation for each to see kind-specific options.\n\nThe relationship between `x` and `y` can be shown for different subsets\nof the data using the `hue`, `size`, and `style` parameters. These\nparameters control what visual semantics are used to identify the different\nsubsets. It is possible to show up to three dimensions independently by\nusing all three semantic types, but this style of plot can be hard to\ninterpret and is often ineffective. Using redundant semantics (i.e. both\n`hue` and `style` for the same variable) can be helpful for making\ngraphics more accessible.\n\nSee the :ref:`tutorial <relational_tutorial>` for more information.\n\nThe default treatment of the `hue` (and to a lesser extent, `size`)\nsemantic, if present, depends on whether the variable is inferred to\nrepresent \"numeric\" or \"categorical\" data. In particular, numeric variables\nare represented with a sequential colormap by default, and the legend\nentries show regular \"ticks\" with values that may or may not exist in the\ndata. This behavior can be controlled through various parameters, as\ndescribed and illustrated below.\n\nAfter plotting, the :class:`FacetGrid` with the plot is returned and can\nbe used directly to tweak supporting plot details or add other layers.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in `data`\n    Grouping variable that will produce elements with different colors.\n    Can be either categorical or numeric, although color mapping will\n    behave differently in latter case.\nsize : vector or key in `data`\n    Grouping variable that will produce elements with different sizes.\n    Can be either categorical or numeric, although size mapping will\n    behave differently in latter case.\nstyle : vector or key in `data`\n    Grouping variable that will produce elements with different styles.\n    Can have a numeric dtype but will always be treated as categorical.\nunits : vector or key in `data`\n    Grouping variable identifying sampling units. When used, a separate\n    line will be drawn for each unit with appropriate semantics, but no\n    legend entry will be added. Useful for showing distribution of\n    experimental replicates when exact identities are not needed.\nweights : vector or key in `data`\n    Data values or column used to compute weighted estimation.\n    Note that use of weights currently limits the choice of statistics\n    to a 'mean' estimator and 'ci' errorbar.\nrow, col : vectors or keys in ``data``\n    Variables that define subsets to plot on different facets.    \ncol_wrap : int\n    \"Wrap\" the column variable at this width, so that the column facets\n    span multiple rows. Incompatible with a ``row`` facet.    \nrow_order, col_order : lists of strings\n    Order to organize the rows and/or columns of the grid in, otherwise the\n    orders are inferred from the data objects.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nsizes : list, dict, or tuple\n    An object that determines how sizes are chosen when `size` is used.\n    List or dict arguments should provide a size for each unique data value,\n    which forces a categorical interpretation. The argument may also be a\n    min, max tuple.\nsize_order : list\n    Specified order for appearance of the `size` variable levels,\n    otherwise they are determined from the data. Not relevant when the\n    `size` variable is numeric.\nsize_norm : tuple or Normalize object\n    Normalization in data units for scaling plot objects when the\n    `size` variable is numeric.\nstyle_order : list\n    Specified order for appearance of the `style` variable levels\n    otherwise they are determined from the data. Not relevant when the\n    `style` variable is numeric.\ndashes : boolean, list, or dictionary\n    Object determining how to draw the lines for different levels of the\n    `style` variable. Setting to `True` will use default dash codes, or\n    you can pass a list of dash codes or a dictionary mapping levels of the\n    `style` variable to dash codes. Setting to `False` will use solid\n    lines for all subsets. Dashes are specified as in matplotlib: a tuple\n    of `(segment, gap)` lengths, or an empty string to draw a solid line.\nmarkers : boolean, list, or dictionary\n    Object determining how to draw the markers for different levels of the\n    `style` variable. Setting to `True` will use default markers, or\n    you can pass a list of markers or a dictionary mapping levels of the\n    `style` variable to markers. Setting to `False` will draw\n    marker-less lines.  Markers are specified as in matplotlib.\nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\nkind : string\n    Kind of plot to draw, corresponding to a seaborn relational plot.\n    Options are `\"scatter\"` or `\"line\"`.\nheight : scalar\n    Height (in inches) of each facet. See also: ``aspect``.    \naspect : scalar\n    Aspect ratio of each facet, so that ``aspect * height`` gives the width\n    of each facet in inches.    \nfacet_kws : dict\n    Dictionary of other keyword arguments to pass to :class:`FacetGrid`.\nkwargs : key, value pairings\n    Other keyword arguments are passed through to the underlying plotting\n    function.\n\nReturns\n-------\n:class:`FacetGrid`\n    An object managing one or more subplots that correspond to conditional data\n    subsets with convenient methods for batch-setting of axes attributes.\n\nExamples\n--------\n\n.. include:: ../docstrings/relplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "style": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "units": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "weights": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_wrap": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "row_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "col_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "sizes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "dashes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "style_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "kind": {
          "type": "any",
          "default": "scatter",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "aspect": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "facet_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "reset_defaults",
    "type": "function",
    "description": "Restore all RC params to default settings.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "reset_orig",
    "type": "function",
    "description": "Restore all RC params to original settings (respects custom rc).",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "residplot",
    "type": "function",
    "description": "Plot the residuals of a linear regression.\n\nThis function will regress y on x (possibly as a robust or polynomial\nregression) and then draw a scatterplot of the residuals. You can\noptionally fit a lowess smoother to the residual plot, which can\nhelp in determining if there is structure to the residuals.\n\nParameters\n----------\ndata : DataFrame, optional\n    DataFrame to use if `x` and `y` are column names.\nx : vector or string\n    Data or column name in `data` for the predictor variable.\ny : vector or string\n    Data or column name in `data` for the response variable.\n{x, y}_partial : vectors or string(s) , optional\n    These variables are treated as confounding and are removed from\n    the `x` or `y` variables before plotting.\nlowess : boolean, optional\n    Fit a lowess smoother to the residual scatterplot.\norder : int, optional\n    Order of the polynomial to fit when calculating the residuals.\nrobust : boolean, optional\n    Fit a robust linear regression when calculating the residuals.\ndropna : boolean, optional\n    If True, ignore observations with missing data when fitting and\n    plotting.\nlabel : string, optional\n    Label that will be used in any plot legends.\ncolor : matplotlib color, optional\n    Color to use for all elements of the plot.\n{scatter, line}_kws : dictionaries, optional\n    Additional keyword arguments passed to scatter() and plot() for drawing\n    the components of the plot.\nax : matplotlib axis, optional\n    Plot into this axis, otherwise grab the current axis or make a new\n    one if not existing.\n\nReturns\n-------\nax: matplotlib axes\n    Axes with the regression plot.\n\nSee Also\n--------\nregplot : Plot a simple linear regression model.\njointplot : Draw a :func:`residplot` with univariate marginal distributions\n            (when used with ``kind=\"resid\"``).\n\nExamples\n--------\n\n.. include:: ../docstrings/residplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y_partial": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "lowess": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "robust": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "dropna": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "label": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "scatter_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "line_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "rugplot",
    "type": "function",
    "description": "Plot marginal distributions by drawing ticks along the x and y axes.\n\nThis function is intended to complement other plots by showing the location\nof individual observations in an unobtrusive way.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in ``data``\n    Semantic variable that is mapped to determine the color of plot elements.\nheight : float\n    Proportion of axes extent covered by each rug element. Can be negative.\nexpand_margins : bool\n    If True, increase the axes margins by the height of the rug to avoid\n    overlap with other elements.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nlegend : bool\n    If False, do not add a legend for semantic variables.\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs\n    Other keyword arguments are passed to\n    :meth:`matplotlib.collections.LineCollection`\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nExamples\n--------\n\n.. include:: ../docstrings/rugplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "height": {
          "type": "any",
          "default": "0.025",
          "description": " "
        },
        "expand_margins": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "saturate",
    "type": "function",
    "description": "Return a fully saturated color with the same hue.\n\nParameters\n----------\ncolor : matplotlib color\n    hex, rgb-tuple, or html color name\n\nReturns\n-------\nnew_color : rgb tuple\n    saturated color code in RGB tuple representation",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "color"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "scatterplot",
    "type": "function",
    "description": "Draw a scatter plot with possibility of several semantic groupings.\n\nThe relationship between `x` and `y` can be shown for different subsets\nof the data using the `hue`, `size`, and `style` parameters. These\nparameters control what visual semantics are used to identify the different\nsubsets. It is possible to show up to three dimensions independently by\nusing all three semantic types, but this style of plot can be hard to\ninterpret and is often ineffective. Using redundant semantics (i.e. both\n`hue` and `style` for the same variable) can be helpful for making\ngraphics more accessible.\n\nSee the :ref:`tutorial <relational_tutorial>` for more information.\n\nThe default treatment of the `hue` (and to a lesser extent, `size`)\nsemantic, if present, depends on whether the variable is inferred to\nrepresent \"numeric\" or \"categorical\" data. In particular, numeric variables\nare represented with a sequential colormap by default, and the legend\nentries show regular \"ticks\" with values that may or may not exist in the\ndata. This behavior can be controlled through various parameters, as\ndescribed and illustrated below.\n\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\n    Input data structure. Either a long-form collection of vectors that can be\n    assigned to named variables or a wide-form dataset that will be internally\n    reshaped.\nx, y : vectors or keys in ``data``\n    Variables that specify positions on the x and y axes.\nhue : vector or key in `data`\n    Grouping variable that will produce points with different colors.\n    Can be either categorical or numeric, although color mapping will\n    behave differently in latter case.\nsize : vector or key in `data`\n    Grouping variable that will produce points with different sizes.\n    Can be either categorical or numeric, although size mapping will\n    behave differently in latter case.\nstyle : vector or key in `data`\n    Grouping variable that will produce points with different markers.\n    Can have a numeric dtype but will always be treated as categorical.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\n    Method for choosing the colors to use when mapping the ``hue`` semantic.\n    String values are passed to :func:`color_palette`. List or dict values\n    imply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\n    Specify the order of processing and plotting for categorical levels of the\n    ``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\n    Either a pair of values that set the normalization range in data units\n    or an object that will map from data units into a [0, 1] interval. Usage\n    implies numeric mapping.\nsizes : list, dict, or tuple\n    An object that determines how sizes are chosen when `size` is used.\n    List or dict arguments should provide a size for each unique data value,\n    which forces a categorical interpretation. The argument may also be a\n    min, max tuple.\nsize_order : list\n    Specified order for appearance of the `size` variable levels,\n    otherwise they are determined from the data. Not relevant when the\n    `size` variable is numeric.\nsize_norm : tuple or Normalize object\n    Normalization in data units for scaling plot objects when the\n    `size` variable is numeric.\nmarkers : boolean, list, or dictionary\n    Object determining how to draw the markers for different levels of the\n    `style` variable. Setting to `True` will use default markers, or\n    you can pass a list of markers or a dictionary mapping levels of the\n    `style` variable to markers. Setting to `False` will draw\n    marker-less lines.  Markers are specified as in matplotlib.\nstyle_order : list\n    Specified order for appearance of the `style` variable levels\n    otherwise they are determined from the data. Not relevant when the\n    `style` variable is numeric.\nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\nax : :class:`matplotlib.axes.Axes`\n    Pre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\n    internally.\nkwargs : key, value mappings\n    Other keyword arguments are passed down to\n    :meth:`matplotlib.axes.Axes.scatter`.\n\nReturns\n-------\n:class:`matplotlib.axes.Axes`\n    The matplotlib axes containing the plot.\n\nSee Also\n--------\nlineplot : Plot data using lines.\nstripplot : Plot a categorical scatter with jitter.\nswarmplot : Plot a categorical scatter with non-overlapping points.\n\nExamples\n--------\n\n.. include:: ../docstrings/scatterplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "style": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "sizes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "markers": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "style_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set",
    "type": "function",
    "description": "Alias for :func:`set_theme`, which is the preferred interface.\n\nThis function may be removed in the future.",
    "parameters": {
      "type": "object",
      "properties": {
        "args": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_color_codes",
    "type": "function",
    "description": "Change how matplotlib color shorthands are interpreted.\n\nCalling this will change how shorthand codes like \"b\" or \"g\"\nare interpreted by matplotlib in subsequent plots.\n\nParameters\n----------\npalette : {deep, muted, pastel, dark, bright, colorblind}\n    Named seaborn palette to use as the source of colors.\n\nSee Also\n--------\nset : Color codes can be set through the high-level seaborn style\n      manager.\nset_palette : Color codes can also be set through the function that\n              sets the matplotlib color cycle.",
    "parameters": {
      "type": "object",
      "properties": {
        "palette": {
          "type": "any",
          "default": "deep",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_context",
    "type": "function",
    "description": "Set the parameters that control the scaling of plot elements.\n\nThese parameters correspond to label size, line thickness, etc.\nCalling this function modifies the global matplotlib `rcParams`. For more\ninformation, see the :doc:`aesthetics tutorial <../tutorial/aesthetics>`.\n\nThe base context is \"notebook\", and the other contexts are \"paper\", \"talk\",\nand \"poster\", which are version of the notebook parameters scaled by different\nvalues. Font elements can also be scaled independently of (but relative to)\nthe other values.\n\nSee :func:`plotting_context` to get the parameter values.\n\nParameters\n----------\ncontext : dict, or one of {paper, notebook, talk, poster}\n    A dictionary of parameters or the name of a preconfigured set.\nfont_scale : float, optional\n    Separate scaling factor to independently scale the size of the\n    font elements.\nrc : dict, optional\n    Parameter mappings to override the values in the preset seaborn\n    context dictionaries. This only updates parameters that are\n    considered part of the context definition.\n\nExamples\n--------\n\n.. include:: ../docstrings/set_context.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "context": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "font_scale": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_hls_values",
    "type": "function",
    "description": "Independently manipulate the h, l, or s channels of a color.\n\nParameters\n----------\ncolor : matplotlib color\n    hex, rgb-tuple, or html color name\nh, l, s : floats between 0 and 1, or None\n    new values for each channel in hls space\n\nReturns\n-------\nnew_color : rgb tuple\n    new color code in RGB tuple representation",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "h": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "l": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "s": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "color"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_palette",
    "type": "function",
    "description": "Set the matplotlib color cycle using a seaborn palette.\n\nParameters\n----------\npalette : seaborn color palette | matplotlib colormap | hls | husl\n    Palette definition. Should be something :func:`color_palette` can process.\nn_colors : int\n    Number of colors in the cycle. The default number of colors will depend\n    on the format of ``palette``, see the :func:`color_palette`\n    documentation for more information.\ndesat : float\n    Proportion to desaturate each color by.\ncolor_codes : bool\n    If ``True`` and ``palette`` is a seaborn palette, remap the shorthand\n    color codes (e.g. \"b\", \"g\", \"r\", etc.) to the colors from this palette.\n\nSee Also\n--------\ncolor_palette : build a color palette or set the color cycle temporarily\n                in a ``with`` statement.\nset_context : set parameters to scale plot elements\nset_style : set the default parameters for figure style",
    "parameters": {
      "type": "object",
      "properties": {
        "palette": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n_colors": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "desat": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color_codes": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "palette"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_style",
    "type": "function",
    "description": "Set the parameters that control the general style of the plots.\n\nThe style parameters control properties like the color of the background and\nwhether a grid is enabled by default. This is accomplished using the\nmatplotlib rcParams system.\n\nThe options are illustrated in the\n:doc:`aesthetics tutorial <../tutorial/aesthetics>`.\n\nSee :func:`axes_style` to get the parameter values.\n\nParameters\n----------\nstyle : dict, or one of {darkgrid, whitegrid, dark, white, ticks}\n    A dictionary of parameters or the name of a preconfigured style.\nrc : dict, optional\n    Parameter mappings to override the values in the preset seaborn\n    style dictionaries. This only updates parameters that are\n    considered part of the style definition.\n\nExamples\n--------\n\n.. include:: ../docstrings/set_style.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "style": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "set_theme",
    "type": "function",
    "description": "Set aspects of the visual theme for all matplotlib and seaborn plots.\n\nThis function changes the global defaults for all plots using the\nmatplotlib rcParams system. The themeing is decomposed into several distinct\nsets of parameter values.\n\nThe options are illustrated in the :doc:`aesthetics <../tutorial/aesthetics>`\nand :doc:`color palette <../tutorial/color_palettes>` tutorials.\n\nParameters\n----------\ncontext : string or dict\n    Scaling parameters, see :func:`plotting_context`.\nstyle : string or dict\n    Axes style parameters, see :func:`axes_style`.\npalette : string or sequence\n    Color palette, see :func:`color_palette`.\nfont : string\n    Font family, see matplotlib font manager.\nfont_scale : float, optional\n    Separate scaling factor to independently scale the size of the\n    font elements.\ncolor_codes : bool\n    If ``True`` and ``palette`` is a seaborn palette, remap the shorthand\n    color codes (e.g. \"b\", \"g\", \"r\", etc.) to the colors from this palette.\nrc : dict or None\n    Dictionary of rc parameter mappings to override the above.\n\nExamples\n--------\n\n.. include:: ../docstrings/set_theme.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "context": {
          "type": "any",
          "default": "notebook",
          "description": " "
        },
        "style": {
          "type": "any",
          "default": "darkgrid",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "deep",
          "description": " "
        },
        "font": {
          "type": "any",
          "default": "sans-serif",
          "description": " "
        },
        "font_scale": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "color_codes": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "rc": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "stripplot",
    "type": "function",
    "description": "Draw a categorical scatterplot using jitter to reduce overplotting.\n\nA strip plot can be drawn on its own, but it is also a good complement\nto a box or violin plot in cases where you want to show all observations\nalong with some representation of the underlying distribution.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \njitter : float, `True`/`1` is special-cased\n    Amount of jitter (only along the categorical axis) to apply. This\n    can be useful when you have many points and they overlap, so that\n    it is easier to see the distribution. You can specify the amount\n    of jitter (half the width of the uniform random variable support),\n    or use `True` for a good default.\ndodge : bool\n    When a `hue` variable is assigned, setting this to `True` will\n    separate the strips for different hue levels along the categorical\n    axis and narrow the amount of space allotedto each strip. Otherwise,\n    the points for each level will be plotted in the same strip.\norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsize : float\n    Radius of the markers, in points.\nedgecolor : matplotlib color, \"gray\" is special-cased\n    Color of the lines around each point. If you pass `\"gray\"`, the\n    brightness is determined by the color palette used for the body\n    of the points. Note that `stripplot` has `linewidth=0` by default,\n    so edge colors are only visible with nonzero line width.\nlinewidth : float\n    Width of the lines that frame the plot elements.    \nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other keyword arguments are passed through to\n    :meth:`matplotlib.axes.Axes.scatter`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nswarmplot : A categorical scatterplot where the points do not overlap. Can\n            be used with other plots to show each observation.    \nboxplot : A traditional box-and-whisker plot with a similar API.    \nviolinplot : A combination of boxplot and kernel density estimation.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nExamples\n--------\n.. include:: ../docstrings/stripplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "jitter": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "edgecolor": {
          "type": "any",
          "default": "<default>",
          "description": " "
        },
        "linewidth": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "swarmplot",
    "type": "function",
    "description": "Draw a categorical scatterplot with points adjusted to be non-overlapping.\n\nThis function is similar to :func:`stripplot`, but the points are adjusted\n(only along the categorical axis) so that they don't overlap. This gives a\nbetter representation of the distribution of values, but it does not scale\nwell to large numbers of observations. This style of plot is sometimes\ncalled a \"beeswarm\".\n\nA swarm plot can be drawn on its own, but it is also a good complement\nto a box or violin plot in cases where you want to show all observations\nalong with some representation of the underlying distribution.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \ndodge : bool\n    When a `hue` variable is assigned, setting this to `True` will\n    separate the swarms for different hue levels along the categorical\n    axis and narrow the amount of space allotedto each strip. Otherwise,\n    the points for each level will be plotted in the same swarm.\norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsize : float\n    Radius of the markers, in points.\nedgecolor : matplotlib color, \"gray\" is special-cased\n    Color of the lines around each point. If you pass `\"gray\"`, the\n    brightness is determined by the color palette used for the body\n    of the points.\nlinewidth : float\n    Width of the lines that frame the plot elements.    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Other keyword arguments are passed through to\n    :meth:`matplotlib.axes.Axes.scatter`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nboxplot : A traditional box-and-whisker plot with a similar API.    \nviolinplot : A combination of boxplot and kernel density estimation.    \nstripplot : A scatterplot where one variable is categorical. Can be used\n            in conjunction with other plots to show each observation.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nExamples\n--------\n.. include:: ../docstrings/swarmplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "size": {
          "type": "any",
          "default": "5",
          "description": " "
        },
        "edgecolor": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "linewidth": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "warn_thresh": {
          "type": "any",
          "default": "0.05",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "violinplot",
    "type": "function",
    "description": "Draw a patch representing a KDE and add observations or box plot statistics.\n\nA violin plot plays a similar role as a box-and-whisker plot. It shows the\ndistribution of data points after grouping by one (or more) variables.\nUnlike a box plot, each violin is drawn using a kernel density estimate\nof the underlying distribution.\n\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\n\n.. note::\n    By default, this function treats one of the variables as categorical\n    and draws data at ordinal positions (0, 1, ... n) on the relevant axis.\n    As of version 0.13.0, this can be disabled by setting `native_scale=True`.\n\n\nParameters\n----------\ndata : DataFrame, Series, dict, array, or list of arrays\n    Dataset for plotting. If `x` and `y` are absent, this is\n    interpreted as wide-form. Otherwise it is expected to be long-form.    \nx, y, hue : names of variables in `data` or vector data\n    Inputs for plotting long-form data. See examples for interpretation.    \norder, hue_order : lists of strings\n    Order to plot the categorical levels in; otherwise the levels are\n    inferred from the data objects.    \norient : \"v\" | \"h\" | \"x\" | \"y\"\n    Orientation of the plot (vertical or horizontal). This is usually\n    inferred based on the type of the input variables, but it can be used\n    to resolve ambiguity when both `x` and `y` are numeric or when\n    plotting wide-form data.\n\n    .. versionchanged:: v0.13.0\n        Added 'x'/'y' as options, equivalent to 'v'/'h'.    \ncolor : matplotlib color\n    Single color for the elements in the plot.    \npalette : palette name, list, or dict\n    Colors to use for the different levels of the ``hue`` variable. Should\n    be something that can be interpreted by :func:`color_palette`, or a\n    dictionary mapping hue levels to matplotlib colors.    \nsaturation : float\n    Proportion of the original saturation to draw fill colors in. Large\n    patches often look better with desaturated colors, but set this to\n    `1` if you want the colors to perfectly match the input values.    \nfill : bool\n    If True, use a solid patch. Otherwise, draw as line art.\n\n    .. versionadded:: v0.13.0    \ninner : {\"box\", \"quart\", \"point\", \"stick\", None}\n    Representation of the data in the violin interior. One of the following:\n\n    - `\"box\"`: draw a miniature box-and-whisker plot\n    - `\"quart\"`: show the quartiles of the data\n    - `\"point\"` or `\"stick\"`: show each observation\nsplit : bool\n    Show an un-mirrored distribution, alternating sides when using `hue`.\n\n    .. versionchanged:: v0.13.0\n        Previously, this option required a `hue` variable with exactly two levels.\nwidth : float\n    Width allotted to each element on the orient axis. When `native_scale=True`,\n    it is relative to the minimum distance between two values in the native scale.    \ndodge : \"auto\" or bool\n    When hue mapping is used, whether elements should be narrowed and shifted along\n    the orient axis to eliminate overlap. If `\"auto\"`, set to `True` when the\n    orient variable is crossed with the categorical variable or `False` otherwise.\n\n    .. versionchanged:: 0.13.0\n\n        Added `\"auto\"` mode as a new default.    \ngap : float\n    Shrink on the orient axis by this factor to add a gap between dodged elements.\n\n    .. versionadded:: 0.13.0    \nlinewidth : float\n    Width of the lines that frame the plot elements.    \nlinecolor : color\n    Color to use for line elements, when `fill` is True.\n\n    .. versionadded:: v0.13.0    \ncut : float\n    Distance, in units of bandwidth, to extend the density past extreme\n    datapoints. Set to 0 to limit the violin within the data range.\ngridsize : int\n    Number of points in the discrete grid used to evaluate the KDE.\nbw_method : {\"scott\", \"silverman\", float}\n    Either the name of a reference rule or the scale factor to use when\n    computing the kernel bandwidth. The actual kernel size will be\n    determined by multiplying the scale factor by the standard deviation of\n    the data within each group.\n\n    .. versionadded:: v0.13.0\nbw_adjust: float\n    Factor that scales the bandwidth to use more or less smoothing.\n\n    .. versionadded:: v0.13.0\ndensity_norm : {\"area\", \"count\", \"width\"}\n    Method that normalizes each density to determine the violin's width.\n    If `area`, each violin will have the same area. If `count`, the width\n    will be proportional to the number of observations. If `width`, each\n    violin will have the same width.\n\n    .. versionadded:: v0.13.0\ncommon_norm : bool\n    When `True`, normalize the density across all violins.\n\n    .. versionadded:: v0.13.0\nhue_norm : tuple or :class:`matplotlib.colors.Normalize` object\n    Normalization in data units for colormap applied to the `hue`\n    variable when it is numeric. Not relevant if `hue` is categorical.\n\n    .. versionadded:: v0.12.0    \nformatter : callable\n    Function for converting categorical data into strings. Affects both grouping\n    and tick labels.\n\n    .. versionadded:: v0.13.0    \nlog_scale : bool or number, or pair of bools or numbers\n    Set axis scale(s) to log. A single value sets the data axis for any numeric\n    axes in the plot. A pair of values sets each axis independently.\n    Numeric values are interpreted as the desired base (default 10).\n    When `None` or `False`, seaborn defers to the existing Axes scale.\n\n    .. versionadded:: v0.13.0    \nnative_scale : bool\n    When True, numeric or datetime values on the categorical axis will maintain\n    their original scaling rather than being converted to fixed indices.\n\n    .. versionadded:: v0.13.0    \nlegend : \"auto\", \"brief\", \"full\", or False\n    How to draw the legend. If \"brief\", numeric `hue` and `size`\n    variables will be represented with a sample of evenly spaced values.\n    If \"full\", every group will get an entry in the legend. If \"auto\",\n    choose between brief or full representation based on number of levels.\n    If `False`, no legend data is added and no legend is drawn.\n\n    .. versionadded:: v0.13.0    \nscale : {\"area\", \"count\", \"width\"}\n    .. deprecated:: v0.13.0\n        See `density_norm`.\nscale_hue : bool\n    .. deprecated:: v0.13.0\n        See `common_norm`.\nbw : {'scott', 'silverman', float}\n    .. deprecated:: v0.13.0\n        See `bw_method` and `bw_adjust`.\ninner_kws : dict of key, value mappings\n    Keyword arguments for the \"inner\" plot, passed to one of:\n\n    - :class:`matplotlib.collections.LineCollection` (with `inner=\"stick\"`)\n    - :meth:`matplotlib.axes.Axes.scatter` (with `inner=\"point\"`)\n    - :meth:`matplotlib.axes.Axes.plot` (with `inner=\"quart\"` or `inner=\"box\"`)\n\n    Additionally, with `inner=\"box\"`, the keywords `box_width`, `whis_width`,\n    and `marker` receive special handling for the components of the \"box\" plot.\n\n    .. versionadded:: v0.13.0\nax : matplotlib Axes\n    Axes object to draw the plot onto, otherwise uses the current Axes.    \nkwargs : key, value mappings\n    Keyword arguments for the violin patches, passsed through to\n    :meth:`matplotlib.axes.Axes.fill_between`.\n\nReturns\n-------\nax : matplotlib Axes\n    Returns the Axes object with the plot drawn onto it.    \n\nSee Also\n--------\nboxplot : A traditional box-and-whisker plot with a similar API.    \nstripplot : A scatterplot where one variable is categorical. Can be used\n            in conjunction with other plots to show each observation.    \nswarmplot : A categorical scatterplot where the points do not overlap. Can\n            be used with other plots to show each observation.    \ncatplot : Combine a categorical plot with a :class:`FacetGrid`.    \n\nExamples\n--------\n.. include:: ../docstrings/violinplot.rst",
    "parameters": {
      "type": "object",
      "properties": {
        "data": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "x": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "y": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "hue_order": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "orient": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "color": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "palette": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "saturation": {
          "type": "any",
          "default": "0.75",
          "description": " "
        },
        "fill": {
          "type": "any",
          "default": "True",
          "description": " "
        },
        "inner": {
          "type": "any",
          "default": "box",
          "description": " "
        },
        "split": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "width": {
          "type": "any",
          "default": "0.8",
          "description": " "
        },
        "dodge": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "gap": {
          "type": "any",
          "default": "0",
          "description": " "
        },
        "linewidth": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "linecolor": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "cut": {
          "type": "any",
          "default": "2",
          "description": " "
        },
        "gridsize": {
          "type": "any",
          "default": "100",
          "description": " "
        },
        "bw_method": {
          "type": "any",
          "default": "scott",
          "description": " "
        },
        "bw_adjust": {
          "type": "any",
          "default": "1",
          "description": " "
        },
        "density_norm": {
          "type": "any",
          "default": "area",
          "description": " "
        },
        "common_norm": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "hue_norm": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "formatter": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "log_scale": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "native_scale": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "legend": {
          "type": "any",
          "default": "auto",
          "description": " "
        },
        "scale": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "scale_hue": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "bw": {
          "type": "any",
          "default": "<deprecated>",
          "description": " "
        },
        "inner_kws": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "ax": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "xkcd_palette",
    "type": "function",
    "description": "Make a palette with color names from the xkcd color survey.\n\nSee xkcd for the full list of colors: https://xkcd.com/color/rgb/\n\nThis is just a simple wrapper around the `seaborn.xkcd_rgb` dictionary.\n\nParameters\n----------\ncolors : list of strings\n    List of keys in the `seaborn.xkcd_rgb` dictionary.\n\nReturns\n-------\npalette\n    A list of colors as RGB tuples.\n\nSee Also\n--------\ncrayon_palette : Make a palette with Crayola crayon colors.",
    "parameters": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "colors"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_versions",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotBarChart",
    "type": "function",
    "description": "柱状图\n参数：\n    rtn_series: pd.Series 收益率序列（索引为坐标名，值为坐标值）\n    direction=H/V 绘图方向，默认为横向柱状图\n    title = None 绘图标题用户指定，建议包含“区间收益率”\n用法：\nret = pd.Series(np.random.normal(0,1,10),index=pd.date_range('20220101',periods=10).strftime('%Y%m%d'))\nplotBarChart(ret)",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "title": {
          "type": "any",
          "default": "区间收益率",
          "description": " "
        },
        "direction": {
          "type": "any",
          "default": "H",
          "description": " "
        }
      },
      "required": [
        "rtn_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotIndIndexNetTrend",
    "type": "function",
    "description": "绘制申万/中信31个行业的区间净值走势图，每个行业一幅子图\n参数:\n    df pd.DataFrame，行业累计收益率（index为日期格式，columns为行业名称，共31个行业，按默认顺序排序）\n    subs 默认为 8*4样式",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "subs": {
          "type": "any",
          "default": "(8, 4)",
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_nettrendchart",
    "type": "function",
    "description": "绘制多个指数叠加的净值走势折线图\n参数:\n    df: pd.DataFrame  \n        index为日期格式\n        columns 名称",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_swindex_nettrendchart",
    "type": "function",
    "description": "绘制申万31个行业的区间净值走势图：8*4样式，每个行业一幅子图\n参数:\n    df: pd.DataFrame\n        index为日期格式\n        columns为行业名称，共31个行业，按默认顺序排序",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_twoax_trendchart",
    "type": "function",
    "description": "绘制双坐标轴图\ndf：第一列、第二列分别为主轴、次轴",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_neu",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "numeric_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "categorical_series": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "factor_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.483*3\n    sector_fill (bool or str): 填补缺失值的方法，默认为'median'\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "outlier_mad",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "mad_limit": {
          "type": "any",
          "default": "1.483",
          "description": " "
        },
        "n_mul": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "sector_categorical",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sector_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "z_score",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "codes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_name",
        "dates",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactor",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorList",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getedbvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "edbcode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "edbcode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorlist",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "codes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_name",
        "dates",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gethqfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getperiodfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gettradeday",
    "type": "function",
    "description": "# 查询交易日，可以是特殊类型的交易日\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:dtype: 特殊交易日（见字名义，不做特别解释）:'d','month_end','month_start','week_end'\n        ,'week_start','quarter_start','quarter_end'\n:return 日期组成的list",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dtype": {
          "type": "any",
          "default": "d",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "monendtradeday",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe，参数中必须包括:'adjdate','weight','stock',即（调仓日期、权重、股票代码），非空\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfoliobacktest",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空\nadd kwargs = [bt_type,rolling_d]  by guosj at 20200318",
    "parameters": {
      "type": "object",
      "properties": {
        "weight_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "benchno": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "buy_rate": {
          "type": "any",
          "default": "0.001",
          "description": " "
        },
        "sell_rate": {
          "type": "any",
          "default": "0.002",
          "description": " "
        },
        "daily_cost": {
          "type": "any",
          "default": "0.0",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "weight_df",
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfolioperformance",
    "type": "function",
    "description": ":rtn_df,组合收益dataFrame,index为时间序列，columns中至少包含['rtn'],['bench_rtn','turnover','stcoknum']为可选\n:t_year,年化天数，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "year_days": {
          "type": "any",
          "default": "250",
          "description": " "
        }
      },
      "required": [
        "rtn_df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "querysql",
    "type": "function",
    "description": "获取基金年报、半年报持股权重数据",
    "parameters": {
      "type": "object",
      "properties": {
        "sql": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "conn": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sql",
        "conn",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getFactorIC",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotBarChart",
    "type": "function",
    "description": "柱状图\n参数：\n    rtn_series: pd.Series 收益率序列（索引为坐标名，值为坐标值）\n    direction=H/V 绘图方向，默认为横向柱状图\n    title = None 绘图标题用户指定，建议包含“区间收益率”\n用法：\nret = pd.Series(np.random.normal(0,1,10),index=pd.date_range('20220101',periods=10).strftime('%Y%m%d'))\nplotBarChart(ret)",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "title": {
          "type": "any",
          "default": "区间收益率",
          "description": " "
        },
        "direction": {
          "type": "any",
          "default": "H",
          "description": " "
        }
      },
      "required": [
        "rtn_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plotIndIndexNetTrend",
    "type": "function",
    "description": "绘制申万/中信31个行业的区间净值走势图，每个行业一幅子图\n参数:\n    df pd.DataFrame，行业累计收益率（index为日期格式，columns为行业名称，共31个行业，按默认顺序排序）\n    subs 默认为 8*4样式",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "subs": {
          "type": "any",
          "default": "(8, 4)",
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_nettrendchart",
    "type": "function",
    "description": "绘制多个指数叠加的净值走势折线图\n参数:\n    df: pd.DataFrame  \n        index为日期格式\n        columns 名称",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_swindex_nettrendchart",
    "type": "function",
    "description": "绘制申万31个行业的区间净值走势图：8*4样式，每个行业一幅子图\n参数:\n    df: pd.DataFrame\n        index为日期格式\n        columns为行业名称，共31个行业，按默认顺序排序",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "plot_twoax_trendchart",
    "type": "function",
    "description": "绘制双坐标轴图\ndf：第一列、第二列分别为主轴、次轴",
    "parameters": {
      "type": "object",
      "properties": {
        "df": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "FactorProcess",
    "type": "function",
    "description": "因子去极值,中性化,标准化,填充缺失值",
    "parameters": {
      "type": "object",
      "properties": {
        "factordata": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "show": {
          "type": "any",
          "default": "False",
          "description": " "
        },
        "kw": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factordata",
        "kw"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "MADextAdj",
    "type": "function",
    "description": "MAD极值调整\n超过极值的部分均匀分布在3-3.5倍之间",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "MADmodAdj",
    "type": "function",
    "description": "MAD极值调整\n超过极值的部分均匀分布在3-3.5倍之间",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "n": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factorOrth",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "X": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "orthret": {
          "type": "any",
          "default": "False",
          "description": " "
        }
      },
      "required": [
        "X"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "olsregression",
    "type": "function",
    "description": "回归",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "y": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "x",
        "y"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "orthfactor",
    "type": "function",
    "description": "因子正交\nx : dataframe,因子值(N×K)",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "standardize",
    "type": "function",
    "description": "标准化",
    "parameters": {
      "type": "object",
      "properties": {
        "x": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "x"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "calfactor",
    "type": "function",
    "description": "因子计算测试",
    "parameters": {
      "type": "object",
      "properties": {
        "t": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fname": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "t",
        "fname"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "testfactor",
    "type": "function",
    "description": "更新给定日期给定因子,并保存",
    "parameters": {
      "type": "object",
      "properties": {
        "t": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "fname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "filepath": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "storekeys": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "t",
        "fname",
        "filepath",
        "storekeys"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getFactorIC",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_neu",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "numeric_series": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "categorical_series": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": [
        "factor_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "factor_to_exposure",
    "type": "function",
    "description": "因子数据标准化处理 （2018.05.30 叶博和宇庭的方案）\n\nArgs:\n    factor_series (pd.Series): 原始因子值\n    all_index (list_like): 全市场的股票代码列表\n    exclude_index (list_like): 需剔除的股票代码列表\n    universe_index (list_like): 选样空间的股票代码列表\n    size_series (pd.Series): 市值序列，同时也用作全市场空间的标志，不可为None\n    sector_series (pd.Series): 行业序列，同时也用作全市场空间的标志，不可为None\n    log (bool): 是否做log处理(自然对数)，一般在处理市值类因子时选用\n    outlier (bool or int): 是否剔除极值； mad_limit=1.483*3\n    sector_fill (bool or str): 填补缺失值的方法，默认为'median'\n    sector_neu (bool): 是否做行业中性化处理\n    size_neu (bool): 是否做市值中性化处理\n    zscore (bool): 行业市值中性化回归后的结果(残差)是否做Z-Score\n\nReturns:\n    pd.Series: 中性化处理后的因子值",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "all_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "exclude_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "universe_index": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "log": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "outlier": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_fill": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "sector_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "size_neu": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "zscore": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_series",
        "all_index",
        "exclude_index",
        "universe_index",
        "size_series",
        "sector_series",
        "log",
        "outlier",
        "sector_fill",
        "sector_neu",
        "size_neu",
        "zscore"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "outlier_mad",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "mad_limit": {
          "type": "any",
          "default": "1.483",
          "description": " "
        },
        "n_mul": {
          "type": "any",
          "default": "3",
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "sector_categorical",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "sector_series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sector_series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "z_score",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "series": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "series"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "codes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_name",
        "dates",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactor",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorList",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getalphafactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getedbvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "edbcode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "edbcode",
        "trade_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorlist",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getfactorvalues",
    "type": "function",
    "description": "add 动态参数kwargs，参数输入必须为 \"creator = 'zhangsan'\"，不可直接加参数值\"zhangsan\"\nalter by guosj at 20200212",
    "parameters": {
      "type": "object",
      "properties": {
        "factor_name": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dates": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "codes": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factor_name",
        "dates",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gethqfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "frequency": {
          "type": "any",
          "default": "D",
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "getperiodfactorSingle",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {
        "factorabbname": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "securitycode": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "trade_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "factorabbname",
        "securitycode",
        "trade_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "gettradeday",
    "type": "function",
    "description": "# 查询交易日，可以是特殊类型的交易日\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:dtype: 特殊交易日（见字名义，不做特别解释）:'d','month_end','month_start','week_end'\n        ,'week_start','quarter_start','quarter_end'\n:return 日期组成的list",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "dtype": {
          "type": "any",
          "default": "d",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "monendtradeday",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe，参数中必须包括:'adjdate','weight','stock',即（调仓日期、权重、股票代码），非空\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "start_dt",
        "end_dt"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfoliobacktest",
    "type": "function",
    "description": ":weight_df: 组合权重配置daframe\n:start_dt: 回测起始日期，非空\n:end_dt: 回测终止日期，非空\n:benchno: 基准代码，例如: 000300.SH,000905.SH,000906.SH，可为空\nadd kwargs = [bt_type,rolling_d]  by guosj at 20200318",
    "parameters": {
      "type": "object",
      "properties": {
        "weight_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "start_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "end_dt": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "benchno": {
          "type": "any",
          "default": "None",
          "description": " "
        },
        "buy_rate": {
          "type": "any",
          "default": "0.001",
          "description": " "
        },
        "sell_rate": {
          "type": "any",
          "default": "0.002",
          "description": " "
        },
        "daily_cost": {
          "type": "any",
          "default": "0.0",
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "weight_df",
        "start_dt",
        "end_dt",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "portfolioperformance",
    "type": "function",
    "description": ":rtn_df,组合收益dataFrame,index为时间序列，columns中至少包含['rtn'],['bench_rtn','turnover','stcoknum']为可选\n:t_year,年化天数，可为空",
    "parameters": {
      "type": "object",
      "properties": {
        "rtn_df": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "year_days": {
          "type": "any",
          "default": "250",
          "description": " "
        }
      },
      "required": [
        "rtn_df"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "querysql",
    "type": "function",
    "description": "获取基金年报、半年报持股权重数据",
    "parameters": {
      "type": "object",
      "properties": {
        "sql": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "conn": {
          "type": "any",
          "default": null,
          "description": " "
        },
        "kwargs": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "sql",
        "conn",
        "kwargs"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "get_ipv4_address",
    "type": "function",
    "description": "No description available.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "HTTPAdapter",
    "type": "class",
    "description": "The built-in HTTP Adapter for urllib3.\n\nProvides a general-case interface for Requests sessions to contact HTTP and\nHTTPS urls by implementing the Transport Adapter interface. This class will\nusually be created by the :class:`Session <Session>` class under the\ncovers.\n\n:param pool_connections: The number of urllib3 connection pools to cache.\n:param pool_maxsize: The maximum number of connections to save in the pool.\n:param max_retries: The maximum number of retries each connection\n    should attempt. Note, this applies only to failed DNS lookups, socket\n    connections and connection timeouts, never to requests where data has\n    made it to the server. By default, Requests does not retry failed\n    connections. If you need granular control over the conditions under\n    which we retry a request, import urllib3's ``Retry`` class and pass\n    that instead.\n:param pool_block: Whether the connection pool should block for connections.\n\nUsage::\n\n  >>> import requests\n  >>> s = requests.Session()\n  >>> a = requests.adapters.HTTPAdapter(max_retries=3)\n  >>> s.mount('http://', a)",
    "methods": [
      {
        "name": "add_headers",
        "type": "function",
        "description": "Add any headers needed by the connection. As of v2.0 this does\nnothing by default, but is left for overriding by users that subclass\nthe :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n:param kwargs: The keyword arguments from the call to send().",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "request": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "request",
            "kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "build_connection_pool_key_attributes",
        "type": "function",
        "description": "Build the PoolKey attributes used by urllib3 to return a connection.\n\nThis looks at the PreparedRequest, the user-specified verify value,\nand the value of the cert parameter to determine what PoolKey values\nto use to select a connection from a given urllib3 Connection Pool.\n\nThe SSL related pool key arguments are not consistently set. As of\nthis writing, use the following to determine what keys may be in that\ndictionary:\n\n* If ``verify`` is ``True``, ``\"ssl_context\"`` will be set and will be the\n  default Requests SSL Context\n* If ``verify`` is ``False``, ``\"ssl_context\"`` will not be set but\n  ``\"cert_reqs\"`` will be set\n* If ``verify`` is a string, (i.e., it is a user-specified trust bundle)\n  ``\"ca_certs\"`` will be set if the string is not a directory recognized\n  by :py:func:`os.path.isdir`, otherwise ``\"ca_certs_dir\"`` will be\n  set.\n* If ``\"cert\"`` is specified, ``\"cert_file\"`` will always be set. If\n  ``\"cert\"`` is a tuple with a second item, ``\"key_file\"`` will also\n  be present\n\nTo override these settings, one may subclass this class, call this\nmethod and use the above logic to change parameters as desired. For\nexample, if one wishes to use a custom :py:class:`ssl.SSLContext` one\nmust both set ``\"ssl_context\"`` and based on what else they require,\nalter the other keys to ensure the desired behaviour.\n\n:param request:\n    The PreparedReqest being sent over the connection.\n:type request:\n    :class:`~requests.models.PreparedRequest`\n:param verify:\n    Either a boolean, in which case it controls whether\n    we verify the server's TLS certificate, or a string, in which case it\n    must be a path to a CA bundle to use.\n:param cert:\n    (optional) Any user-provided SSL certificate for client\n    authentication (a.k.a., mTLS). This may be a string (i.e., just\n    the path to a file which holds both certificate and key) or a\n    tuple of length 2 with the certificate file path and key file\n    path.\n:returns:\n    A tuple of two dictionaries. The first is the \"host parameters\"\n    portion of the Pool Key including scheme, hostname, and port. The\n    second is a dictionary of SSLContext related parameters.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "request": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "verify": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cert": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "request",
            "verify"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "build_response",
        "type": "function",
        "description": "Builds a :class:`Response <requests.Response>` object from a urllib3\nresponse. This should not be called from user code, and is only exposed\nfor use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`\n\n:param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n:param resp: The urllib3 response object.\n:rtype: requests.Response",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "req": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "resp": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "req",
            "resp"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "cert_verify",
        "type": "function",
        "description": "Verify a SSL certificate. This method should not be called from user\ncode, and is only exposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param conn: The urllib3 connection object associated with the cert.\n:param url: The requested URL.\n:param verify: Either a boolean, in which case it controls whether we verify\n    the server's TLS certificate, or a string, in which case it must be a path\n    to a CA bundle to use\n:param cert: The SSL certificate to verify.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "conn": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "url": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "verify": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "cert": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "conn",
            "url",
            "verify",
            "cert"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "close",
        "type": "function",
        "description": "Disposes of any internal state.\n\nCurrently, this closes the PoolManager and any active ProxyManager,\nwhich closes any pooled connections.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_connection",
        "type": "function",
        "description": "DEPRECATED: Users should move to `get_connection_with_tls_context`\nfor all subclasses of HTTPAdapter using Requests>=2.32.2.\n\nReturns a urllib3 connection for the given URL. This should not be\ncalled from user code, and is only exposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param url: The URL to connect to.\n:param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n:rtype: urllib3.ConnectionPool",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "url": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxies": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "url"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "get_connection_with_tls_context",
        "type": "function",
        "description": "Returns a urllib3 connection for the given request and TLS settings.\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request:\n    The :class:`PreparedRequest <PreparedRequest>` object to be sent\n    over the connection.\n:param verify:\n    Either a boolean, in which case it controls whether we verify the\n    server's TLS certificate, or a string, in which case it must be a\n    path to a CA bundle to use.\n:param proxies:\n    (optional) The proxies dictionary to apply to the request.\n:param cert:\n    (optional) Any user-provided SSL certificate to be used for client\n    authentication (a.k.a., mTLS).\n:rtype:\n    urllib3.ConnectionPool",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "request": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "verify": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxies": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "cert": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "request",
            "verify"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "init_poolmanager",
        "type": "function",
        "description": "Initializes a urllib3 PoolManager.\n\nThis method should not be called from user code, and is only\nexposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param connections: The number of urllib3 connection pools to cache.\n:param maxsize: The maximum number of connections to save in the pool.\n:param block: Block when no free connections are available.\n:param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager.",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "connections": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "maxsize": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "block": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "pool_kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "connections",
            "maxsize",
            "pool_kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "proxy_headers",
        "type": "function",
        "description": "Returns a dictionary of the headers to add to any request sent\nthrough a proxy. This works with urllib3 magic to ensure that they are\ncorrectly sent to the proxy, rather than in a tunnelled request if\nCONNECT is being used.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param proxy: The url of the proxy being used for this request.\n:rtype: dict",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxy": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "proxy"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "proxy_manager_for",
        "type": "function",
        "description": "Return urllib3 ProxyManager for the given proxy.\n\nThis method should not be called from user code, and is only\nexposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param proxy: The proxy to return a urllib3 ProxyManager for.\n:param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.\n:returns: ProxyManager\n:rtype: urllib3.ProxyManager",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxy": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxy_kwargs": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "proxy",
            "proxy_kwargs"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "request_url",
        "type": "function",
        "description": "Obtain the url to use when making the final request.\n\nIf the message is being sent through a HTTP proxy, the full URL has to\nbe used. Otherwise, we should only use the path portion of the URL.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n:param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.\n:rtype: str",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "request": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "proxies": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "request",
            "proxies"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "send",
        "type": "function",
        "description": "Sends PreparedRequest object. Returns Response object.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n:param stream: (optional) Whether to stream the request content.\n:param timeout: (optional) How long to wait for the server to send\n    data before giving up, as a float, or a :ref:`(connect timeout,\n    read timeout) <timeouts>` tuple.\n:type timeout: float or tuple or urllib3 Timeout object\n:param verify: (optional) Either a boolean, in which case it controls whether\n    we verify the server's TLS certificate, or a string, in which case it\n    must be a path to a CA bundle to use\n:param cert: (optional) Any user-provided SSL certificate to be trusted.\n:param proxies: (optional) The proxies dictionary to apply to the request.\n:rtype: requests.Response",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "request": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "stream": {
              "type": "any",
              "default": "False",
              "description": " "
            },
            "timeout": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "verify": {
              "type": "any",
              "default": "True",
              "description": " "
            },
            "cert": {
              "type": "any",
              "default": "None",
              "description": " "
            },
            "proxies": {
              "type": "any",
              "default": "None",
              "description": " "
            }
          },
          "required": [
            "request"
          ]
        },
        "return": {
          "type": "any",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "Retry",
    "type": "class",
    "description": "Retry configuration.\n\nEach retry attempt will create a new Retry object with updated values, so\nthey can be safely reused.\n\nRetries can be defined as a default for a pool:\n\n.. code-block:: python\n\n    retries = Retry(connect=5, read=2, redirect=5)\n    http = PoolManager(retries=retries)\n    response = http.request(\"GET\", \"https://example.com/\")\n\nOr per-request (which overrides the default for the pool):\n\n.. code-block:: python\n\n    response = http.request(\"GET\", \"https://example.com/\", retries=Retry(10))\n\nRetries can be disabled by passing ``False``:\n\n.. code-block:: python\n\n    response = http.request(\"GET\", \"https://example.com/\", retries=False)\n\nErrors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless\nretries are disabled, in which case the causing exception will be raised.\n\n:param int total:\n    Total number of retries to allow. Takes precedence over other counts.\n\n    Set to ``None`` to remove this constraint and fall back on other\n    counts.\n\n    Set to ``0`` to fail on the first retry.\n\n    Set to ``False`` to disable and imply ``raise_on_redirect=False``.\n\n:param int connect:\n    How many connection-related errors to retry on.\n\n    These are errors raised before the request is sent to the remote server,\n    which we assume has not triggered the server to process the request.\n\n    Set to ``0`` to fail on the first retry of this type.\n\n:param int read:\n    How many times to retry on read errors.\n\n    These errors are raised after the request was sent to the server, so the\n    request may have side-effects.\n\n    Set to ``0`` to fail on the first retry of this type.\n\n:param int redirect:\n    How many redirects to perform. Limit this to avoid infinite redirect\n    loops.\n\n    A redirect is a HTTP response with a status code 301, 302, 303, 307 or\n    308.\n\n    Set to ``0`` to fail on the first retry of this type.\n\n    Set to ``False`` to disable and imply ``raise_on_redirect=False``.\n\n:param int status:\n    How many times to retry on bad status codes.\n\n    These are retries made on responses, where status code matches\n    ``status_forcelist``.\n\n    Set to ``0`` to fail on the first retry of this type.\n\n:param int other:\n    How many times to retry on other errors.\n\n    Other errors are errors that are not connect, read, redirect or status errors.\n    These errors might be raised after the request was sent to the server, so the\n    request might have side-effects.\n\n    Set to ``0`` to fail on the first retry of this type.\n\n    If ``total`` is not set, it's a good idea to set this to 0 to account\n    for unexpected edge cases and avoid infinite retry loops.\n\n:param Collection allowed_methods:\n    Set of uppercased HTTP method verbs that we should retry on.\n\n    By default, we only retry on methods which are considered to be\n    idempotent (multiple requests with the same parameters end with the\n    same state). See :attr:`Retry.DEFAULT_ALLOWED_METHODS`.\n\n    Set to a ``None`` value to retry on any verb.\n\n:param Collection status_forcelist:\n    A set of integer HTTP status codes that we should force a retry on.\n    A retry is initiated if the request method is in ``allowed_methods``\n    and the response status code is in ``status_forcelist``.\n\n    By default, this is disabled with ``None``.\n\n:param float backoff_factor:\n    A backoff factor to apply between attempts after the second try\n    (most errors are resolved immediately by a second try without a\n    delay). urllib3 will sleep for::\n\n        {backoff factor} * (2 ** ({number of previous retries}))\n\n    seconds. If `backoff_jitter` is non-zero, this sleep is extended by::\n\n        random.uniform(0, {backoff jitter})\n\n    seconds. For example, if the backoff_factor is 0.1, then :func:`Retry.sleep` will\n    sleep for [0.0s, 0.2s, 0.4s, 0.8s, ...] between retries. No backoff will ever\n    be longer than `backoff_max`.\n\n    By default, backoff is disabled (factor set to 0).\n\n:param bool raise_on_redirect: Whether, if the number of redirects is\n    exhausted, to raise a MaxRetryError, or to return a response with a\n    response code in the 3xx range.\n\n:param bool raise_on_status: Similar meaning to ``raise_on_redirect``:\n    whether we should raise an exception, or return a response,\n    if status falls in ``status_forcelist`` range and retries have\n    been exhausted.\n\n:param tuple history: The history of the request encountered during\n    each call to :meth:`~Retry.increment`. The list is in the order\n    the requests occurred. Each list item is of class :class:`RequestHistory`.\n\n:param bool respect_retry_after_header:\n    Whether to respect Retry-After header on status codes defined as\n    :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.\n\n:param Collection remove_headers_on_redirect:\n    Sequence of headers to remove from the request when a response\n    indicating a redirect is returned before firing off the redirected\n    request.",
    "methods": [
      {
        "name": "get_backoff_time",
        "type": "function",
        "description": "Formula for computing the current backoff\n\n:rtype: float",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "float",
          "description": " "
        }
      },
      {
        "name": "is_exhausted",
        "type": "function",
        "description": "Are we out of retries?",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "bool",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "WindClient",
    "type": "class",
    "description": "Wind API客户端类",
    "methods": [
      {
        "name": "edb",
        "type": "function",
        "description": "获取宏观经济指标数据\n参数:\n    codes: 股票代码，可以是单个代码或代码列表\n    fields: 指标字段，可以是单个字段或字段列表\n    options: 可选参数字符串，格式为\"key1=value1;key2=value2\"\n    \n返回:\n    包含请求数据的DataFrame",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "begindate": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "enddate": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "codes",
            "begindate",
            "enddate"
          ]
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "edb_indicatorinfo",
        "type": "function",
        "description": "获取宏观经济指标信息",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "indicatorinfo",
        "type": "function",
        "description": "获取指标信息\n\n返回:\n    包含指标信息的DataFrame，包括指标名称、类型、表名、列名等",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "sectortype",
        "type": "function",
        "description": "获取sectortype表数据",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "start",
        "type": "function",
        "description": "初始化 Wind API 客户端并连接服务器\n\n参数:\n    base_url: API 服务的基础 URL\n    timeout: 请求超时时间（秒）\n\n返回:\n    True: 初始化成功",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "timeout": {
              "type": "int",
              "default": "150",
              "description": " "
            }
          },
          "required": []
        },
        "return": {
          "type": "any",
          "description": " "
        }
      },
      {
        "name": "tdays",
        "type": "function",
        "description": "获取交易日序列\n\n参数:\n    start: 开始日期，格式为'YYYY-MM-DD'\n    end: 结束日期，格式为'YYYY-MM-DD'\n    options: 可选参数字符串\n    \n返回:\n    包含交易日的日期列表",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "end": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "start",
            "end"
          ]
        },
        "return": {
          "type": "typing.List[datetime.datetime]",
          "description": " "
        }
      },
      {
        "name": "tdayscount",
        "type": "function",
        "description": "获取交易日天数\n\n参数:\n    start: 开始日期，格式为'YYYY-MM-DD'\n    end: 结束日期，格式为'YYYY-MM-DD'\n    options: 可选参数字符串\n    \n返回:\n    交易日天数（整数）",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "start": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "end": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "start",
            "end"
          ]
        },
        "return": {
          "type": "<class 'int'>",
          "description": " "
        }
      },
      {
        "name": "tdaysoffset",
        "type": "function",
        "description": "获取偏移后的交易日\n\n参数:\n    offset: 偏移天数，正数为向后偏移，负数为向前偏移\n    begin_time: 开始日期，格式为'YYYY-MM-DD'\n    options: 可选参数字符串\n    \n返回:\n    偏移后的交易日，格式为'YYYY-MM-DD'",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "offset": {
              "type": "int",
              "default": null,
              "description": " "
            },
            "begin_time": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "offset",
            "begin_time"
          ]
        },
        "return": {
          "type": "<class 'str'>",
          "description": " "
        }
      },
      {
        "name": "windcodes",
        "type": "function",
        "description": "获取指定品种的所有代码\n\n参数:\n    sectypes: 品种类型，可以是单个类型或类型列表\n    \n返回:\n    包含代码的DataFrame",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "sectypes": {
              "type": "Union",
              "default": null,
              "description": " "
            }
          },
          "required": [
            "sectypes"
          ]
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "wsd",
        "type": "function",
        "description": "获取时间序列数据\n\n参数:\n    codes: 股票代码，可以是单个代码或代码列表\n    fields: 指标字段，可以是单个字段或字段列表\n    begindate: 开始日期，格式为'YYYY-MM-DD'\n    enddate: 结束日期，格式为'YYYY-MM-DD'\n    options: 可选参数字符串，格式为\"key1=value1;key2=value2\"\n    \n返回:\n    包含请求数据的DataFrame",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "fields": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "begindate": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "enddate": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "codes",
            "fields",
            "begindate",
            "enddate"
          ]
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "wset",
        "type": "function",
        "description": "获取数据集\n\n参数:\n    target: 数据集名称\n    options: 可选参数字符串，格式为\"key1=value1;key2=value2\"\n    \n返回:\n    包含请求数据的DataFrame",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "target": {
              "type": "str",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "target"
          ]
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      },
      {
        "name": "wss",
        "type": "function",
        "description": "获取截面数据\n\n参数:\n    codes: 股票代码，可以是单个代码或代码列表\n    fields: 指标字段，可以是单个字段或字段列表\n    options: 可选参数字符串，格式为\"key1=value1;key2=value2\"\n    \n返回:\n    包含请求数据的DataFrame",
        "parameters": {
          "type": "object",
          "properties": {
            "self": {
              "type": "any",
              "default": null,
              "description": " "
            },
            "codes": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "fields": {
              "type": "Union",
              "default": null,
              "description": " "
            },
            "options": {
              "type": "str",
              "default": "",
              "description": " "
            }
          },
          "required": [
            "codes",
            "fields"
          ]
        },
        "return": {
          "type": "<class 'pandas.core.frame.DataFrame'>",
          "description": " "
        }
      }
    ],
    "properties": []
  },
  {
    "name": "WindClientError",
    "type": "class",
    "description": "Wind客户端异常类",
    "methods": [],
    "properties": []
  },
  {
    "name": "datetime",
    "type": "class",
    "description": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\nThe year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints.",
    "methods": [],
    "properties": []
  },
  {
    "name": "get_logger",
    "type": "function",
    "description": "获取指定名称的日志记录器\n\n参数:\n    name: 日志记录器名称\n\n返回:\n    Logger 实例",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "name"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "WindClientError",
    "type": "class",
    "description": "Wind客户端异常类",
    "methods": [],
    "properties": []
  },
  {
    "name": "datetime",
    "type": "class",
    "description": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\nThe year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints.",
    "methods": [],
    "properties": []
  },
  {
    "name": "get_logger",
    "type": "function",
    "description": "获取指定名称的日志记录器\n\n参数:\n    name: 日志记录器名称\n\n返回:\n    Logger 实例",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "any",
          "default": null,
          "description": " "
        }
      },
      "required": [
        "name"
      ]
    },
    "return": {
      "type": "any",
      "description": " "
    }
  },
  {
    "name": "setup_logging",
    "type": "function",
    "description": "设置日志配置\n\n参数:\n    level: 日志级别，默认为 INFO",
    "parameters": {
      "type": "object",
      "properties": {
        "level": {
          "type": "any",
          "default": "None",
          "description": " "
        }
      },
      "required": []
    },
    "return": {
      "type": "any",
      "description": " "
    }
  }
]